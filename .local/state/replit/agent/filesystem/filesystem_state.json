{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { AuthProvider } from '@/hooks/useAuth';\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Router, Route, useLocation, Redirect } from \"wouter\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/layout/AppSidebar\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport Dashboard from \"./pages/Dashboard\";\nimport AdminDashboard from './pages/AdminDashboard';\nimport AdminSettings from './pages/AdminSettings';\nimport AdminCRM from './pages/AdminCRM';\nimport CompanyDetails from './pages/CompanyDetails';\nimport SubscriptionAdminDashboard from './pages/SubscriptionAdminDashboard';\nimport AdminCompanyDashboard from './pages/AdminCompanyDashboard';\nimport SupportCenter from './pages/SupportCenter';\nimport CompanyDashboard from './pages/CompanyDashboard';\nimport Sales from './pages/Sales';\nimport QuickPOS from './pages/QuickPOS';\nimport Products from './pages/Products';\nimport Customers from './pages/Customers';\nimport Transactions from './pages/Transactions';\nimport Employees from './pages/Employees';\nimport Reports from './pages/Reports';\nimport Invoices from './pages/Invoices';\nimport Settings from './pages/Settings';\nimport BillTestPage from './pages/BillTestPage';\nimport NotFound from './pages/NotFound';\nimport ProtectedRoute from './components/ProtectedRoute';\nimport CompanyLogin from './pages/CompanyLogin';\nimport EmployeeLogin from './pages/EmployeeLogin';\nimport Unauthorized from './pages/Unauthorized';\nimport './App.css';\nimport OfflineBadge from '@/components/OfflineBadge';\n\nfunction AppRoutes() {\n  const [location] = useLocation();\n  const [isFullscreen, setIsFullscreen] = useState(!!document.fullscreenElement);\n  \n  useEffect(() => {\n    const handleFullscreenChange = () => setIsFullscreen(!!document.fullscreenElement);\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, []);\n\n  // Check if we're on a login page\n  const isLoginPage = location === '/login' || location === '/employee-login';\n  \n  return (\n    <div className=\"min-h-screen flex w-full\">\n      {/* Only show AppSidebar if not in fullscreen on /quickpos and not on login pages */}\n      {!(isFullscreen && location === '/quickpos') && !isLoginPage && <AppSidebar />}\n      <div className=\"flex-1 flex flex-col\">\n        {!isLoginPage && (\n          <header className=\"h-12 flex items-center border-b px-4\">\n            <SidebarTrigger />\n          </header>\n        )}\n        <main className=\"flex-1 overflow-auto\">\n          <ErrorBoundary>\n            {/* Public routes */}\n            <Route path=\"/login\" component={CompanyLogin} />\n            <Route path=\"/employee-login\" component={EmployeeLogin} />\n            <Route path=\"/unauthorized\" component={Unauthorized} />\n            \n            {/* Protected routes */}\n            <Route path=\"/\">\n              {() => (\n                <ProtectedRoute>\n                  <Redirect to=\"/dashboard\" />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/dashboard\">\n              {() => (\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              )}\n            </Route>\n              \n            {/* Admin routes */}\n            <Route path=\"/admin\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <AdminDashboard />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/admin/settings\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <AdminSettings />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/admin/crm\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <AdminCRM />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/admin/company/:companyId\">\n              {(params) => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <CompanyDetails />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/admin/subscriptions\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <SubscriptionAdminDashboard />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Admin Company Employee routes */}\n            <Route path=\"/admin/company-dashboard\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <AdminCompanyDashboard />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/admin/support\">\n              {() => (\n                <ProtectedRoute allowedRoles={['admin']}>\n                  <SupportCenter />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Company routes */}\n            <Route path=\"/company/dashboard\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company']}>\n                  <CompanyDashboard />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* POS Operations - Available to company users and employees */}\n            <Route path=\"/sales\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager','cashier']}>\n                  <Sales />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/quickpos\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager','cashier']}>\n                  <QuickPOS />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/pos\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager','cashier']}>\n                  <QuickPOS />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Business management - Company, managers and admin only */}\n            <Route path=\"/products\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Products />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/customers\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Customers />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/transactions\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Transactions />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/employees\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Employees />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/reports\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Reports />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            <Route path=\"/invoices\">\n              {() => (\n                <ProtectedRoute allowedRoles={['company','admin','manager']}>\n                  <Invoices />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Settings - Available to all authenticated users */}\n            <Route path=\"/settings\">\n              {() => (\n                <ProtectedRoute>\n                  <Settings />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Bill Test Page - Available to all authenticated users */}\n            <Route path=\"/bill-test\">\n              {() => (\n                <ProtectedRoute>\n                  <BillTestPage />\n                </ProtectedRoute>\n              )}\n            </Route>\n            \n            {/* Catch all */}\n            <Route path=\"*\" component={NotFound} />\n          </ErrorBoundary>\n          <OfflineBadge />\n        </main>\n      </div>\n    </div>\n  );\n}\n\nconst queryClient = new QueryClient();\n\nconst AppWithProviders = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Sonner />\n        <SidebarProvider>\n          <AppRoutes />\n        </SidebarProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n};\n\nconst App = () => (\n  <AuthProvider>\n    <Router>\n      <AppWithProviders />\n    </Router>\n  </AuthProvider>\n);\n\nexport default App;","size_bytes":9407},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. \nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    /* Mobile performance optimizations */\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n  }\n\n  /* Mobile touch optimizations */\n  button, a, [role=\"button\"] {\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  /* Improved scrolling performance */\n  * {\n    -webkit-overflow-scrolling: touch;\n  }\n}\n\n/* Mobile-specific optimizations */\n@media (max-width: 768px) {\n  .mobile-optimized {\n    /* Reduce animations on mobile for better performance */\n    transition-duration: 0.15s !important;\n  }\n  \n  /* Optimize form inputs for mobile */\n  input, textarea, select {\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n  \n  /* Better spacing for touch interfaces */\n  .touch-friendly {\n    min-height: 44px;\n    padding: 12px;\n  }\n}\n\n/* Tablet optimizations */\n@media (min-width: 769px) and (max-width: 1024px) {\n  .tablet-grid {\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  }\n}\n\n/* Performance optimizations for all devices */\n.performance-optimized {\n  will-change: transform;\n  transform: translateZ(0);\n  backface-visibility: hidden;\n}\n\n/* Billing page responsive improvements */\n.billing-container {\n  @apply w-full max-w-none;\n}\n\n@media (max-width: 640px) {\n  .billing-container {\n    @apply px-2 py-4;\n  }\n  \n  .billing-grid {\n    @apply grid-cols-1 gap-3;\n  }\n  \n  .billing-form {\n    @apply space-y-3;\n  }\n  \n  .billing-input {\n    @apply text-base; /* Prevent zoom on mobile */\n  }\n}","size_bytes":3874},"client/src/main.tsx":{"content":"import './lib/array-polyfill';\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\n// Global error handler to catch filter and reduce errors\nwindow.addEventListener('error', (event) => {\n  if (event.error && event.error.message && (\n    event.error.message.includes('filter is not a function') ||\n    event.error.message.includes('reduce is not a function') ||\n    event.error.message.includes('map is not a function') ||\n    event.error.message.includes('find is not a function')\n  )) {\n    console.error('Global error handler caught array method error:', event.error);\n    console.error('Error stack:', event.error.stack);\n    console.error('Error location:', event.filename, event.lineno, event.colno);\n    \n    // Prevent the error from crashing the app\n    event.preventDefault();\n    \n    // Optionally show a user-friendly message\n    const errorMessage = document.createElement('div');\n    errorMessage.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #fef2f2;\n      border: 1px solid #fecaca;\n      color: #dc2626;\n      padding: 12px;\n      border-radius: 6px;\n      z-index: 9999;\n      font-family: sans-serif;\n      font-size: 14px;\n      max-width: 300px;\n    `;\n    errorMessage.textContent = 'A data loading error occurred. Please refresh the page.';\n    document.body.appendChild(errorMessage);\n    \n    // Remove the message after 5 seconds\n    setTimeout(() => {\n      if (errorMessage.parentNode) {\n        errorMessage.parentNode.removeChild(errorMessage);\n      }\n    }, 5000);\n  }\n});\n\n// Global unhandled promise rejection handler\nwindow.addEventListener('unhandledrejection', (event) => {\n  if (event.reason && event.reason.message && (\n    event.reason.message.includes('filter is not a function') ||\n    event.reason.message.includes('reduce is not a function') ||\n    event.reason.message.includes('map is not a function') ||\n    event.reason.message.includes('find is not a function')\n  )) {\n    console.error('Global unhandled promise rejection caught array method error:', event.reason);\n    event.preventDefault();\n  }\n});\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n","size_bytes":2286},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/CustomerSearch.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Search, \n  User, \n  Phone, \n  Mail, \n  MapPin, \n  Calendar,\n  Star,\n  Edit,\n  Trash2,\n  Plus,\n  RefreshCw\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { getCustomers, updateCustomer, saveCustomer } from '@/lib/storage';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Customer } from '@/lib/types';\n\ninterface CustomerSearchProps {\n  onCustomerSelect?: (customer: Customer) => void;\n}\n\nexport default function CustomerSearch({ onCustomerSelect }: CustomerSearchProps) {\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n  const { company } = useAuth();\n\n  // Load customers\n  const loadCustomers = async () => {\n    if (!company?.id) return;\n    \n    setLoading(true);\n    try {\n      const customersData = await getCustomers(company.id);\n      setCustomers(customersData);\n      setFilteredCustomers(customersData);\n    } catch (error) {\n      console.error('Error loading customers:', error);\n      toast.error('Failed to load customers');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadCustomers();\n  }, [company?.id]);\n\n  // Filter customers based on search query\n  useEffect(() => {\n    if (!searchQuery.trim()) {\n      setFilteredCustomers(customers);\n      return;\n    }\n\n    const query = searchQuery.toLowerCase();\n    const filtered = customers.filter(customer => \n      customer.name?.toLowerCase().includes(query) ||\n      customer.phone?.includes(query) ||\n      customer.email?.toLowerCase().includes(query) ||\n      customer.gst?.toLowerCase().includes(query)\n    );\n    setFilteredCustomers(filtered);\n  }, [customers, searchQuery]);\n\n  // Handle customer selection\n  const handleCustomerSelect = (customer: Customer) => {\n    setSelectedCustomer(customer);\n    if (onCustomerSelect) {\n      onCustomerSelect(customer);\n    }\n    toast.success(`Selected customer: ${customer.name}`);\n  };\n\n  // Handle customer deletion\n  const handleCustomerDelete = async (customerId: string) => {\n    if (!confirm('Are you sure you want to delete this customer?')) return;\n\n    try {\n      // Soft delete by setting isActive to false\n      const customer = customers.find(c => c.id === customerId);\n      if (customer) {\n        await updateCustomer(customerId, { ...customer, isActive: false });\n        toast.success('Customer deleted successfully');\n        loadCustomers(); // Reload customers\n      }\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      toast.error('Failed to delete customer');\n    }\n  };\n\n  // Handle customer edit\n  const handleCustomerEdit = async (customer: Customer) => {\n    // For now, just show a toast - you can implement a proper edit dialog later\n    toast.info(`Edit functionality for ${customer.name} - Coming soon!`);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Customer Database\n          </CardTitle>\n          <CardDescription>\n            Search and manage your customer information\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder=\"Search by name, phone, email, or GST...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Refresh Button */}\n          <div className=\"flex justify-between items-center\">\n            <Badge variant=\"secondary\">\n              {filteredCustomers.length} customers found\n            </Badge>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={loadCustomers}\n              disabled={loading}\n            >\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n          </div>\n\n          {/* Customer List */}\n          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n            {loading ? (\n              <div className=\"text-center py-8\">\n                <RefreshCw className=\"h-8 w-8 mx-auto animate-spin text-gray-400\" />\n                <p className=\"text-gray-500 mt-2\">Loading customers...</p>\n              </div>\n            ) : filteredCustomers.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <User className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No customers found</p>\n                {searchQuery && (\n                  <p className=\"text-sm\">Try adjusting your search terms</p>\n                )}\n              </div>\n            ) : (\n              filteredCustomers.map((customer) => (\n                <Card\n                  key={customer.id}\n                  className={`cursor-pointer transition-all hover:shadow-md ${\n                    selectedCustomer?.id === customer.id ? 'ring-2 ring-blue-500' : ''\n                  }`}\n                  onClick={() => handleCustomerSelect(customer)}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className=\"font-semibold text-gray-900\">{customer.name}</h4>\n                          {!customer.isActive && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">Inactive</Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-2\">\n                            <Phone className=\"h-3 w-3\" />\n                            <span>{customer.phone}</span>\n                          </div>\n                          \n                          {customer.email && (\n                            <div className=\"flex items-center gap-2\">\n                              <Mail className=\"h-3 w-3\" />\n                              <span>{customer.email}</span>\n                            </div>\n                          )}\n                          \n                          {customer.gst && (\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium\">GST:</span>\n                              <span>{customer.gst}</span>\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center gap-4 text-xs\">\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              <span>Visits: {customer.visitCount || 0}</span>\n                            </div>\n                            \n                            {customer.loyaltyPoints > 0 && (\n                              <div className=\"flex items-center gap-1\">\n                                <Star className=\"h-3 w-3 text-yellow-500\" />\n                                <span>Points: {customer.loyaltyPoints}</span>\n                              </div>\n                            )}\n                            \n                            {customer.totalSpent > 0 && (\n                              <div className=\"font-medium text-green-600\">\n                                ₹{customer.totalSpent.toFixed(2)} spent\n                              </div>\n                            )}\n                          </div>\n                          \n                          {customer.lastVisit && (\n                            <div className=\"text-xs text-gray-500\">\n                              Last visit: {new Date(customer.lastVisit).toLocaleDateString()}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-1 ml-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleCustomerEdit(customer);\n                          }}\n                          className=\"h-8 w-8 p-0 hover:bg-blue-50 hover:text-blue-600\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleCustomerDelete(customer.id);\n                          }}\n                          className=\"h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n\n          {/* Quick Stats */}\n          {customers.length > 0 && (\n            <div className=\"grid grid-cols-2 gap-4 pt-4 border-t\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {customers.filter(c => c.isActive).length}\n                </div>\n                <div className=\"text-xs text-gray-500\">Active Customers</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {customers.reduce((sum, c) => sum + (c.totalSpent || 0), 0).toFixed(0)}\n                </div>\n                <div className=\"text-xs text-gray-500\">Total Revenue</div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10828},"client/src/components/ErrorBoundary.tsx":{"content":"import React, { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  };\n\n  public static getDerivedStateFromError(error: Error): State {\n    // Update state so the next render will show the fallback UI\n    return { hasError: true, error };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    // Log the error to console for debugging\n    if (error.message.includes('filter is not a function') ||\n        error.message.includes('reduce is not a function') ||\n        error.message.includes('map is not a function') ||\n        error.message.includes('find is not a function')) {\n      console.error('Array method error detected. This usually means an array was expected but received:', error);\n      console.error('Error stack:', error.stack);\n      console.error('Component stack:', errorInfo.componentStack);\n    }\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.fallback || (\n        <div className=\"p-4 bg-red-50 border border-red-200 rounded-md\">\n          <h2 className=\"text-lg font-semibold text-red-800\">Something went wrong</h2>\n          <p className=\"text-red-600 mt-2\">\n            {this.state.error?.message || 'An unexpected error occurred'}\n          </p>\n          <button\n            className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700\"\n            onClick={() => this.setState({ hasError: false, error: undefined })}\n          >\n            Try again\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n","size_bytes":1887},"client/src/components/OfflineBadge.tsx":{"content":"import React from 'react';\nimport { useNetworkStatus } from '@/hooks/useNetworkStatus';\n\nexport const OfflineBadge: React.FC = () => {\n  const { isOnline, lastChange } = useNetworkStatus();\n\n  if (isOnline) return null;\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        bottom: 12,\n        right: 12,\n        background: '#FDE68A',\n        color: '#92400E',\n        border: '1px solid #F59E0B',\n        borderRadius: 8,\n        padding: '8px 12px',\n        fontSize: 12,\n        boxShadow: '0 2px 6px rgba(0,0,0,0.1)',\n        zIndex: 9999,\n      }}\n      title={`Last change: ${lastChange.toLocaleString()}`}\n    >\n      Offline mode: changes are saved locally and will sync when back online\n    </div>\n  );\n};\n\nexport default OfflineBadge;\n\n\n","size_bytes":765},"client/src/components/PaymentDialog.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  X, \n  Save, \n  Printer, \n  Calculator,\n  ArrowLeft,\n  CreditCard,\n  DollarSign,\n  Smartphone\n} from 'lucide-react';\n\ninterface PaymentDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onPaymentComplete: (paymentData: PaymentData) => void;\n  billAmount: number;\n  customerName: string;\n}\n\nexport interface PaymentPart {\n  method: 'cash' | 'card' | 'wallet';\n  amount: number;            // numeric input for this part\n  txnId?: string;            // non-cash\n  lastDigits?: string;       // card only\n}\n\nexport interface PaymentData {\n  parts: PaymentPart[];\n}\n\nexport default function PaymentDialog({ \n  isOpen, \n  onClose, \n  onPaymentComplete, \n  billAmount, \n  customerName \n}: PaymentDialogProps) {\n  const [activeTab, setActiveTab] = useState('payment1');\n  const [parts, setParts] = useState<PaymentPart[]>([\n    { method: 'cash', amount: 0 },\n    { method: 'card', amount: 0 }\n  ]);\n  // txnId/lastDigits are stored directly on parts[index]\n\n  // Reset form when dialog opens\n  useEffect(() => {\n    if (isOpen) {\n      setParts([{ method: 'cash', amount: 0 }, { method: 'card', amount: 0 }]);\n      setActiveTab('payment1');\n    }\n  }, [isOpen]);\n\n  const totalPaid = parts.reduce((s, p) => s + (isNaN(p.amount) ? 0 : p.amount), 0);\n  const remaining = Math.max(0, billAmount - totalPaid);\n\n  const updatePart = (index: number, updated: PaymentPart) => {\n    setParts(prev => {\n      const copy = [...prev];\n      copy[index] = updated;\n      return copy;\n    });\n  };\n\n  // Handle numeric keypad input for current tab\n  const handleKeypadInput = (value: string) => {\n    const idx = activeTab === 'payment1' ? 0 : 1;\n    const current = parts[idx] || { method: 'cash', amount: 0 };\n    let str = (current.amount ?? 0).toString();\n    if (str === '0') str = '';\n\n    if (value === 'CLR') {\n      updatePart(idx, { ...current, amount: 0 });\n      return;\n    }\n    if (value === 'BACKSPACE') {\n      const next = str.slice(0, -1);\n      updatePart(idx, { ...current, amount: parseFloat(next || '0') });\n      return;\n    }\n    if (value === '.') {\n      if (!str.includes('.')) {\n        const next = (str || '') + '.';\n        updatePart(idx, { ...current, amount: parseFloat(next || '0') });\n      }\n      return;\n    }\n    if (['2000', '500', '200', '100'].includes(value)) {\n      updatePart(idx, { ...current, amount: parseFloat(value) });\n      return;\n    }\n    const next = (str || '') + value;\n    updatePart(idx, { ...current, amount: parseFloat(next) });\n  };\n\n  // Handle payment completion\n  const handlePaymentComplete = (print: boolean = false) => {\n    const paymentData: PaymentData = { parts };\n    onPaymentComplete(paymentData);\n    \n    if (print) {\n      setTimeout(() => {\n        window.print();\n      }, 100);\n    }\n  };\n\n  const isValidPayment = () => totalPaid >= billAmount - 0.01;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-gray-800\">Payment</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex h-[600px]\">\n          {/* Left Panel - Payment Details */}\n          <div className=\"flex-1 p-6 border-r border-gray-200\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"payment1\" className=\"text-sm font-medium\">Payment A</TabsTrigger>\n                <TabsTrigger value=\"payment2\" className=\"text-sm font-medium\">Payment B</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"payment1\" className=\"space-y-6\">\n                {/* Payment Method Selection */}\n                <div className=\"space-y-4\">\n                  <Label className=\"text-sm font-medium text-gray-700\">Mode</Label>\n                  <Select value={parts[0]?.method || 'cash'} onValueChange={(value: 'cash' | 'card' | 'wallet') => updatePart(0, { ...parts[0], method: value })}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\" className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"h-4 w-4\" />\n                        <span>Cash</span>\n                      </SelectItem>\n                      <SelectItem value=\"card\" className=\"flex items-center space-x-2\">\n                        <CreditCard className=\"h-4 w-4\" />\n                        <span>Card Payment</span>\n                      </SelectItem>\n                      <SelectItem value=\"wallet\" className=\"flex items-center space-x-2\">\n                        <Smartphone className=\"h-4 w-4\" />\n                        <span>Mobile Wallet</span>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  {/* Transaction ID */}\n                  {parts[0]?.method !== 'cash' && (\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Txn. ID</Label>\n                      <Input\n                        value={parts[0]?.txnId || ''}\n                        onChange={(e) => updatePart(0, { ...parts[0], txnId: e.target.value })}\n                        placeholder=\"Enter transaction ID\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  )}\n\n                  {/* Last 5 Digits for Card */}\n                  {parts[0]?.method === 'card' && (\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Last 5 Digits</Label>\n                      <Input\n                        value={parts[0]?.lastDigits || ''}\n                        onChange={(e) => updatePart(0, { ...parts[0], lastDigits: e.target.value })}\n                        placeholder=\"Enter last 5 digits\"\n                        maxLength={5}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  )}\n\n                  {/* Amount Input (keyboard-enabled) */}\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">\n                      {parts[0]?.method === 'cash' ? 'Tendered' : 'Amount'}\n                    </Label>\n                    <div className=\"relative mt-1\">\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium\">₹</span>\n                      <Input\n                        value={(parts[0]?.amount ?? 0).toString()}\n                        onChange={(e) => {\n                          const v = e.target.value.replace(/[^0-9.]/g, '');\n                          updatePart(0, { ...parts[0], amount: parseFloat(v || '0') });\n                        }}\n                        inputMode=\"decimal\"\n                        placeholder=\"0.00\"\n                        className=\"pl-8 text-lg font-medium\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Transaction Summary */}\n                <div className=\"bg-gray-50 rounded-lg p-4 space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Bill Amount:</span>\n                    <span className=\"font-semibold\">₹{billAmount.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Paid (all parts):</span>\n                    <span className=\"font-semibold text-green-600\">₹{totalPaid.toFixed(2)}</span>\n                  </div>\n                    <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-gray-600\">Remaining:</span>\n                    <span className={`font-semibold ${remaining > 0 ? 'text-orange-600' : 'text-blue-600'}`}>₹{remaining.toFixed(2)}</span>\n                    </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex space-x-3 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={onClose}\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                    <span>Cancel</span>\n                  </Button>\n                  <Button\n                    onClick={() => handlePaymentComplete(false)}\n                    disabled={!isValidPayment()}\n                    className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700\"\n                  >\n                    <Save className=\"h-4 w-4\" />\n                    <span>Save</span>\n                  </Button>\n                  <Button\n                    onClick={() => handlePaymentComplete(true)}\n                    disabled={!isValidPayment()}\n                    className=\"flex items-center space-x-2 bg-green-600 hover:bg-green-700\"\n                  >\n                    <Printer className=\"h-4 w-4\" />\n                    <span>Save n Print</span>\n                  </Button>\n                </div>\n              </TabsContent>\n\n              {/* Split payment second part */}\n              <TabsContent value=\"payment2\" className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <Label className=\"text-sm font-medium text-gray-700\">Mode</Label>\n                  <Select value={parts[1]?.method || 'card'} onValueChange={(value: 'cash' | 'card' | 'wallet') => updatePart(1, { ...parts[1], method: value })}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"card\">Card Payment</SelectItem>\n                      <SelectItem value=\"wallet\">Mobile Wallet</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700\">Amount</Label>\n                    <div className=\"relative mt-1\">\n                      <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium\">₹</span>\n                      <Input\n                        value={(parts[1]?.amount ?? 0).toString()}\n                        onChange={(e) => {\n                          const v = e.target.value.replace(/[^0-9.]/g, '');\n                          updatePart(1, { ...parts[1], amount: parseFloat(v || '0') });\n                        }}\n                        inputMode=\"decimal\"\n                        placeholder=\"0.00\"\n                        className=\"pl-8 text-lg font-medium\"\n                      />\n                    </div>\n                  </div>\n\n                  {/* Transaction ID for non-cash */}\n                  {parts[1]?.method !== 'cash' && (\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Txn. ID</Label>\n                      <Input\n                        value={parts[1]?.txnId || ''}\n                        onChange={(e) => updatePart(1, { ...parts[1], txnId: e.target.value })}\n                        placeholder=\"Enter transaction ID\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  )}\n\n                  {/* Last digits for card */}\n                  {parts[1]?.method === 'card' && (\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700\">Last 5 Digits</Label>\n                      <Input\n                        value={parts[1]?.lastDigits || ''}\n                        onChange={(e) => updatePart(1, { ...parts[1], lastDigits: e.target.value })}\n                        placeholder=\"Enter last 5 digits\"\n                        maxLength={5}\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* Right Panel - Numeric Keypad */}\n          <div className=\"w-80 p-6 bg-gray-50\">\n            <div className=\"grid grid-cols-4 gap-3\">\n              {/* Quick Amount Buttons */}\n              <Button\n                onClick={() => handleKeypadInput('2000')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n              >\n                2000\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('500')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n              >\n                500\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('200')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n              >\n                200\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('100')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium\"\n              >\n                100\n              </Button>\n\n              {/* Numeric Keypad */}\n              {[1, 2, 3, 4, 5, 6, 7, 8, 9].map(num => (\n                <Button\n                  key={num}\n                  onClick={() => handleKeypadInput(num.toString())}\n                  className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium text-lg\"\n                >\n                  {num}\n                </Button>\n              ))}\n\n              {/* Special Buttons */}\n              <Button\n                onClick={() => handleKeypadInput('BACKSPACE')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('0')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium text-lg\"\n              >\n                0\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('.')}\n                className=\"h-12 bg-blue-600 hover:bg-blue-700 text-white font-medium text-lg\"\n              >\n                .\n              </Button>\n              <Button\n                onClick={() => handleKeypadInput('CLR')}\n                className=\"h-12 bg-red-600 hover:bg-red-700 text-white font-medium\"\n              >\n                CLR\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Status Bar */}\n        <div className=\"bg-gray-100 px-6 py-3 flex justify-between items-center border-t border-gray-200\">\n          <div className=\"flex items-center space-x-2\">\n            <Calculator className=\"h-4 w-4 text-gray-600\" />\n            <span className=\"text-sm text-gray-600\">Remaining:</span>\n            <span className={`font-semibold ${remaining > 0 ? 'text-orange-700' : 'text-green-700'}`}>₹{remaining.toFixed(2)}</span>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15834},"client/src/components/PrintableBill.tsx":{"content":"import React from 'react';\nimport { Transaction } from '@/lib/types';\nimport { getCompanySettings, getPrintSettings } from '@/lib/storage';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Printer, Eye, Download } from 'lucide-react';\n\ninterface PrintableBillProps {\n  transaction: Transaction;\n  onPrint?: () => void;\n  showPreview?: boolean;\n}\n\nexport const PrintableBill: React.FC<PrintableBillProps> = ({\n  transaction,\n  onPrint,\n  showPreview = true\n}) => {\n  const companySettings = getCompanySettings();\n  const printSettings = getPrintSettings();\n\n  const handlePrint = () => {\n    if (onPrint) {\n      onPrint();\n    } else {\n      // Default print behavior\n      const printWindow = window.open('', '_blank');\n      if (!printWindow) return;\n\n      const receiptHTML = generateReceiptHTML();\n      printWindow.document.write(receiptHTML);\n      printWindow.document.close();\n      printWindow.focus();\n    }\n  };\n\n  const generateReceiptHTML = () => {\n    return `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Receipt - ${transaction.id}</title>\n          <style>\n            * { \n              margin: 0; \n              padding: 0; \n              box-sizing: border-box; \n              color: #000 !important;\n            }\n            body {\n              font-family: 'Courier New', monospace;\n              width: 80mm;\n              margin: 0;\n              padding: 5mm;\n              font-size: 11px;\n              line-height: 1.2;\n              background: white;\n              color: #000;\n              font-weight: 500;\n            }\n            .center { text-align: center; }\n            .bold { font-weight: bold; }\n            .large { font-size: 14px; font-weight: bold; }\n            .medium { font-size: 12px; }\n            .small { font-size: 10px; }\n            .line { \n              border-bottom: 1px solid #000; \n              margin: 3px 0; \n              height: 1px;\n              background: #000;\n            }\n            .row { \n              display: flex; \n              justify-content: space-between; \n              margin: 2px 0; \n              align-items: center;\n            }\n            .item-row {\n              margin: 3px 0;\n              border-bottom: 1px dotted #333;\n              padding-bottom: 2px;\n            }\n            .item-name {\n              font-weight: bold;\n              margin-bottom: 1px;\n            }\n            .item-details {\n              font-size: 9px;\n              color: #333;\n              margin-left: 2px;\n            }\n            .total-section {\n              border-top: 2px solid #000;\n              margin-top: 5px;\n              padding-top: 5px;\n            }\n            .payment-info {\n              background: #f0f0f0;\n              padding: 3px;\n              margin: 5px 0;\n              border: 1px solid #000;\n            }\n            .footer-text {\n              text-align: center;\n              margin-top: 8px;\n              font-size: 9px;\n              color: #333;\n              border-top: 1px solid #000;\n              padding-top: 5px;\n            }\n            @media print {\n              body { \n                margin: 0 !important; \n                padding: 2mm !important; \n                width: 80mm !important;\n                font-size: 11px !important;\n                color: #000 !important;\n                background: white !important;\n              }\n              @page { \n                margin: 0 !important; \n                size: 80mm auto !important;\n              }\n              * {\n                color: #000 !important;\n                background: transparent !important;\n              }\n              .payment-info {\n                background: #f0f0f0 !important;\n                border: 1px solid #000 !important;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"center\">\n            <div class=\"large\">${companySettings.name}</div>\n            <div class=\"small\">${companySettings.address}</div>\n            <div class=\"small\">Phone: ${companySettings.phone}</div>\n            ${companySettings.email ? `<div class=\"small\">Email: ${companySettings.email}</div>` : ''}\n            ${companySettings.taxId ? `<div class=\"small\">GST: ${companySettings.taxId}</div>` : ''}\n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"medium\">\n            <div class=\"row\">\n              <span>Receipt #:</span>\n              <span>${transaction.id.slice(-8)}</span>\n            </div>\n            <div class=\"row\">\n              <span>Date:</span>\n              <span>${new Date(transaction.timestamp).toLocaleDateString()}</span>\n            </div>\n            <div class=\"row\">\n              <span>Time:</span>\n              <span>${new Date(transaction.timestamp).toLocaleTimeString()}</span>\n            </div>\n            ${transaction.customerName ? `\n              <div class=\"row\">\n                <span>Customer:</span>\n                <span>${transaction.customerName}</span>\n              </div>\n            ` : ''}\n          </div>\n          \n          <div class=\"line\"></div>\n          \n          ${transaction.items.map(item => `\n            <div class=\"item-row\">\n              <div class=\"item-name\">${item.product.name}</div>\n              <div class=\"row\">\n                <span class=\"item-details\">${item.quantity} x ₹${item.product.price.toFixed(2)}</span>\n                <span class=\"bold\">₹${(item.product.price * item.quantity).toFixed(2)}</span>\n              </div>\n            </div>\n          `).join('')}\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"total-section\">\n            <div class=\"row\">\n              <span class=\"bold\">SUBTOTAL:</span>\n              <span class=\"bold\">₹${transaction.subtotal.toFixed(2)}</span>\n            </div>\n            ${transaction.tax > 0 ? `\n              <div class=\"row\">\n                <span>GST (18%):</span>\n                <span>₹${transaction.tax.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            ${transaction.discount > 0 ? `\n              <div class=\"row\">\n                <span>Discount:</span>\n                <span>-₹${transaction.discount.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            <div class=\"row large\">\n              <span>TOTAL:</span>\n              <span>₹${transaction.total.toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div class=\"payment-info\">\n            <div class=\"row\">\n              <span class=\"bold\">Payment Method:</span>\n              <span class=\"bold\">${transaction.paymentMethod.toUpperCase()}</span>\n            </div>\n            ${transaction.paymentMethod === 'cash' && transaction.paymentDetails?.cashAmount ? `\n              <div class=\"row\">\n                <span>Cash Received:</span>\n                <span>₹${transaction.paymentDetails.cashAmount.toFixed(2)}</span>\n              </div>\n              ${transaction.paymentDetails.change ? `\n                <div class=\"row\">\n                  <span>Change:</span>\n                  <span>₹${transaction.paymentDetails.change.toFixed(2)}</span>\n                </div>\n              ` : ''}\n            ` : ''}\n            ${transaction.paymentMethod === 'card' && transaction.receipt ? `\n              <div class=\"row\">\n                <span>Transaction ID:</span>\n                <span>${transaction.receipt}</span>\n              </div>\n            ` : ''}\n          </div>\n          \n          <div class=\"footer-text\">\n            <div>Thank you for your business!</div>\n            <div>${printSettings.footer || 'Please visit again'}</div>\n            <div style=\"margin-top: 5px;\">Generated by Sales Channel PoS</div>\n          </div>\n          \n          <script>\n            window.onload = function() {\n              window.print();\n              setTimeout(() => window.close(), 1000);\n            }\n          </script>\n        </body>\n      </html>\n    `;\n  };\n\n  const handlePreview = () => {\n    const previewWindow = window.open('', '_blank');\n    if (!previewWindow) return;\n\n    const receiptHTML = generateReceiptHTML();\n    previewWindow.document.write(receiptHTML);\n    previewWindow.document.close();\n  };\n\n  const handleDownload = () => {\n    const receiptHTML = generateReceiptHTML();\n    const blob = new Blob([receiptHTML], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `receipt-${transaction.id}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  if (!showPreview) {\n    return (\n      <div className=\"flex gap-2\">\n        <Button onClick={handlePrint} size=\"sm\">\n          <Printer className=\"h-4 w-4 mr-2\" />\n          Print\n        </Button>\n        <Button onClick={handlePreview} variant=\"outline\" size=\"sm\">\n          <Eye className=\"h-4 w-4 mr-2\" />\n          Preview\n        </Button>\n        <Button onClick={handleDownload} variant=\"outline\" size=\"sm\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Download\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Printable Bill</span>\n          <div className=\"flex gap-2\">\n            <Button onClick={handlePrint} size=\"sm\">\n              <Printer className=\"h-4 w-4 mr-2\" />\n              Print\n            </Button>\n            <Button onClick={handlePreview} variant=\"outline\" size=\"sm\">\n              <Eye className=\"h-4 w-4 mr-2\" />\n              Preview\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"bg-white border border-gray-300 p-4 rounded text-xs font-mono\" style={{ width: '80mm', minHeight: '200px' }}>\n          <div className=\"text-center\">\n            <div className=\"font-bold text-sm\">{companySettings.name}</div>\n            <div className=\"text-xs\">{companySettings.address}</div>\n            <div className=\"text-xs\">Phone: {companySettings.phone}</div>\n            {companySettings.email && <div className=\"text-xs\">Email: {companySettings.email}</div>}\n            {companySettings.taxId && <div className=\"text-xs\">GST: {companySettings.taxId}</div>}\n          </div>\n          \n          <div className=\"border-b border-black my-2\"></div>\n          \n          <div className=\"text-xs\">\n            <div className=\"flex justify-between\">\n              <span>Receipt #:</span>\n              <span>{transaction.id.slice(-8)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Date:</span>\n              <span>{new Date(transaction.timestamp).toLocaleDateString()}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Time:</span>\n              <span>{new Date(transaction.timestamp).toLocaleTimeString()}</span>\n            </div>\n            {transaction.customerName && (\n              <div className=\"flex justify-between\">\n                <span>Customer:</span>\n                <span>{transaction.customerName}</span>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"border-b border-black my-2\"></div>\n          \n          {transaction.items.map((item, index) => (\n            <div key={index} className=\"mb-2\">\n              <div className=\"font-bold\">{item.product.name}</div>\n              <div className=\"flex justify-between text-xs\">\n                <span>{item.quantity} x ₹{item.product.price.toFixed(2)}</span>\n                <span className=\"font-bold\">₹{(item.product.price * item.quantity).toFixed(2)}</span>\n              </div>\n            </div>\n          ))}\n          \n          <div className=\"border-b border-black my-2\"></div>\n          \n          <div className=\"border-t-2 border-black pt-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-bold\">SUBTOTAL:</span>\n              <span className=\"font-bold\">₹{transaction.subtotal.toFixed(2)}</span>\n            </div>\n            {transaction.tax > 0 && (\n              <div className=\"flex justify-between\">\n                <span>GST (18%):</span>\n                <span>₹{transaction.tax.toFixed(2)}</span>\n              </div>\n            )}\n            {transaction.discount > 0 && (\n              <div className=\"flex justify-between\">\n                <span>Discount:</span>\n                <span>-₹{transaction.discount.toFixed(2)}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between font-bold text-sm\">\n              <span>TOTAL:</span>\n              <span>₹{transaction.total.toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div className=\"bg-gray-100 p-2 mt-2 border border-black\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-bold\">Payment Method:</span>\n              <span className=\"font-bold\">{transaction.paymentMethod.toUpperCase()}</span>\n            </div>\n            {transaction.paymentMethod === 'cash' && transaction.paymentDetails?.cashAmount && (\n              <>\n                <div className=\"flex justify-between\">\n                  <span>Cash Received:</span>\n                  <span>₹{transaction.paymentDetails.cashAmount.toFixed(2)}</span>\n                </div>\n                {transaction.paymentDetails.change && (\n                  <div className=\"flex justify-between\">\n                    <span>Change:</span>\n                    <span>₹{transaction.paymentDetails.change.toFixed(2)}</span>\n                  </div>\n                )}\n              </>\n            )}\n            {transaction.paymentMethod === 'card' && transaction.receipt && (\n              <div className=\"flex justify-between\">\n                <span>Transaction ID:</span>\n                <span>{transaction.receipt}</span>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"text-center mt-4 text-xs border-t border-black pt-2\">\n            <div>Thank you for your business!</div>\n            <div>{printSettings.footer || 'Please visit again'}</div>\n            <div className=\"mt-1\">Generated by Sales Channel PoS</div>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 text-xs text-gray-600\">\n          <p><strong>Features of this printable bill:</strong></p>\n          <ul className=\"list-disc list-inside mt-1 space-y-1\">\n            <li>Optimized for 80mm thermal paper (standard PoS receipt width)</li>\n            <li>Dark, bold text for better readability</li>\n            <li>Compact layout to minimize paper usage</li>\n            <li>Professional formatting with clear sections</li>\n            <li>Includes all transaction details and payment information</li>\n            <li>Print-ready with proper margins and spacing</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":15205},"client/src/components/PrinterSetup.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Printer, \n  Settings, \n  TestTube, \n  CheckCircle, \n  XCircle, \n  USB, \n  Wifi, \n  Cable,\n  Save,\n  RefreshCw\n} from 'lucide-react';\nimport { toast } from 'sonner';\nimport { thermalPrinter } from '@/lib/thermalPrinter';\n\ninterface PrinterConfig {\n  name: string;\n  type: 'usb' | 'network' | 'bluetooth' | 'serial';\n  connection: string;\n  paperWidth: 80 | 58;\n  autoCut: boolean;\n  testMode: boolean;\n}\n\nexport default function PrinterSetup() {\n  const [config, setConfig] = useState<PrinterConfig>({\n    name: 'Thermal Printer',\n    type: 'usb',\n    connection: '',\n    paperWidth: 80,\n    autoCut: true,\n    testMode: false\n  });\n\n  const [isTesting, setIsTesting] = useState(false);\n  const [testResult, setTestResult] = useState<'success' | 'error' | null>(null);\n\n  const handleTestPrint = async () => {\n    setIsTesting(true);\n    setTestResult(null);\n\n    try {\n      // Create test receipt data\n      const testReceiptData = {\n        companyName: 'ACE Business',\n        companyAddress: '123 Main Street, City, State 12345',\n        companyPhone: '+91 98765 43210',\n        companyTaxId: 'GST123456789',\n        receiptNumber: 'TEST-001',\n        date: new Date().toLocaleString(),\n        cashierName: 'Test Cashier',\n        customerName: 'Test Customer',\n        items: [\n          { name: 'Test Item 1', quantity: 2, price: 100, total: 200 },\n          { name: 'Test Item 2', quantity: 1, price: 150, total: 150 }\n        ],\n        subtotal: 350,\n        tax: 63,\n        total: 413,\n        paymentMethod: 'cash',\n        paymentDetails: { cashAmount: 500, change: 87 }\n      };\n\n      const success = await thermalPrinter.printReceipt(testReceiptData);\n      \n      if (success) {\n        setTestResult('success');\n        toast.success('Test print successful! Printer is working correctly.');\n      } else {\n        setTestResult('error');\n        toast.error('Test print failed. Check printer connection and settings.');\n      }\n    } catch (error) {\n      setTestResult('error');\n      toast.error('Test print error: ' + (error as Error).message);\n    } finally {\n      setIsTesting(false);\n    }\n  };\n\n  const handleSaveConfig = () => {\n    // Save configuration to localStorage\n    localStorage.setItem('printerConfig', JSON.stringify(config));\n    toast.success('Printer configuration saved successfully!');\n  };\n\n  const handleLoadConfig = () => {\n    const saved = localStorage.getItem('printerConfig');\n    if (saved) {\n      try {\n        const savedConfig = JSON.parse(saved);\n        setConfig(savedConfig);\n        toast.success('Printer configuration loaded!');\n      } catch (error) {\n        toast.error('Failed to load saved configuration');\n      }\n    } else {\n      toast.info('No saved configuration found');\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Thermal Printer Setup</h1>\n        <p className=\"text-gray-600\">Configure your thermal printer for optimal receipt printing</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Printer Configuration */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Printer Configuration\n            </CardTitle>\n            <CardDescription>\n              Set up your thermal printer connection and settings\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"printer-name\">Printer Name</Label>\n              <Input\n                id=\"printer-name\"\n                value={config.name}\n                onChange={(e) => setConfig({ ...config, name: e.target.value })}\n                placeholder=\"Enter printer name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"printer-type\">Connection Type</Label>\n              <Select value={config.type} onValueChange={(value: 'usb' | 'network' | 'bluetooth' | 'serial') => setConfig({ ...config, type: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"usb\">\n                    <div className=\"flex items-center gap-2\">\n                      <USB className=\"h-4 w-4\" />\n                      USB Connection\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"network\">\n                    <div className=\"flex items-center gap-2\">\n                      <Wifi className=\"h-4 w-4\" />\n                      Network/WiFi\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"bluetooth\">\n                    <div className=\"flex items-center gap-2\">\n                      <Wifi className=\"h-4 w-4\" />\n                      Bluetooth\n                    </div>\n                  </SelectItem>\n                  <SelectItem value=\"serial\">\n                    <div className=\"flex items-center gap-2\">\n                      <Cable className=\"h-4 w-4\" />\n                      Serial Port\n                    </div>\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"connection\">Connection Details</Label>\n              <Input\n                id=\"connection\"\n                value={config.connection}\n                onChange={(e) => setConfig({ ...config, connection: e.target.value })}\n                placeholder={\n                  config.type === 'usb' ? 'USB Port (e.g., COM3, /dev/ttyUSB0)' :\n                  config.type === 'network' ? 'IP Address (e.g., 192.168.1.100)' :\n                  config.type === 'bluetooth' ? 'Bluetooth Address (e.g., 00:11:22:33:44:55)' :\n                  'Serial Port (e.g., COM1, /dev/ttyS0)'\n                }\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"paper-width\">Paper Width</Label>\n              <Select value={config.paperWidth.toString()} onValueChange={(value) => setConfig({ ...config, paperWidth: parseInt(value) as 80 | 58 })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"80\">80mm (Standard)</SelectItem>\n                  <SelectItem value=\"58\">58mm (Compact)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"auto-cut\">Auto Cut Paper</Label>\n                <p className=\"text-sm text-gray-500\">Automatically cut paper after printing</p>\n              </div>\n              <Switch\n                id=\"auto-cut\"\n                checked={config.autoCut}\n                onCheckedChange={(checked) => setConfig({ ...config, autoCut: checked })}\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"test-mode\">Test Mode</Label>\n                <p className=\"text-sm text-gray-500\">Enable detailed logging for troubleshooting</p>\n              </div>\n              <Switch\n                id=\"test-mode\"\n                checked={config.testMode}\n                onCheckedChange={(checked) => setConfig({ ...config, testMode: checked })}\n              />\n            </div>\n\n            <div className=\"flex gap-2 pt-4\">\n              <Button onClick={handleSaveConfig} className=\"flex-1\">\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save Configuration\n              </Button>\n              <Button onClick={handleLoadConfig} variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Test Printer */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TestTube className=\"h-5 w-5\" />\n              Test Printer\n            </CardTitle>\n            <CardDescription>\n              Test your printer connection and print a sample receipt\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\n              <h4 className=\"font-semibold mb-2\">Current Configuration:</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div><span className=\"font-medium\">Name:</span> {config.name}</div>\n                <div><span className=\"font-medium\">Type:</span> \n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {config.type.toUpperCase()}\n                  </Badge>\n                </div>\n                <div><span className=\"font-medium\">Connection:</span> {config.connection || 'Not specified'}</div>\n                <div><span className=\"font-medium\">Paper Width:</span> {config.paperWidth}mm</div>\n                <div><span className=\"font-medium\">Auto Cut:</span> \n                  <Badge variant={config.autoCut ? \"default\" : \"secondary\"} className=\"ml-2\">\n                    {config.autoCut ? 'Enabled' : 'Disabled'}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleTestPrint} \n                disabled={isTesting}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isTesting ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Testing Printer...\n                  </>\n                ) : (\n                  <>\n                    <Printer className=\"h-4 w-4 mr-2\" />\n                    Print Test Receipt\n                  </>\n                )}\n              </Button>\n\n              {testResult && (\n                <div className={`p-3 rounded-lg flex items-center gap-2 ${\n                  testResult === 'success' \n                    ? 'bg-green-50 text-green-700 border border-green-200' \n                    : 'bg-red-50 text-red-700 border border-red-200'\n                }`}>\n                  {testResult === 'success' ? (\n                    <CheckCircle className=\"h-4 w-4\" />\n                  ) : (\n                    <XCircle className=\"h-4 w-4\" />\n                  )}\n                  <span className=\"text-sm font-medium\">\n                    {testResult === 'success' \n                      ? 'Test print successful! Printer is working correctly.' \n                      : 'Test print failed. Check printer connection and settings.'\n                    }\n                  </span>\n                </div>\n              )}\n            </div>\n\n            <Separator />\n\n            <div className=\"space-y-2\">\n              <h4 className=\"font-semibold\">Troubleshooting Tips:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Ensure printer is powered on and connected</li>\n                <li>• Check USB cable or network connection</li>\n                <li>• Verify printer drivers are installed</li>\n                <li>• Make sure paper is loaded correctly</li>\n                <li>• Try different connection types if available</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Supported Printers */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Supported Thermal Printers</CardTitle>\n          <CardDescription>\n            Common thermal printer models that work with this system\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[\n              { brand: 'Epson', models: ['TM-T20', 'TM-T70', 'TM-T88VI', 'TM-T82'] },\n              { brand: 'Star', models: ['TSP100', 'TSP143III', 'TSP700II'] },\n              { brand: 'Citizen', models: ['CT-S310II', 'CT-S310III', 'CT-S310'] },\n              { brand: 'Bixolon', models: ['SRP-350III', 'SRP-350II', 'SRP-350'] },\n              { brand: 'POS-X', models: ['EVO HiSpeed', 'EVO HiSpeed Plus'] },\n              { brand: 'Honeywell', models: ['PC42t', 'PC43t', 'PC60t'] }\n            ].map((printer) => (\n              <div key={printer.brand} className=\"p-3 border rounded-lg\">\n                <h4 className=\"font-semibold text-blue-600\">{printer.brand}</h4>\n                <ul className=\"text-sm text-gray-600 mt-1\">\n                  {printer.models.map((model) => (\n                    <li key={model}>• {model}</li>\n                  ))}\n                </ul>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13705},"client/src/components/ProtectedRoute.tsx":{"content":"import React from 'react';\nimport { Redirect, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  allowedRoles?: string[];\n  requireAuth?: boolean;\n}\n\nexport const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  allowedRoles = [], \n  requireAuth = true \n}) => {\n  const { company, employee, adminAuth, loading } = useAuth();\n  const [location] = useLocation();\n\n  // Security: Show loading spinner while checking authentication\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Security: If authentication is not required, render children\n  if (!requireAuth) {\n    return <>{children}</>;\n  }\n\n  // Security: Check if user is authenticated\n  // For company users, they need both company AND employee to be authenticated\n  // For admin users, they just need adminAuth to be authenticated\n  const isAuthenticated = (company && employee) || adminAuth.isAuthenticated;\n\n  if (!isAuthenticated) {\n    // Security: Redirect to appropriate login page\n    const isAdminRoute = location.startsWith('/admin');\n    const redirectPath = isAdminRoute ? '/login' : '/login';\n    \n    console.warn('Unauthorized access attempt:', {\n      path: location,\n      company: !!company,\n      employee: !!employee,\n      adminAuth: adminAuth.isAuthenticated\n    });\n    \n    return <Redirect to={redirectPath} />;\n  }\n\n  // Security: Role-based access control\n  if (allowedRoles.length > 0) {\n    let userRole: string | null = null;\n\n    if (adminAuth.isAuthenticated && adminAuth.adminUser) {\n      userRole = adminAuth.adminUser.role;\n    } else if (employee) {\n      userRole = employee.position?.toLowerCase() || 'cashier';\n    } else if (company) {\n      userRole = 'company';\n    }\n\n    if (!userRole || !allowedRoles.includes(userRole)) {\n      console.warn('Insufficient permissions:', {\n        path: location,\n        userRole,\n        allowedRoles,\n        company: !!company,\n        employee: !!employee,\n        adminAuth: adminAuth.isAuthenticated\n      });\n      \n      return <Redirect to=\"/unauthorized\" />;\n    }\n  }\n\n  // Security: Log successful access\n  console.log('Authorized access granted:', {\n    path: location,\n    company: company?.name,\n    employee: employee?.name,\n    adminUser: adminAuth.adminUser?.username\n  });\n\n  return <>{children}</>;\n};\n\n// Security: Specific role-based route components\nexport const AdminOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['super_admin', 'admin']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const CompanyOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['company']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const EmployeeOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['admin', 'manager', 'cashier']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const CashierOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['cashier', 'manager', 'admin']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const ManagerOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['manager', 'admin']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport const SoftwareCompanyEmployeeOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <ProtectedRoute allowedRoles={['super_admin', 'admin', 'sales', 'support', 'technical', 'marketing', 'finance', 'hr']}>\n    {children}\n  </ProtectedRoute>\n);\n\nexport default ProtectedRoute; ","size_bytes":3941},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport {\n  AuthState,\n  Company,\n  Employee,\n  LoginCredentials,\n  EmployeeLoginCredentials,\n  AdminUser,\n  AdminLoginCredentials,\n  AdminAuthState\n} from '../lib/types';\n\ninterface AuthContextType extends AuthState {\n  loginCompany: (credentials: LoginCredentials) => Promise<boolean>;\n  loginEmployee: (credentials: EmployeeLoginCredentials) => Promise<boolean>;\n  logout: () => void;\n  logoutEmployee: () => void;\n  refreshAuth: () => void;\n  loginAdmin: (credentials: AdminLoginCredentials) => Promise<'super_admin' | 'admin' | 'sales' | 'support' | 'technical' | 'marketing' | 'finance' | 'hr' | null>;\n  logoutAdmin: () => void;\n  adminAuth: AdminAuthState;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// Security: Input sanitization function\nconst sanitizeInput = (input: string): string => {\n  return input.trim().replace(/[<>]/g, '');\n};\n\n// Security: Password validation\nconst validatePassword = (password: string): boolean => {\n  return password.length >= 6 && /^[a-zA-Z0-9@#$%^&*!]+$/.test(password);\n};\n\n// Security: Email validation\nconst validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Security: Rate limiting for login attempts\nconst loginAttempts = new Map<string, { count: number; lastAttempt: number }>();\nconst MAX_LOGIN_ATTEMPTS = 5;\nconst LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes\n\nconst isRateLimited = (identifier: string): boolean => {\n  const attempts = loginAttempts.get(identifier);\n  if (!attempts) return false;\n  \n  const now = Date.now();\n  if (now - attempts.lastAttempt > LOCKOUT_DURATION) {\n    loginAttempts.delete(identifier);\n    return false;\n  }\n  \n  return attempts.count >= MAX_LOGIN_ATTEMPTS;\n};\n\nconst recordLoginAttempt = (identifier: string, success: boolean): void => {\n  const attempts = loginAttempts.get(identifier) || { count: 0, lastAttempt: 0 };\n  \n  if (success) {\n    loginAttempts.delete(identifier);\n  } else {\n    attempts.count++;\n    attempts.lastAttempt = Date.now();\n    loginAttempts.set(identifier, attempts);\n  }\n};\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    isAuthenticated: false,\n    company: null,\n    employee: null,\n    loading: true\n  });\n\n  const [adminAuth, setAdminAuth] = useState<AdminAuthState>({\n    isAuthenticated: false,\n    adminUser: null,\n    loading: true\n  });\n\n  // Security: Session timeout management\n  const [sessionTimeout, setSessionTimeout] = useState<NodeJS.Timeout | null>(null);\n  const SESSION_TIMEOUT = 8 * 60 * 60 * 1000; // 8 hours\n\n  const resetSessionTimeout = () => {\n    if (sessionTimeout) {\n      clearTimeout(sessionTimeout);\n    }\n    \n    if (authState.isAuthenticated || adminAuth.isAuthenticated) {\n      const timeout = setTimeout(() => {\n        logout();\n        logoutAdmin();\n      }, SESSION_TIMEOUT);\n      setSessionTimeout(timeout);\n    }\n  };\n\n  useEffect(() => {\n    const loadAuthState = () => {\n      try {\n        const savedAuth = localStorage.getItem('auth_state');\n        const savedAdminAuth = localStorage.getItem('admin_auth_state');\n        \n        if (savedAuth) {\n          const parsed = JSON.parse(savedAuth);\n          // Security: Validate saved auth state\n          if (parsed && typeof parsed === 'object' && parsed.company) {\n            setAuthState({\n              ...parsed,\n              loading: false\n            });\n          } else {\n            // Invalid auth state, clear it\n            localStorage.removeItem('auth_state');\n            setAuthState(prev => ({ ...prev, loading: false }));\n          }\n        } else {\n          setAuthState(prev => ({ ...prev, loading: false }));\n        }\n\n        if (savedAdminAuth) {\n          const parsed = JSON.parse(savedAdminAuth);\n          // Security: Validate saved admin auth state\n          if (parsed && typeof parsed === 'object' && parsed.adminUser) {\n            setAdminAuth({\n              ...parsed,\n              loading: false\n            });\n          } else {\n            // Invalid admin auth state, clear it\n            localStorage.removeItem('admin_auth_state');\n            setAdminAuth(prev => ({ ...prev, loading: false }));\n          }\n        } else {\n          setAdminAuth(prev => ({ ...prev, loading: false }));\n        }\n      } catch (error) {\n        console.error('Error loading auth state:', error);\n        // Security: Clear corrupted auth state\n        localStorage.removeItem('auth_state');\n        localStorage.removeItem('admin_auth_state');\n        setAuthState(prev => ({ ...prev, loading: false }));\n        setAdminAuth(prev => ({ ...prev, loading: false }));\n      }\n    };\n\n    loadAuthState();\n  }, []);\n\n  // Security: Reset session timeout when auth state changes\n  useEffect(() => {\n    resetSessionTimeout();\n  }, [authState.isAuthenticated, adminAuth.isAuthenticated]);\n\n  // Security: Activity listener to reset session timeout\n  useEffect(() => {\n    const handleActivity = () => {\n      if (authState.isAuthenticated || adminAuth.isAuthenticated) {\n        resetSessionTimeout();\n      }\n    };\n\n    window.addEventListener('mousemove', handleActivity);\n    window.addEventListener('keypress', handleActivity);\n    window.addEventListener('click', handleActivity);\n    window.addEventListener('scroll', handleActivity);\n\n    return () => {\n      window.removeEventListener('mousemove', handleActivity);\n      window.removeEventListener('keypress', handleActivity);\n      window.removeEventListener('click', handleActivity);\n      window.removeEventListener('scroll', handleActivity);\n    };\n  }, [authState.isAuthenticated, adminAuth.isAuthenticated]);\n\n  const saveAuthState = (state: AuthState) => {\n    try {\n      // Security: Don't save sensitive data\n      const safeState = {\n        ...state,\n        company: state.company ? {\n          ...state.company,\n          // Don't save any sensitive fields\n        } : null,\n        employee: state.employee ? {\n          ...state.employee,\n          // Don't save any sensitive fields\n        } : null\n      };\n      localStorage.setItem('auth_state', JSON.stringify(safeState));\n    } catch (error) {\n      console.error('Error saving auth state:', error);\n    }\n  };\n\n  const saveAdminAuthState = (state: AdminAuthState) => {\n    try {\n      // Security: Don't save sensitive data\n      const safeState = {\n        ...state,\n        adminUser: state.adminUser ? {\n          ...state.adminUser,\n          // Don't save any sensitive fields\n        } : null\n      };\n      localStorage.setItem('admin_auth_state', JSON.stringify(safeState));\n    } catch (error) {\n      console.error('Error saving admin auth state:', error);\n    }\n  };\n\n  const loginCompany = async (credentials: LoginCredentials): Promise<boolean> => {\n    try {\n      // Security: Input validation and sanitization\n      const sanitizedEmail = sanitizeInput(credentials.email);\n      const sanitizedPassword = sanitizeInput(credentials.password);\n\n      if (!validateEmail(sanitizedEmail)) {\n        console.warn('Invalid email format attempted:', sanitizedEmail);\n        return false;\n      }\n\n      if (!validatePassword(sanitizedPassword)) {\n        console.warn('Invalid password format attempted');\n        return false;\n      }\n\n      // Security: Rate limiting\n      if (isRateLimited(`company_${sanitizedEmail}`)) {\n        console.warn('Rate limit exceeded for company login:', sanitizedEmail);\n        return false;\n      }\n\n      setAuthState(prev => ({ ...prev, loading: true }));\n      \n      // Call the API endpoint for authentication\n      const response = await fetch('/api/auth/company/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: sanitizedEmail,\n          password: sanitizedPassword,\n        }),\n      });\n\n      if (!response.ok) {\n        recordLoginAttempt(`company_${sanitizedEmail}`, false);\n        setAuthState(prev => ({ ...prev, loading: false }));\n        return false;\n      }\n\n      const data = await response.json();\n      if (!data.success || !data.company) {\n        recordLoginAttempt(`company_${sanitizedEmail}`, false);\n        setAuthState(prev => ({ ...prev, loading: false }));\n        return false;\n      }\n\n      const company = data.company;\n\n      // Security: Record successful login\n      recordLoginAttempt(`company_${sanitizedEmail}`, true);\n      \n      const newState: AuthState = {\n        isAuthenticated: false, // Not fully authenticated until employee logs in\n        company,\n        employee: null,\n        loading: false\n      };\n      \n      setAuthState(newState);\n      saveAuthState(newState);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      setAuthState(prev => ({ ...prev, loading: false }));\n      return false;\n    }\n  };\n\n  const loginEmployee = async (credentials: EmployeeLoginCredentials): Promise<boolean> => {\n    try {\n      if (!authState.company) {\n        console.warn('Attempted employee login without company context');\n        return false;\n      }\n\n      // Security: Input validation and sanitization\n      const sanitizedEmployeeId = sanitizeInput(credentials.employeeId);\n      const sanitizedPassword = sanitizeInput(credentials.password);\n\n      if (!sanitizedEmployeeId || sanitizedEmployeeId.length < 3) {\n        console.warn('Invalid employee ID format attempted');\n        return false;\n      }\n\n      if (!validatePassword(sanitizedPassword)) {\n        console.warn('Invalid password format attempted');\n        return false;\n      }\n\n      // Security: Rate limiting\n      if (isRateLimited(`employee_${sanitizedEmployeeId}`)) {\n        console.warn('Rate limit exceeded for employee login:', sanitizedEmployeeId);\n        return false;\n      }\n\n      setAuthState(prev => ({ ...prev, loading: true }));\n      \n      // Call the API endpoint for employee authentication\n      const response = await fetch('/api/auth/employee/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          employeeId: sanitizedEmployeeId,\n          password: sanitizedPassword,\n          companyId: authState.company.id,\n        }),\n      });\n\n      if (!response.ok) {\n        recordLoginAttempt(`employee_${sanitizedEmployeeId}`, false);\n        setAuthState(prev => ({ ...prev, loading: false }));\n        return false;\n      }\n\n      const data = await response.json();\n      if (!data.success || !data.employee) {\n        recordLoginAttempt(`employee_${sanitizedEmployeeId}`, false);\n        setAuthState(prev => ({ ...prev, loading: false }));\n        return false;\n      }\n\n      const employee = data.employee;\n\n      // Security: Record successful login\n      recordLoginAttempt(`employee_${sanitizedEmployeeId}`, true);\n      \n      const newState: AuthState = {\n        isAuthenticated: true, // Now fully authenticated\n        company: authState.company,\n        employee,\n        loading: false\n      };\n      \n      setAuthState(newState);\n      saveAuthState(newState);\n      return true;\n    } catch (error) {\n      console.error('Employee login error:', error);\n      setAuthState(prev => ({ ...prev, loading: false }));\n      return false;\n    }\n  };\n  \n  const loginAdmin = async (credentials: AdminLoginCredentials): Promise<'super_admin' | 'admin' | 'sales' | 'support' | 'technical' | 'marketing' | 'finance' | 'hr' | null> => {\n    try {\n      // Security: Input validation and sanitization\n      const sanitizedUsername = sanitizeInput(credentials.username);\n      const sanitizedPassword = sanitizeInput(credentials.password);\n\n      if (!sanitizedUsername || sanitizedUsername.length < 3) {\n        console.warn('Invalid admin username format attempted');\n        return null;\n      }\n\n      if (!validatePassword(sanitizedPassword)) {\n        console.warn('Invalid admin password format attempted');\n        return null;\n      }\n\n      // Security: Rate limiting\n      if (isRateLimited(`admin_${sanitizedUsername}`)) {\n        console.warn('Rate limit exceeded for admin login:', sanitizedUsername);\n        return null;\n      }\n\n      setAdminAuth(prev => ({ ...prev, loading: true }));\n      \n      // Demo admin credentials - In production, this should be in a secure database\n      const demoAdmins = [\n        {\n          id: 'admin001',\n          username: 'superadmin',\n          email: 'superadmin@acebusiness.shop',\n          role: 'super_admin',\n          name: 'Super Administrator',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 'admin002',\n          username: 'admin',\n          email: 'admin@acebusiness.shop',\n          role: 'admin',\n          name: 'Administrator',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 'admin003',\n          username: 'sales',\n          email: 'sales@acebusiness.shop',\n          role: 'sales',\n          name: 'Sales Team',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        {\n          id: 'admin004',\n          username: 'support',\n          email: 'support@acebusiness.shop',\n          role: 'support',\n          name: 'Support Team',\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        }\n      ];\n\n      const admin = demoAdmins.find(a => a.username === sanitizedUsername);\n\n      if (admin && sanitizedPassword === 'admin123') { // In production, use proper password hashing\n        // Security: Record successful login\n        recordLoginAttempt(`admin_${sanitizedUsername}`, true);\n        \n        const newState: AdminAuthState = {\n          isAuthenticated: true,\n          adminUser: admin,\n          loading: false\n        };\n        \n        setAdminAuth(newState);\n        saveAdminAuthState(newState);\n        return admin.role;\n      } else {\n        // Security: Record failed login attempt\n        recordLoginAttempt(`admin_${sanitizedUsername}`, false);\n        setAdminAuth(prev => ({ ...prev, loading: false }));\n        return null;\n      }\n    } catch (error) {\n      console.error('Admin login error:', error);\n      setAdminAuth(prev => ({ ...prev, loading: false }));\n      return null;\n    }\n  };\n\n  const logout = () => {\n    try {\n      // Security: Clear session timeout\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n        setSessionTimeout(null);\n      }\n\n      // Security: Clear all auth data\n      localStorage.removeItem('auth_state');\n      setAuthState({\n        isAuthenticated: false,\n        company: null,\n        employee: null,\n        loading: false\n      });\n\n      // Security: Clear any sensitive data from memory\n      console.log('User logged out successfully');\n    } catch (error) {\n      console.error('Error during logout:', error);\n    }\n  };\n\n  const logoutEmployee = () => {\n    try {\n      // Security: Clear session timeout\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n        setSessionTimeout(null);\n      }\n\n      // Security: Keep company but remove employee\n      const newState: AuthState = {\n        isAuthenticated: false,\n        company: authState.company,\n        employee: null,\n        loading: false\n      };\n      \n      setAuthState(newState);\n      saveAuthState(newState);\n      console.log('Employee logged out successfully');\n    } catch (error) {\n      console.error('Error during employee logout:', error);\n    }\n  };\n\n  const logoutAdmin = () => {\n    try {\n      // Security: Clear session timeout\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n        setSessionTimeout(null);\n      }\n\n      // Security: Clear all admin auth data\n      localStorage.removeItem('admin_auth_state');\n      setAdminAuth({\n        isAuthenticated: false,\n        adminUser: null,\n        loading: false\n      });\n\n      // Security: Clear any sensitive data from memory\n      console.log('Admin logged out successfully');\n    } catch (error) {\n      console.error('Error during admin logout:', error);\n    }\n  };\n\n  const refreshAuth = () => {\n    try {\n      // Security: Validate current auth state\n      if (authState.isAuthenticated && (!authState.company || !authState.employee)) {\n        console.warn('Invalid auth state detected, logging out');\n        logout();\n        return;\n      }\n\n      if (adminAuth.isAuthenticated && !adminAuth.adminUser) {\n        console.warn('Invalid admin auth state detected, logging out');\n        logoutAdmin();\n        return;\n      }\n\n      // Security: Reset session timeout\n      resetSessionTimeout();\n    } catch (error) {\n      console.error('Error refreshing auth:', error);\n      // Security: If refresh fails, log out for safety\n      logout();\n      logoutAdmin();\n    }\n  };\n\n  // Security: Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (sessionTimeout) {\n        clearTimeout(sessionTimeout);\n      }\n    };\n  }, [sessionTimeout]);\n\n  const value: AuthContextType = {\n    ...authState,\n    loginCompany,\n    loginEmployee,\n    logout,\n    logoutEmployee,\n    refreshAuth,\n    loginAdmin,\n    logoutAdmin,\n    adminAuth\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; ","size_bytes":17818},"client/src/hooks/useCart.ts":{"content":"import { useState, useCallback } from 'react';\nimport { CartItem, Product } from '@/lib/types';\n\nexport const useCart = () => {\n  const [items, setItems] = useState<CartItem[]>([]);\n\n  const addItem = useCallback((product: Product, quantity: number = 1) => {\n    setItems(prevItems => {\n      const existingItem = prevItems.find(item => item.product.id === product.id);\n      \n      if (existingItem) {\n        // Check stock limit before adding more\n        const newQuantity = existingItem.quantity + quantity;\n        if (newQuantity > product.stock) {\n          console.warn(`Cannot add more ${product.name}. Stock limit: ${product.stock}`);\n          return prevItems;\n        }\n        return prevItems.map(item =>\n          item.product.id === product.id\n            ? { ...item, quantity: newQuantity }\n            : item\n        );\n      }\n      \n      // Check stock for new item\n      if (quantity > product.stock) {\n        console.warn(`Cannot add ${product.name}. Stock limit: ${product.stock}`);\n        return prevItems;\n      }\n      \n      return [...prevItems, { product, quantity }];\n    });\n  }, []);\n\n  const updateQuantity = useCallback((productId: string, quantity: number) => {\n    if (quantity <= 0) {\n      setItems(prevItems => prevItems.filter(item => item.product.id !== productId));\n      return;\n    }\n    \n    setItems(prevItems =>\n      prevItems.map(item => {\n        if (item.product.id === productId) {\n          // Check stock limit before updating\n          if (quantity > item.product.stock) {\n            console.warn(`Cannot set quantity to ${quantity}. Stock limit: ${item.product.stock}`);\n            return item; // Keep current quantity\n          }\n          return { ...item, quantity };\n        }\n        return item;\n      })\n    );\n  }, []);\n\n  const removeItem = useCallback((productId: string) => {\n    setItems(prevItems => prevItems.filter(item => item.product.id !== productId));\n  }, []);\n\n  const clearCart = useCallback(() => {\n    setItems([]);\n  }, []);\n\n  const getTotal = useCallback(() => {\n    return Array.isArray(items) ? items.reduce((total, item) => total + ((item.product.price || 0) * (item.quantity || 0)), 0) : 0;\n  }, [items]);\n\n  const getItemCount = useCallback(() => {\n    return Array.isArray(items) ? items.reduce((count, item) => count + (item.quantity || 0), 0) : 0;\n  }, [items]);\n\n  return {\n    items,\n    addItem,\n    updateQuantity,\n    removeItem,\n    clearCart,\n    getTotal,\n    getItemCount\n  };\n};","size_bytes":2488},"client/src/hooks/useDataSync.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { dataSyncService } from '@/lib/data-sync';\nimport { Product, Customer, Transaction, Employee } from '@/lib/types';\nimport { useAuth } from './useAuth';\nimport { toast } from '@/hooks/use-toast';\n\nexport const useDataSync = () => {\n  const { company } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastSync, setLastSync] = useState<Date | null>(null);\n  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'error'>('idle');\n\n  // Data states\n  const [products, setProducts] = useState<Product[]>([]);\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n\n  // Sync all data for the company\n  const syncAllData = useCallback(async () => {\n    if (!company?.id) return;\n\n    setIsLoading(true);\n    setSyncStatus('syncing');\n\n    try {\n      console.log('Starting full data sync for company:', company.id);\n      const data = await dataSyncService.syncAllData(company.id);\n      \n      setProducts(data.products);\n      setCustomers(data.customers);\n      setTransactions(data.transactions);\n      setEmployees(data.employees);\n      \n      setLastSync(new Date());\n      setSyncStatus('idle');\n      \n      console.log('Full data sync completed successfully');\n      toast({\n        title: \"Sync Complete\",\n        description: `Synced ${data.products.length} products, ${data.customers.length} customers, ${data.transactions.length} transactions`,\n      });\n    } catch (error) {\n      console.error('Error during full data sync:', error);\n      setSyncStatus('error');\n      toast({\n        title: \"Sync Failed\",\n        description: \"Failed to sync data from server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [company?.id]);\n\n  // Individual data sync functions\n  const syncProducts = useCallback(async () => {\n    if (!company?.id) return;\n\n    try {\n      const data = await dataSyncService.syncProducts(company.id);\n      setProducts(data);\n      console.log('Products synced:', data.length);\n    } catch (error) {\n      console.error('Error syncing products:', error);\n      toast({\n        title: \"Products Sync Failed\",\n        description: \"Failed to sync products from server\",\n        variant: \"destructive\",\n      });\n    }\n  }, [company?.id]);\n\n  const syncCustomers = useCallback(async () => {\n    if (!company?.id) return;\n\n    try {\n      const data = await dataSyncService.syncCustomers(company.id);\n      setCustomers(data);\n      console.log('Customers synced:', data.length);\n    } catch (error) {\n      console.error('Error syncing customers:', error);\n      toast({\n        title: \"Customers Sync Failed\",\n        description: \"Failed to sync customers from server\",\n        variant: \"destructive\",\n      });\n    }\n  }, [company?.id]);\n\n  const syncTransactions = useCallback(async () => {\n    if (!company?.id) return;\n\n    try {\n      const data = await dataSyncService.syncTransactions(company.id);\n      setTransactions(data);\n      console.log('Transactions synced:', data.length);\n    } catch (error) {\n      console.error('Error syncing transactions:', error);\n      toast({\n        title: \"Transactions Sync Failed\",\n        description: \"Failed to sync transactions from server\",\n        variant: \"destructive\",\n      });\n    }\n  }, [company?.id]);\n\n  const syncEmployees = useCallback(async () => {\n    if (!company?.id) return;\n\n    try {\n      const data = await dataSyncService.syncEmployees(company.id);\n      setEmployees(data);\n      console.log('Employees synced:', data.length);\n    } catch (error) {\n      console.error('Error syncing employees:', error);\n      toast({\n        title: \"Employees Sync Failed\",\n        description: \"Failed to sync employees from server\",\n        variant: \"destructive\",\n      });\n    }\n  }, [company?.id]);\n\n  // Product operations\n  const saveProduct = useCallback(async (product: Product): Promise<Product> => {\n    try {\n      const savedProduct = await dataSyncService.saveProduct(product);\n      setProducts(prev => [...prev, savedProduct]);\n      toast({\n        title: \"Product Saved\",\n        description: `${product.name} has been saved to server`,\n      });\n      return savedProduct;\n    } catch (error) {\n      console.error('Error saving product:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save product to server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  const updateProduct = useCallback(async (id: string, updates: Partial<Product>): Promise<Product> => {\n    try {\n      const updatedProduct = await dataSyncService.updateProduct(id, updates);\n      setProducts(prev => prev.map(p => p.id === id ? updatedProduct : p));\n      toast({\n        title: \"Product Updated\",\n        description: \"Product has been updated on server\",\n      });\n      return updatedProduct;\n    } catch (error) {\n      console.error('Error updating product:', error);\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update product on server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  const deleteProduct = useCallback(async (id: string): Promise<void> => {\n    try {\n      await dataSyncService.deleteProduct(id);\n      setProducts(prev => prev.filter(p => p.id !== id));\n      toast({\n        title: \"Product Deleted\",\n        description: \"Product has been deleted from server\",\n      });\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete product from server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  // Customer operations\n  const saveCustomer = useCallback(async (customer: Customer): Promise<Customer> => {\n    try {\n      const savedCustomer = await dataSyncService.saveCustomer(customer);\n      setCustomers(prev => [...prev, savedCustomer]);\n      toast({\n        title: \"Customer Saved\",\n        description: `${customer.name} has been saved to server`,\n      });\n      return savedCustomer;\n    } catch (error) {\n      console.error('Error saving customer:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save customer to server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  const updateCustomer = useCallback(async (id: string, updates: Partial<Customer>): Promise<Customer> => {\n    try {\n      const updatedCustomer = await dataSyncService.updateCustomer(id, updates);\n      setCustomers(prev => prev.map(c => c.id === id ? updatedCustomer : c));\n      toast({\n        title: \"Customer Updated\",\n        description: \"Customer has been updated on server\",\n      });\n      return updatedCustomer;\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update customer on server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  const deleteCustomer = useCallback(async (id: string): Promise<void> => {\n    try {\n      await dataSyncService.deleteCustomer(id);\n      setCustomers(prev => prev.filter(c => c.id !== id));\n      toast({\n        title: \"Customer Deleted\",\n        description: \"Customer has been deleted from server\",\n      });\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete customer from server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  // Transaction operations\n  const saveTransaction = useCallback(async (transaction: Transaction): Promise<Transaction> => {\n    try {\n      const savedTransaction = await dataSyncService.saveTransaction(transaction);\n      setTransactions(prev => [savedTransaction, ...prev]);\n      \n      // Update products (stock levels changed)\n      await syncProducts();\n      \n      // Update customers (stats changed)\n      await syncCustomers();\n      \n      toast({\n        title: \"Transaction Saved\",\n        description: \"Transaction has been saved to server\",\n      });\n      return savedTransaction;\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save transaction to server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, [syncProducts, syncCustomers]);\n\n  const updateTransaction = useCallback(async (id: string, updates: Partial<Transaction>): Promise<Transaction> => {\n    try {\n      const updatedTransaction = await dataSyncService.updateTransaction(id, updates);\n      setTransactions(prev => prev.map(t => t.id === id ? updatedTransaction : t));\n      toast({\n        title: \"Transaction Updated\",\n        description: \"Transaction has been updated on server\",\n      });\n      return updatedTransaction;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      toast({\n        title: \"Update Failed\",\n        description: \"Failed to update transaction on server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  const deleteTransaction = useCallback(async (id: string): Promise<void> => {\n    try {\n      await dataSyncService.deleteTransaction(id);\n      setTransactions(prev => prev.filter(t => t.id !== id));\n      \n      // Update products (stock levels restored)\n      await syncProducts();\n      \n      // Update customers (stats updated)\n      await syncCustomers();\n      \n      toast({\n        title: \"Transaction Deleted\",\n        description: \"Transaction has been deleted from server\",\n      });\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      toast({\n        title: \"Delete Failed\",\n        description: \"Failed to delete transaction from server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, [syncProducts, syncCustomers]);\n\n  // Employee operations\n  const saveEmployee = useCallback(async (employee: Employee): Promise<void> => {\n    try {\n      await dataSyncService.saveEmployee(employee);\n      setEmployees(prev => [...prev, employee]);\n      toast({\n        title: \"Employee Saved\",\n        description: `${employee.name} has been saved to server`,\n      });\n    } catch (error) {\n      console.error('Error saving employee:', error);\n      toast({\n        title: \"Save Failed\",\n        description: \"Failed to save employee to server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, []);\n\n  // Stock management\n  const updateProductStock = useCallback(async (productId: string, quantity: number, operation: 'add' | 'subtract'): Promise<void> => {\n    try {\n      await dataSyncService.updateProductStock(productId, quantity, operation);\n      await syncProducts(); // Refresh products to get updated stock\n      toast({\n        title: \"Stock Updated\",\n        description: `Product stock has been ${operation}ed on server`,\n      });\n    } catch (error) {\n      console.error('Error updating product stock:', error);\n      toast({\n        title: \"Stock Update Failed\",\n        description: \"Failed to update product stock on server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, [syncProducts]);\n\n  // Customer statistics\n  const updateCustomerStats = useCallback(async (customerId: string, amount: number, operation: 'add' | 'subtract'): Promise<void> => {\n    try {\n      await dataSyncService.updateCustomerStats(customerId, amount, operation);\n      await syncCustomers(); // Refresh customers to get updated stats\n      toast({\n        title: \"Customer Stats Updated\",\n        description: \"Customer statistics have been updated on server\",\n      });\n    } catch (error) {\n      console.error('Error updating customer stats:', error);\n      toast({\n        title: \"Stats Update Failed\",\n        description: \"Failed to update customer statistics on server\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  }, [syncCustomers]);\n\n  // Health check\n  const checkServerHealth = useCallback(async (): Promise<boolean> => {\n    try {\n      const isHealthy = await dataSyncService.healthCheck();\n      if (!isHealthy) {\n        toast({\n          title: \"Server Unavailable\",\n          description: \"Cannot connect to server. Some features may be limited.\",\n          variant: \"destructive\",\n        });\n      }\n      return isHealthy;\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      toast({\n        title: \"Server Unavailable\",\n        description: \"Cannot connect to server. Some features may be limited.\",\n        variant: \"destructive\",\n      });\n      return false;\n    }\n  }, []);\n\n  // Listen for data refresh events\n  useEffect(() => {\n    const handleDataRefresh = (event: CustomEvent) => {\n      const { dataType } = event.detail;\n      console.log('Data refresh event received:', dataType);\n      \n      switch (dataType) {\n        case 'products':\n          syncProducts();\n          break;\n        case 'customers':\n          syncCustomers();\n          break;\n        case 'transactions':\n          syncTransactions();\n          break;\n        case 'employees':\n          syncEmployees();\n          break;\n      }\n    };\n\n    window.addEventListener('dataRefreshed', handleDataRefresh as EventListener);\n    \n    return () => {\n      window.removeEventListener('dataRefreshed', handleDataRefresh as EventListener);\n    };\n  }, [syncProducts, syncCustomers, syncTransactions, syncEmployees]);\n\n  // Initial sync when company changes\n  useEffect(() => {\n    if (company?.id) {\n      syncAllData();\n    }\n  }, [company?.id, syncAllData]);\n\n  return {\n    // Data\n    products,\n    customers,\n    transactions,\n    employees,\n    \n    // Loading states\n    isLoading,\n    syncStatus,\n    lastSync,\n    \n    // Sync functions\n    syncAllData,\n    syncProducts,\n    syncCustomers,\n    syncTransactions,\n    syncEmployees,\n    \n    // Product operations\n    saveProduct,\n    updateProduct,\n    deleteProduct,\n    \n    // Customer operations\n    saveCustomer,\n    updateCustomer,\n    deleteCustomer,\n    \n    // Transaction operations\n    saveTransaction,\n    updateTransaction,\n    deleteTransaction,\n    \n    // Employee operations\n    saveEmployee,\n    \n    // Stock and stats\n    updateProductStock,\n    updateCustomerStats,\n    \n    // Health check\n    checkServerHealth,\n  };\n};\n","size_bytes":14686},"client/src/hooks/useNetworkStatus.ts":{"content":"import { useEffect, useState } from 'react';\n\nexport const useNetworkStatus = () => {\n  const [isOnline, setIsOnline] = useState(\n    typeof navigator !== 'undefined' ? navigator.onLine : true\n  );\n  const [lastChange, setLastChange] = useState<Date>(new Date());\n\n  useEffect(() => {\n    const onOnline = () => {\n      setIsOnline(true);\n      setLastChange(new Date());\n    };\n    const onOffline = () => {\n      setIsOnline(false);\n      setLastChange(new Date());\n    };\n    window.addEventListener('online', onOnline);\n    window.addEventListener('offline', onOffline);\n    return () => {\n      window.removeEventListener('online', onOnline);\n      window.removeEventListener('offline', onOffline);\n    };\n  }, []);\n\n  return { isOnline, lastChange };\n};\n\n\n","size_bytes":762},"client/src/hooks/useSettings.ts":{"content":"import { useState, useEffect } from 'react';\nimport { getCompanySettings, getPrintSettings, CompanySettings, PrintTemplateSettings } from '@/lib/storage';\n\nexport const useSettings = () => {\n  const [companySettings, setCompanySettings] = useState<CompanySettings>(getCompanySettings());\n  const [printSettings, setPrintSettings] = useState<PrintTemplateSettings>(getPrintSettings());\n\n  // Listen for changes in localStorage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setCompanySettings(getCompanySettings());\n      setPrintSettings(getPrintSettings());\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-tab updates\n    const handleSettingsUpdate = () => {\n      handleStorageChange();\n    };\n\n    window.addEventListener('settingsUpdated', handleSettingsUpdate);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('settingsUpdated', handleSettingsUpdate);\n    };\n  }, []);\n\n  return {\n    companySettings,\n    printSettings,\n    refreshSettings: () => {\n      setCompanySettings(getCompanySettings());\n      setPrintSettings(getPrintSettings());\n    }\n  };\n}; ","size_bytes":1223},"client/src/lib/array-polyfill.ts":{"content":"// Array polyfill to ensure filter and other array methods are always safe\n\n// Store original methods\nconst originalFilter = Array.prototype.filter;\nconst originalMap = Array.prototype.map;\nconst originalFind = Array.prototype.find;\nconst originalReduce = Array.prototype.reduce;\n\n// Helper function to safely check if something is an array\nconst safeIsArray = (value: unknown): value is unknown[] => {\n  try {\n    return Array.isArray(value) && value !== null && value !== undefined;\n  } catch {\n    return false;\n  }\n};\n\n// Helper function to safely get array length\nconst safeLength = (arr: unknown[]): number => {\n  try {\n    return safeIsArray(arr) ? arr.length : 0;\n  } catch {\n    return 0;\n  }\n};\n\n// Override Array.prototype.filter to be more defensive\nArray.prototype.filter = function<T>(callback: (value: T, index: number, array: T[]) => boolean, thisArg?: unknown): T[] {\n  try {\n    // Check if this is actually an array\n    if (!safeIsArray(this)) {\n      console.warn('Array.prototype.filter called on non-array:', this);\n      return [];\n    }\n    \n    // Check if callback is a function\n    if (typeof callback !== 'function') {\n      console.warn('Array.prototype.filter called with non-function callback:', callback);\n      return [];\n    }\n    \n    // Check if array has been corrupted\n    const length = safeLength(this);\n    if (length === 0) return [];\n    \n    // Use the original filter method\n    return originalFilter.call(this, callback, thisArg);\n  } catch (error) {\n    console.error('Error in Array.prototype.filter:', error);\n    return [];\n  }\n};\n\n// Override Array.prototype.map to be more defensive\nArray.prototype.map = function<T, U>(callback: (value: T, index: number, array: T[]) => U, thisArg?: unknown): U[] {\n  try {\n    if (!safeIsArray(this)) {\n      console.warn('Array.prototype.map called on non-array:', this);\n      return [];\n    }\n    \n    if (typeof callback !== 'function') {\n      console.warn('Array.prototype.map called with non-function callback:', callback);\n      return [];\n    }\n    \n    const length = safeLength(this);\n    if (length === 0) return [];\n    \n    return originalMap.call(this, callback, thisArg);\n  } catch (error) {\n    console.error('Error in Array.prototype.map:', error);\n    return [];\n  }\n};\n\n// Override Array.prototype.find to be more defensive\nArray.prototype.find = function<T>(callback: (value: T, index: number, obj: T[]) => boolean, thisArg?: unknown): T | undefined {\n  try {\n    if (!safeIsArray(this)) {\n      console.warn('Array.prototype.find called on non-array:', this);\n      return undefined;\n    }\n    \n    if (typeof callback !== 'function') {\n      console.warn('Array.prototype.find called with non-function callback:', callback);\n      return undefined;\n    }\n    \n    const length = safeLength(this);\n    if (length === 0) return undefined;\n    \n    return originalFind.call(this, callback, thisArg);\n  } catch (error) {\n    console.error('Error in Array.prototype.find:', error);\n    return undefined;\n  }\n};\n\n// Override Array.prototype.reduce to be more defensive\nArray.prototype.reduce = function<T>(callback: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n  try {\n    if (!safeIsArray(this)) {\n      console.warn('Array.prototype.reduce called on non-array:', this);\n      return initialValue as T;\n    }\n    \n    if (typeof callback !== 'function') {\n      console.warn('Array.prototype.reduce called with non-function callback:', callback);\n      return initialValue as T;\n    }\n    \n    const length = safeLength(this);\n    if (length === 0 && arguments.length < 2) {\n      throw new TypeError('Reduce of empty array with no initial value');\n    }\n    \n    return originalReduce.call(this, callback, initialValue);\n  } catch (error) {\n    console.error('Error in Array.prototype.reduce:', error);\n    return initialValue as T;\n  }\n};\n\n// Safe filter polyfill (fallback for older browsers)\nif (typeof Array.prototype.filter !== 'function') {\n  Array.prototype.filter = function<T>(callback: (value: T, index: number, array: T[]) => boolean, thisArg?: unknown): T[] {\n    if (this == null) {\n      throw new TypeError('Array.prototype.filter called on null or undefined');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    \n    const O = Object(this);\n    const len = O.length >>> 0;\n    const result = [];\n    let k = 0;\n    \n    while (k < len) {\n      if (k in O) {\n        const kValue = O[k];\n        if (callback.call(thisArg, kValue, k, O)) {\n          result.push(kValue);\n        }\n      }\n      k++;\n    }\n    \n    return result;\n  };\n}\n\n// Safe map polyfill (fallback for older browsers)\nif (typeof Array.prototype.map !== 'function') {\n  Array.prototype.map = function<T, U>(callback: (value: T, index: number, array: T[]) => U, thisArg?: unknown): U[] {\n    if (this == null) {\n      throw new TypeError('Array.prototype.map called on null or undefined');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    \n    const O = Object(this);\n    const len = O.length >>> 0;\n    const result = new Array(len);\n    let k = 0;\n    \n    while (k < len) {\n      if (k in O) {\n        result[k] = callback.call(thisArg, O[k], k, O);\n      }\n      k++;\n    }\n    \n    return result;\n  };\n}\n\n// Safe find polyfill (fallback for older browsers)\nif (typeof Array.prototype.find !== 'function') {\n  Array.prototype.find = function<T>(callback: (value: T, index: number, obj: T[]) => boolean, thisArg?: unknown): T | undefined {\n    if (this == null) {\n      throw new TypeError('Array.prototype.find called on null or undefined');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    \n    const O = Object(this);\n    const len = O.length >>> 0;\n    let k = 0;\n    \n    while (k < len) {\n      if (k in O) {\n        const kValue = O[k];\n        if (callback.call(thisArg, kValue, k, O)) {\n          return kValue;\n        }\n      }\n      k++;\n    }\n    \n    return undefined;\n  };\n}\n\n// Safe reduce polyfill (fallback for older browsers)\nif (typeof Array.prototype.reduce !== 'function') {\n  Array.prototype.reduce = function<T>(callback: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T {\n    if (this == null) {\n      throw new TypeError('Array.prototype.reduce called on null or undefined');\n    }\n    \n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    \n    const O = Object(this);\n    const len = O.length >>> 0;\n    let k = 0;\n    let accumulator;\n    \n    if (arguments.length >= 2) {\n      accumulator = initialValue;\n    } else {\n      if (len === 0) {\n        throw new TypeError('Reduce of empty array with no initial value');\n      }\n      accumulator = O[k++];\n    }\n    \n    while (k < len) {\n      if (k in O) {\n        accumulator = callback.call(undefined, accumulator, O[k], k, O);\n      }\n      k++;\n    }\n    \n    return accumulator;\n  };\n}\n\n// Enhanced Array.isArray check\nconst originalIsArray = Array.isArray;\nArray.isArray = function(arg: unknown): arg is unknown[] {\n  try {\n    if (originalIsArray) {\n      return originalIsArray(arg);\n    }\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  } catch {\n    return false;\n  }\n};\n\n// Add a safe filter method to all objects that might be arrays\nObject.defineProperty(Object.prototype, 'safeFilter', {\n  value: function<T>(callback: (value: T, index: number, array: T[]) => boolean, thisArg?: unknown): T[] {\n    if (safeIsArray(this)) {\n      return this.filter(callback, thisArg);\n    }\n    console.warn('safeFilter called on non-array:', this);\n    return [];\n  },\n  writable: true,\n  configurable: true\n});\n\nconsole.log('Array polyfills loaded successfully');","size_bytes":7931},"client/src/lib/array-utils.ts":{"content":"// Safe array utilities to prevent \"filter is not a function\" errors\n\n/**\n * Safely filters an array, returning an empty array if the input is not an array\n */\nexport const safeFilter = <T>(array: unknown, predicate: (item: T, index: number, array: T[]) => boolean): T[] => {\n  if (!Array.isArray(array)) {\n    console.warn('safeFilter: Input is not an array:', array);\n    return [];\n  }\n  try {\n    return array.filter(predicate);\n  } catch (error) {\n    console.error('safeFilter: Error during filter operation:', error);\n    return [];\n  }\n};\n\n/**\n * Safely maps over an array, returning an empty array if the input is not an array\n */\nexport const safeMap = <T, U>(array: unknown, mapper: (item: T, index: number, array: T[]) => U): U[] => {\n  if (!Array.isArray(array)) {\n    console.warn('safeMap: Input is not an array:', array);\n    return [];\n  }\n  try {\n    return array.map(mapper);\n  } catch (error) {\n    console.error('safeMap: Error during map operation:', error);\n    return [];\n  }\n};\n\n/**\n * Safely finds an item in an array, returning undefined if the input is not an array\n */\nexport const safeFind = <T>(array: unknown, predicate: (item: T, index: number, array: T[]) => boolean): T | undefined => {\n  if (!Array.isArray(array)) {\n    console.warn('safeFind: Input is not an array:', array);\n    return undefined;\n  }\n  try {\n    return array.find(predicate);\n  } catch (error) {\n    console.error('safeFind: Error during find operation:', error);\n    return undefined;\n  }\n};\n\n/**\n * Safely reduces an array, returning the initial value if the input is not an array\n */\nexport const safeReduce = <T, U>(\n  array: unknown, \n  reducer: (accumulator: U, currentValue: T, currentIndex: number, array: T[]) => U, \n  initialValue: U\n): U => {\n  if (!Array.isArray(array)) {\n    console.warn('safeReduce: Input is not an array:', array);\n    return initialValue;\n  }\n  try {\n    return array.reduce(reducer, initialValue);\n  } catch (error) {\n    console.error('safeReduce: Error during reduce operation:', error);\n    return initialValue;\n  }\n};\n\n/**\n * Ensures a value is an array, returning an empty array if it's not\n */\nexport const ensureArray = <T>(value: unknown): T[] => {\n  if (Array.isArray(value)) {\n    return value as T[];\n  }\n  console.warn('ensureArray: Value is not an array:', value);\n  return [];\n};\n\n/**\n * Safely gets the length of an array, returning 0 if the input is not an array\n */\nexport const safeLength = (array: unknown): number => {\n  if (!Array.isArray(array)) {\n    return 0;\n  }\n  return array.length;\n};","size_bytes":2554},"client/src/lib/config.ts":{"content":"// Environment configuration for the application\nexport interface Config {\n  database: {\n    url: string;\n    ssl: boolean;\n  };\n  app: {\n    name: string;\n    version: string;\n    environment: 'development' | 'production' | 'test';\n  };\n  security: {\n    jwtSecret: string;\n    bcryptRounds: number;\n  };\n}\n\n// Validate required environment variables\nconst validateEnvVar = (name: string, value: string | undefined): string => {\n  if (!value) {\n    throw new Error(`Missing required environment variable: ${name}`);\n  }\n  return value;\n};\n\n// Get configuration from environment variables\nexport const getConfig = (): Config => {\n  const environment = (import.meta.env.MODE || 'development') as Config['app']['environment'];\n  \n  return {\n    database: {\n      url: validateEnvVar('VITE_DATABASE_URL', import.meta.env.VITE_DATABASE_URL),\n      ssl: environment === 'production'\n    },\n    app: {\n      name: 'Sales Channel POS',\n      version: '1.0.0',\n      environment\n    },\n    security: {\n      jwtSecret: validateEnvVar('VITE_JWT_SECRET', import.meta.env.VITE_JWT_SECRET || 'default-secret-change-in-production'),\n      bcryptRounds: 10\n    }\n  };\n};\n\n// Export a singleton instance\nexport const config = getConfig();\n\n// Helper function to check if we're in development\nexport const isDevelopment = (): boolean => config.app.environment === 'development';\n\n// Helper function to check if we're in production\nexport const isProduction = (): boolean => config.app.environment === 'production';\n","size_bytes":1499},"client/src/lib/data-sync.ts":{"content":"// Data Synchronization Service\n// Ensures all data is properly saved to server and fetched for future use\n\n// Note: Direct database connections removed - using API calls instead\nimport { LocalStore, isOnline } from './local-store';\nimport { Product, Customer, Transaction, Employee, Company } from './types';\n\nexport class DataSyncService {\n  private static instance: DataSyncService;\n  private syncQueue: Array<() => Promise<void>> = [];\n  private isSyncing = false;\n  private pendingOpsKey = `${'scpos'}:pendingOps`;\n\n  private constructor() {}\n\n  static getInstance(): DataSyncService {\n    if (!DataSyncService.instance) {\n      DataSyncService.instance = new DataSyncService();\n    }\n    return DataSyncService.instance;\n  }\n\n  // Product Synchronization\n  async syncProducts(companyId: string): Promise<Product[]> {\n    try {\n      // TODO: Replace with API call to server\n      return LocalStore.getProducts(companyId);\n    } catch (error) {\n      console.error('Error syncing products:', error);\n      return LocalStore.getProducts(companyId);\n    }\n  }\n\n  async saveProduct(product: Product): Promise<Product> {\n    try {\n      // Write locally first (offline-first)\n      LocalStore.saveProduct(product);\n      // TODO: Add API call to save to server\n      this.triggerDataRefresh('products');\n      return product;\n    } catch (error) {\n      console.error('Error saving product:', error);\n      return product;\n    }\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    try {\n      // Local optimistic update\n      const companyId = (updates as any).companyId;\n      if (companyId) {\n        const current = LocalStore.getProducts(companyId).find(p => p.id === id);\n        if (current) LocalStore.saveProduct({ ...current, ...updates, id } as Product);\n      }\n      // TODO: Add API call to update on server\n      this.triggerDataRefresh('products');\n      return (updates as any) as Product;\n    } catch (error) {\n      console.error('Error updating product:', error);\n      return (updates as any) as Product;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    try {\n      // TODO: Add API call to delete from server\n      this.triggerDataRefresh('products');\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  }\n\n  // Customer Synchronization\n  async syncCustomers(companyId: string): Promise<Customer[]> {\n    try {\n      // TODO: Replace with API call to server\n      return LocalStore.getCustomers(companyId);\n    } catch (error) {\n      console.error('Error syncing customers:', error);\n      return LocalStore.getCustomers(companyId);\n    }\n  }\n\n  async saveCustomer(customer: Customer): Promise<Customer> {\n    try {\n      LocalStore.saveCustomer(customer);\n      // TODO: Add API call to save to server\n      this.triggerDataRefresh('customers');\n      return customer;\n    } catch (error) {\n      console.error('Error saving customer:', error);\n      return customer;\n    }\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer> {\n    try {\n      const companyId = (updates as any).companyId;\n      if (companyId) {\n        const current = LocalStore.getCustomers(companyId).find(c => c.id === id);\n        if (current) LocalStore.saveCustomer({ ...current, ...updates, id } as Customer);\n      }\n      // TODO: Add API call to update on server\n      this.triggerDataRefresh('customers');\n      return (updates as any) as Customer;\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      return (updates as any) as Customer;\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    try {\n      // TODO: Add API call to delete from server\n      this.triggerDataRefresh('customers');\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      throw error;\n    }\n  }\n\n  // Transaction Synchronization\n  async syncTransactions(companyId: string): Promise<Transaction[]> {\n    try {\n      // TODO: Replace with API call to server\n      return LocalStore.getTransactions(companyId);\n    } catch (error) {\n      console.error('Error syncing transactions:', error);\n      return LocalStore.getTransactions(companyId);\n    }\n  }\n\n  async saveTransaction(transaction: Transaction): Promise<Transaction> {\n    try {\n      LocalStore.saveTransaction(transaction);\n      // TODO: Add API call to save to server\n      this.triggerDataRefresh('transactions');\n      this.triggerDataRefresh('products');\n      this.triggerDataRefresh('customers');\n      return transaction;\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      return transaction;\n    }\n  }\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction> {\n    try {\n      // TODO: Add API call to update on server\n      this.triggerDataRefresh('transactions');\n      return (updates as any) as Transaction;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    try {\n      // TODO: Add API call to delete from server\n      this.triggerDataRefresh('transactions');\n      this.triggerDataRefresh('products'); // Stock levels restored\n      this.triggerDataRefresh('customers'); // Customer stats updated\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      throw error;\n    }\n  }\n\n  // Employee Synchronization\n  async syncEmployees(companyId: string): Promise<Employee[]> {\n    try {\n      // TODO: Replace with API call to server\n      return [];\n    } catch (error) {\n      console.error('Error syncing employees:', error);\n      throw error;\n    }\n  }\n\n  async saveEmployee(employee: Employee): Promise<void> {\n    try {\n      // TODO: Add API call to save to server\n      this.triggerDataRefresh('employees');\n    } catch (error) {\n      console.error('Error saving employee:', error);\n      throw error;\n    }\n  }\n\n  // Stock Management Synchronization\n  async updateProductStock(productId: string, quantity: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      // TODO: Add API call to update stock on server\n      this.triggerDataRefresh('products');\n    } catch (error) {\n      console.error('Error updating product stock:', error);\n      throw error;\n    }\n  }\n\n  // Customer Statistics Synchronization\n  async updateCustomerStats(customerId: string, amount: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      // TODO: Add API call to update stats on server\n      this.triggerDataRefresh('customers');\n    } catch (error) {\n      console.error('Error updating customer stats:', error);\n      throw error;\n    }\n  }\n\n  // Batch Operations\n  async syncAllData(companyId: string): Promise<{\n    products: Product[];\n    customers: Customer[];\n    transactions: Transaction[];\n    employees: Employee[];\n  }> {\n    try {\n      console.log('Starting full data sync for company:', companyId);\n      \n      const [products, customers, transactions, employees] = await Promise.all([\n        this.syncProducts(companyId),\n        this.syncCustomers(companyId),\n        this.syncTransactions(companyId),\n        this.syncEmployees(companyId)\n      ]);\n\n      console.log('Full data sync completed successfully:', {\n        products: products.length,\n        customers: customers.length,\n        transactions: transactions.length,\n        employees: employees.length\n      });\n\n      return { products, customers, transactions, employees };\n    } catch (error) {\n      console.error('Error during full data sync:', error);\n      throw error;\n    }\n  }\n\n  // Event System for Data Refresh\n  private triggerDataRefresh(dataType: 'products' | 'customers' | 'transactions' | 'employees'): void {\n    const event = new CustomEvent('dataRefreshed', {\n      detail: { dataType, timestamp: new Date() }\n    });\n    window.dispatchEvent(event);\n    console.log('Data refresh event triggered:', dataType);\n  }\n\n  // Queue Management for Offline Support\n  async addToSyncQueue(operation: () => Promise<void>): Promise<void> {\n    this.syncQueue.push(operation);\n    console.log('Operation added to sync queue. Queue length:', this.syncQueue.length);\n    \n    if (!this.isSyncing) {\n      await this.processSyncQueue();\n    }\n  }\n\n  private async processSyncQueue(): Promise<void> {\n    if (this.isSyncing) return;\n\n    this.isSyncing = true;\n    console.log('Processing sync queue...');\n\n    try {\n      // Load persisted queue and merge with in-memory\n      const persisted = this.loadPendingOps();\n      if (persisted.length) {\n        for (const fn of persisted) this.syncQueue.push(fn);\n        this.clearPendingOps();\n      }\n\n      while (this.syncQueue.length > 0) {\n        const operation = this.syncQueue.shift();\n        if (operation) {\n          try {\n            await operation();\n            console.log('Sync operation completed successfully');\n          } catch (error) {\n            console.error('Sync operation failed:', error);\n            // Persist failed op to localStorage for retry later\n            this.persistPendingOp(operation);\n          }\n        }\n      }\n    } finally {\n      this.isSyncing = false;\n      console.log('Sync queue processing completed');\n    }\n  }\n\n  // Persist/Load pending ops (store as simple markers and reconstruct)\n  private persistPendingOp(op: () => Promise<void>) {\n    // Since functions can't be serialized, we store a simple token telling to run a full sync\n    // This keeps implementation simple and robust.\n    const key = this.pendingOpsKey;\n    try {\n      localStorage.setItem(key, JSON.stringify({ pending: true, ts: Date.now() }));\n      window.addEventListener('online', () => {\n        // trigger sync on next tick\n        setTimeout(() => this.syncAllOnReconnect(), 100);\n      }, { once: true });\n    } catch (e) {\n      console.warn('Could not persist pending op', e);\n    }\n  }\n\n  private loadPendingOps(): Array<() => Promise<void>> {\n    try {\n      const data = localStorage.getItem(this.pendingOpsKey);\n      if (!data) return [];\n      const parsed = JSON.parse(data);\n      if (parsed && parsed.pending) {\n        // Return a single op that runs a full sync of all resources\n        return [async () => this.syncAllOnReconnect()];\n      }\n    } catch {}\n    return [];\n  }\n\n  private clearPendingOps() {\n    try { localStorage.removeItem(this.pendingOpsKey); } catch {}\n  }\n\n  private async syncAllOnReconnect() {\n    // Best-effort refresh for all company data currently in local cache\n    // If multiple companies are used in the same browser, we could extend\n    // this to iterate keys. For now, rely on UI loads to pass specific companyId.\n    // We dispatch a generic refresh event; pages using useDataSync will fetch fresh.\n    this.triggerDataRefresh('products');\n    this.triggerDataRefresh('customers');\n    this.triggerDataRefresh('transactions');\n    this.triggerDataRefresh('employees');\n  }\n\n  // Health Check\n  async healthCheck(): Promise<boolean> {\n    try {\n      // TODO: Replace with API call to server health endpoint\n      return true;\n    } catch (error) {\n      console.error('Database health check failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const dataSyncService = DataSyncService.getInstance();\n","size_bytes":11363},"client/src/lib/database.ts":{"content":"// src/lib/database.ts\n// Mock database services for subscription management\n// This file provides the services that subscription-storage.ts expects\n\nimport { SubscriptionPlan, CompanySubscription, SupportTicket } from './subscription-types';\nimport { Company } from './types';\n\n// Mock subscription plan service\nexport const subscriptionPlanService = {\n  async getPlans(): Promise<SubscriptionPlan[]> {\n    // Return mock subscription plans\n    return [\n      {\n        id: 'basic',\n        name: 'Basic Plan',\n        price: 29.99,\n        durationDays: 30,\n        features: ['Basic POS', 'Customer Management', 'Basic Reports'],\n        tokenLimit: 1000,\n        isActive: true\n      },\n      {\n        id: 'professional',\n        name: 'Professional Plan',\n        price: 79.99,\n        durationDays: 30,\n        features: ['Advanced POS', 'Inventory Management', 'Advanced Reports', 'Multi-location'],\n        tokenLimit: 5000,\n        isActive: true\n      },\n      {\n        id: 'enterprise',\n        name: 'Enterprise Plan',\n        price: 199.99,\n        durationDays: 30,\n        features: ['Full POS Suite', 'Advanced Analytics', 'API Access', 'Priority Support'],\n        tokenLimit: 10000,\n        isActive: true\n      }\n    ];\n  },\n\n  async add(plan: SubscriptionPlan): Promise<void> {\n    console.log('Mock: Adding subscription plan:', plan);\n    // Mock implementation - would save to database in real app\n  },\n\n  async update(id: string, updates: Partial<SubscriptionPlan>): Promise<void> {\n    console.log('Mock: Updating subscription plan:', id, updates);\n    // Mock implementation - would update database in real app\n  },\n\n  async delete(id: string): Promise<void> {\n    console.log('Mock: Deleting subscription plan:', id);\n    // Mock implementation - would delete from database in real app\n  }\n};\n\n// Mock company service\nexport const companyService = {\n  async getAll(): Promise<Company[]> {\n    // Return mock companies\n    return [\n      {\n        id: 'company1',\n        name: 'Demo Company 1',\n        email: 'demo1@example.com',\n        phone: '+1234567890',\n        address: '123 Demo St',\n        city: 'Demo City',\n        state: 'Demo State',\n        zipCode: '12345',\n        country: 'Demo Country',\n        status: 'active',\n        subscriptionPlanId: 'basic',\n        subscriptionStart: new Date(),\n        subscriptionEnd: new Date(Date.now() + 30 * 24 * 3600 * 1000),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 'company2',\n        name: 'Demo Company 2',\n        email: 'demo2@example.com',\n        phone: '+0987654321',\n        address: '456 Demo Ave',\n        city: 'Demo City',\n        state: 'Demo State',\n        zipCode: '54321',\n        country: 'Demo Country',\n        status: 'active',\n        subscriptionPlanId: 'professional',\n        subscriptionStart: new Date(),\n        subscriptionEnd: new Date(Date.now() + 30 * 24 * 3600 * 1000),\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n  },\n\n  async add(company: Company): Promise<void> {\n    console.log('Mock: Adding company:', company);\n    // Mock implementation - would save to database in real app\n  },\n\n  async update(id: string, updates: Partial<Company>): Promise<void> {\n    console.log('Mock: Updating company:', id, updates);\n    // Mock implementation - would update database in real app\n  },\n\n  async delete(id: string): Promise<void> {\n    console.log('Mock: Deleting company:', id);\n    // Mock implementation - would delete from database in real app\n  }\n};\n\n// Mock support ticket service\nexport const supportTicketService = {\n  async getTickets(): Promise<SupportTicket[]> {\n    // Return mock support tickets\n    return [\n      {\n        id: 'ticket1',\n        companyId: 'company1',\n        title: 'Login Issue',\n        description: 'Unable to login to the system',\n        priority: 'medium',\n        status: 'open',\n        category: 'technical',\n        assignedTo: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: 'ticket2',\n        companyId: 'company2',\n        title: 'Feature Request',\n        description: 'Need additional reporting features',\n        priority: 'low',\n        status: 'in_progress',\n        category: 'feature',\n        assignedTo: 'support1',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n  },\n\n  async createTicket(ticket: SupportTicket): Promise<void> {\n    console.log('Mock: Creating support ticket:', ticket);\n    // Mock implementation - would save to database in real app\n  },\n\n  async updateTicket(id: string, updates: Partial<SupportTicket>): Promise<void> {\n    console.log('Mock: Updating support ticket:', id, updates);\n    // Mock implementation - would update database in real app\n  },\n\n  async deleteTicket(id: string): Promise<void> {\n    console.log('Mock: Deleting support ticket:', id);\n    // Mock implementation - would delete from database in real app\n  }\n};\n","size_bytes":4983},"client/src/lib/invoice-utils.ts":{"content":"export interface InvoiceItem {\n  id: string;\n  name: string;\n  description: string;\n  quantity: number;\n  unitPrice: number;\n  total: number;\n}\n\nexport interface Invoice {\n  id: string;\n  number: string;\n  date: string;\n  dueDate: string;\n  customer: {\n    name: string;\n    email: string;\n    phone: string;\n    address: string;\n  };\n  items: InvoiceItem[];\n  subtotal: number;\n  taxRate: number;\n  taxAmount: number;\n  total: number;\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled';\n  notes: string;\n  template: number;\n  currency: string;\n}\n\nexport interface CompanyInfo {\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  pinCode: string;\n  country: string;\n  email: string;\n  phone: string;\n  taxId: string;\n  gstin: string;\n  logo?: string;\n}\n\nexport const calculateInvoiceTotals = (items: InvoiceItem[], taxRate: number) => {\n  const subtotal = items.reduce((sum, item) => sum + item.total, 0);\n  const taxAmount = (subtotal * taxRate) / 100;\n  const total = subtotal + taxAmount;\n  return { subtotal, taxAmount, total };\n};\n\nexport const generateInvoiceNumber = (prefix: string = 'INV') => {\n  const timestamp = Date.now().toString().slice(-6);\n  return `${prefix}-${timestamp}`;\n};\n\nexport const formatCurrency = (amount: number, currency: string = 'INR') => {\n  const formatter = new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n  });\n  return formatter.format(amount);\n};\n\nexport const getCurrencySymbol = (currency: string) => {\n  switch (currency) {\n    case 'INR': return '₹';\n    case 'USD': return '$';\n    case 'EUR': return '€';\n    case 'GBP': return '£';\n    default: return '₹';\n  }\n};\n\nexport const getCompanyInfo = (): CompanyInfo => {\n  const savedCompany = localStorage.getItem('company_settings');\n  if (savedCompany) {\n    const companySettings = JSON.parse(savedCompany);\n    return {\n      name: companySettings.name || 'Your Company',\n      address: companySettings.address || '',\n      city: companySettings.city || '',\n      state: companySettings.state || '',\n      pinCode: companySettings.pinCode || '',\n      country: companySettings.country || 'India',\n      email: companySettings.email || '',\n      phone: companySettings.phone || '',\n      taxId: companySettings.taxId || '',\n      gstin: companySettings.gstin || '',\n      logo: companySettings.logo\n    };\n  }\n  return {\n    name: 'Your Company',\n    address: '',\n    city: '',\n    state: '',\n    pinCode: '',\n    country: 'India',\n    email: '',\n    phone: '',\n    taxId: '',\n    gstin: ''\n  };\n};\n\nexport const getInvoiceSettings = () => {\n  const savedSettings = localStorage.getItem('invoice_settings');\n  if (savedSettings) {\n    return JSON.parse(savedSettings);\n  }\n  return {\n    defaultTemplate: 1,\n    defaultCurrency: \"INR\",\n    defaultTaxRate: 18,\n    defaultNotes: \"Thank you for your business!\",\n    showLogo: true,\n    showTaxBreakdown: true,\n    showCustomerInfo: true,\n    autoGenerateInvoiceNumber: true,\n    invoiceNumberPrefix: \"INV\",\n    includeTerms: false,\n    termsText: \"Payment is due within 30 days. Late payments may incur additional charges.\",\n    includePaymentInstructions: false,\n    paymentInstructions: \"Please make payment to the account details provided above.\"\n  };\n};\n\nexport const saveInvoice = (invoice: Invoice) => {\n  const savedInvoices = localStorage.getItem('invoices');\n  const invoices = savedInvoices ? JSON.parse(savedInvoices) : [];\n  const updatedInvoices = [invoice, ...invoices];\n  localStorage.setItem('invoices', JSON.stringify(updatedInvoices));\n  return updatedInvoices;\n};\n\nexport const getInvoices = (): Invoice[] => {\n  const savedInvoices = localStorage.getItem('invoices');\n  return savedInvoices ? JSON.parse(savedInvoices) : [];\n};\n\nexport const updateInvoice = (updatedInvoice: Invoice) => {\n  const invoices = getInvoices();\n  const updatedInvoices = invoices.map(invoice => \n    invoice.id === updatedInvoice.id ? updatedInvoice : invoice\n  );\n  localStorage.setItem('invoices', JSON.stringify(updatedInvoices));\n  return updatedInvoices;\n};\n\nexport const deleteInvoice = (id: string) => {\n  const invoices = getInvoices();\n  const updatedInvoices = invoices.filter(invoice => invoice.id !== id);\n  localStorage.setItem('invoices', JSON.stringify(updatedInvoices));\n  return updatedInvoices;\n};\n\nexport const getInvoiceStats = (invoices: Invoice[]) => {\n  return {\n    total: invoices.length,\n    paid: invoices.filter(i => i.status === 'paid').length,\n    pending: invoices.filter(i => i.status === 'sent').length,\n    overdue: invoices.filter(i => i.status === 'overdue').length,\n    draft: invoices.filter(i => i.status === 'draft').length,\n    totalAmount: invoices.reduce((sum, i) => sum + i.total, 0),\n    paidAmount: invoices.filter(i => i.status === 'paid').reduce((sum, i) => sum + i.total, 0),\n    pendingAmount: invoices.filter(i => i.status === 'sent').reduce((sum, i) => sum + i.total, 0)\n  };\n};\n","size_bytes":4971},"client/src/lib/local-store.ts":{"content":"// Offline-first local storage adapter (localStorage-based)\n// Provides CRUD operations and simple sync helpers for company-scoped data.\n\nimport { Product, Customer, Transaction, Employee } from '@/lib/types';\n\nconst STORAGE_PREFIX = 'scpos';\n\ntype Storable = Record<string, unknown> & { id: string };\n\ntype CollectionName = 'products' | 'customers' | 'transactions' | 'employees' | 'settings';\n\nconst buildKey = (companyId: string, collection: CollectionName) => `${STORAGE_PREFIX}:${companyId}:${collection}`;\n\nconst safeParse = <T>(value: string | null, fallback: T): T => {\n\ttry {\n\t\treturn value ? (JSON.parse(value) as T) : fallback;\n\t} catch {\n\t\treturn fallback;\n\t}\n};\n\nconst write = (key: string, value: unknown) => {\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t} catch (e) {\n\t\tconsole.error('LocalStore write error', key, e);\n\t}\n};\n\nconst read = <T>(key: string, fallback: T): T => safeParse<T>(localStorage.getItem(key), fallback);\n\nconst upsert = <T extends Storable>(items: T[], entity: T): T[] => {\n\tconst idx = items.findIndex(i => i.id === entity.id);\n\tif (idx >= 0) {\n\t\tconst updated = [...items];\n\t\tupdated[idx] = entity;\n\t\treturn updated;\n\t}\n\treturn [entity, ...items];\n};\n\nexport class LocalStore {\n\tstatic getProducts(companyId: string): Product[] {\n\t\treturn read<Product[]>(buildKey(companyId, 'products'), []);\n\t}\n\tstatic saveProduct(product: Product): Product {\n\t\tconst key = buildKey(product.companyId, 'products');\n\t\tconst all = read<Product[]>(key, []);\n\t\tconst updated = upsert(all, product);\n\t\twrite(key, updated);\n\t\treturn product;\n\t}\n\tstatic deleteProduct(companyId: string, id: string): void {\n\t\tconst key = buildKey(companyId, 'products');\n\t\tconst all = read<Product[]>(key, []);\n\t\twrite(key, all.filter(p => p.id !== id));\n\t}\n\n\tstatic getCustomers(companyId: string): Customer[] {\n\t\treturn read<Customer[]>(buildKey(companyId, 'customers'), []);\n\t}\n\tstatic saveCustomer(customer: Customer): Customer {\n\t\tconst key = buildKey(customer.companyId, 'customers');\n\t\tconst all = read<Customer[]>(key, []);\n\t\tconst updated = upsert(all, customer);\n\t\twrite(key, updated);\n\t\treturn customer;\n\t}\n\tstatic deleteCustomer(companyId: string, id: string): void {\n\t\tconst key = buildKey(companyId, 'customers');\n\t\tconst all = read<Customer[]>(key, []);\n\t\twrite(key, all.filter(c => c.id !== id));\n\t}\n\n\tstatic getTransactions(companyId: string): Transaction[] {\n\t\treturn read<Transaction[]>(buildKey(companyId, 'transactions'), []);\n\t}\n\tstatic saveTransaction(tx: Transaction): Transaction {\n\t\tconst key = buildKey(tx.companyId, 'transactions');\n\t\tconst all = read<Transaction[]>(key, []);\n\t\tconst updated = upsert(all, tx);\n\t\twrite(key, updated);\n\t\treturn tx;\n\t}\n\tstatic deleteTransaction(companyId: string, id: string): void {\n\t\tconst key = buildKey(companyId, 'transactions');\n\t\tconst all = read<Transaction[]>(key, []);\n\t\twrite(key, all.filter(t => t.id !== id));\n\t}\n\n\tstatic getEmployees(companyId: string): Employee[] {\n\t\treturn read<Employee[]>(buildKey(companyId, 'employees'), []);\n\t}\n\tstatic saveEmployee(employee: Employee): Employee {\n\t\tconst key = buildKey(employee.companyId, 'employees');\n\t\tconst all = read<Employee[]>(key, []);\n\t\tconst updated = upsert(all, employee);\n\t\twrite(key, updated);\n\t\treturn employee;\n\t}\n\n\t// Settings are key-value\n\tstatic getSettings(companyId: string): Record<string, string> {\n\t\treturn read<Record<string, string>>(buildKey(companyId, 'settings'), {});\n\t}\n\tstatic saveSettings(companyId: string, updates: Record<string, string>): Record<string, string> {\n\t\tconst key = buildKey(companyId, 'settings');\n\t\tconst current = read<Record<string, string>>(key, {});\n\t\tconst merged = { ...current, ...updates };\n\t\twrite(key, merged);\n\t\treturn merged;\n\t}\n}\n\nexport const isOnline = (): boolean => typeof navigator !== 'undefined' && navigator.onLine;\n","size_bytes":3820},"client/src/lib/postgres-database.ts":{"content":"import { Client } from 'pg';\nimport bcryptjs from 'bcryptjs';\nimport { Product, Transaction, Customer, Employee, Company, LoginCredentials, EmployeeLoginCredentials } from './types';\nimport { config } from './config';\n\nclass PostgresDatabaseService {\n  private client: Client | null = null;\n  private isConnecting = false;\n\n  constructor() {\n    // Don't create client immediately, create it when needed\n  }\n\n  private async getClient(): Promise<Client> {\n    if (this.client && !this.client.ended) {\n      return this.client;\n    }\n\n    if (this.isConnecting) {\n      // Wait for existing connection attempt\n      while (this.isConnecting) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      if (this.client && !this.client.ended) {\n        return this.client;\n      }\n    }\n\n    this.isConnecting = true;\n    try {\n      this.client = new Client({\n        connectionString: config.database.url,\n        ssl: config.database.ssl ? {\n          rejectUnauthorized: false\n        } : false\n      });\n      \n      await this.client.connect();\n      console.log('PostgreSQL database connected successfully');\n      return this.client;\n    } catch (error) {\n      console.error('Failed to connect to PostgreSQL database:', error);\n      throw error;\n    } finally {\n      this.isConnecting = false;\n    }\n  }\n\n  private async executeQuery<T>(query: string, params: (string | number | boolean | null)[] = []): Promise<T[]> {\n    try {\n      const client = await this.getClient();\n      const result = await client.query(query, params);\n      return result.rows;\n    } catch (error) {\n      console.error('Database query error:', error);\n      throw error;\n    }\n  }\n\n  // Safe update method to prevent SQL injection\n  private async safeUpdate(table: string, id: string, updates: Record<string, string | number | boolean | null>): Promise<void> {\n    try {\n      // Validate table name to prevent SQL injection\n      const allowedTables = ['products', 'customers', 'employees', 'transactions', 'companies'];\n      if (!allowedTables.includes(table)) {\n        throw new Error(`Invalid table name: ${table}`);\n      }\n\n      // Filter out invalid column names and create safe field mapping\n      const validColumns: Record<string, string> = {\n        // Products\n        name: 'name',\n        description: 'description',\n        price: 'price',\n        cost: 'cost',\n        stock: 'stock',\n        category: 'category',\n        barcode: 'barcode',\n        sku: 'sku',\n        image: 'image',\n        min_stock: 'min_stock',\n        unit: 'unit',\n        supplier: 'supplier',\n        tax_rate: 'tax_rate',\n        is_active: 'is_active',\n        \n        // Customers\n        email: 'email',\n        phone: 'phone',\n        address: 'address',\n        city: 'city',\n        state: 'state',\n        zip_code: 'zip_code',\n        country: 'country',\n        notes: 'notes',\n        total_spent: 'total_spent',\n        visit_count: 'visit_count',\n        last_visit: 'last_visit',\n        \n        // Employees\n        employee_id: 'employee_id',\n        position: 'position',\n        salary: 'salary',\n        hire_date: 'hire_date',\n        \n        // Transactions\n        customer_id: 'customer_id',\n        items: 'items',\n        subtotal: 'subtotal',\n        tax: 'tax',\n        discount: 'discount',\n        total: 'total',\n        payment_method: 'payment_method',\n        status: 'status',\n        \n        // Companies\n        logo_url: 'logo_url',\n        tax_id: 'tax_id',\n        gstin: 'gstin'\n      };\n\n      // Filter updates to only include valid columns\n      const validUpdates: Record<string, string | number | boolean | null> = {};\n      for (const [key, value] of Object.entries(updates)) {\n        if (validColumns[key]) {\n          validUpdates[validColumns[key]] = value;\n        }\n      }\n\n      if (Object.keys(validUpdates).length === 0) {\n        console.warn('No valid fields to update');\n        return;\n      }\n\n      // Build safe query with parameterized values\n      const fields = Object.keys(validUpdates).map((key, index) => `${key} = $${index + 2}`).join(', ');\n      const values = Object.values(validUpdates);\n      \n      await this.executeQuery(`\n        UPDATE ${table} \n        SET ${fields}, updated_at = CURRENT_TIMESTAMP \n        WHERE id = $1\n      `, [id, ...values]);\n    } catch (error) {\n      console.error(`Error updating ${table}:`, error);\n      throw error;\n    }\n  }\n\n  // Authentication methods\n  async authenticateCompany(credentials: LoginCredentials): Promise<Company | null> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM companies \n        WHERE email = $1 AND is_active = true\n      `, [credentials.email]);\n\n      if (rows.length === 0) {\n        return null;\n      }\n\n      const company = rows[0];\n      const isValidPassword = await bcryptjs.compare(credentials.password, company.password_hash);\n      \n      if (!isValidPassword) {\n        return null;\n      }\n\n      return {\n        id: company.id,\n        name: company.name,\n        email: company.email,\n        phone: company.phone,\n        address: company.address,\n        city: company.city,\n        state: company.state,\n        zipCode: company.zip_code,\n        country: company.country,\n        taxId: company.tax_id,\n        logoUrl: company.logo_url,\n        isActive: company.is_active,\n        createdAt: new Date(company.created_at),\n        updatedAt: new Date(company.updated_at)\n      };\n    } catch (error) {\n      console.error('Error authenticating company:', error);\n      return null;\n    }\n  }\n\n  async authenticateEmployee(companyId: string, credentials: EmployeeLoginCredentials): Promise<Employee | null> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM employees \n        WHERE company_id = $1 AND employee_id = $2 AND is_active = true\n      `, [companyId, credentials.employeeId]);\n\n      if (rows.length === 0) {\n        return null;\n      }\n\n      const employee = rows[0];\n      const isValidPassword = await bcryptjs.compare(credentials.password, employee.password_hash);\n      \n      if (!isValidPassword) {\n        return null;\n      }\n\n      return {\n        id: employee.id,\n        companyId: employee.company_id,\n        employeeId: employee.employee_id,\n        name: employee.name,\n        email: employee.email,\n        phone: employee.phone,\n        position: employee.position,\n        salary: employee.salary,\n        hireDate: employee.hire_date ? new Date(employee.hire_date) : undefined,\n        isActive: employee.is_active,\n        createdAt: new Date(employee.created_at),\n        updatedAt: new Date(employee.updated_at)\n      };\n    } catch (error) {\n      console.error('Error authenticating employee:', error);\n      return null;\n    }\n  }\n\n  // Products - Enhanced with better error handling and validation\n  async getProducts(companyId: string): Promise<Product[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM products \n        WHERE company_id = $1 AND is_active = true \n        ORDER BY name\n      `, [companyId]);\n      \n      return rows.map(row => ({\n        id: row.id,\n        companyId: row.company_id,\n        name: row.name,\n        description: row.description,\n        price: parseFloat(row.price),\n        cost: parseFloat(row.cost),\n        stock: row.stock,\n        category: row.category,\n        barcode: row.barcode,\n        sku: row.sku,\n        image: row.image,\n        minStock: row.min_stock,\n        unit: row.unit,\n        supplier: row.supplier,\n        taxRate: row.tax_rate,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      }));\n    } catch (error) {\n      console.error('Error getting products:', error);\n      return [];\n    }\n  }\n\n  async addProduct(product: Product): Promise<Product> {\n    try {\n      const productId = product.id || crypto.randomUUID();\n      await this.executeQuery(`\n        INSERT INTO products (id, company_id, name, description, price, cost, stock, category, barcode, sku, image, min_stock, unit, supplier, tax_rate)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n      `, [\n        productId,\n        product.companyId,\n        product.name,\n        product.description,\n        product.price,\n        product.cost,\n        product.stock,\n        product.category,\n        product.barcode,\n        product.sku,\n        product.image,\n        product.minStock,\n        product.unit,\n        product.supplier,\n        product.taxRate\n      ]);\n\n      // Fetch and return the saved product\n      const savedProduct = await this.getProductById(productId);\n      console.log('Product saved successfully:', savedProduct);\n      return savedProduct;\n    } catch (error) {\n      console.error('Error adding product:', error);\n      throw error;\n    }\n  }\n\n  async getProductById(productId: string): Promise<Product | null> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM products WHERE id = $1 AND is_active = true\n      `, [productId]);\n      \n      if (rows.length === 0) return null;\n      \n      const row = rows[0];\n      return {\n        id: row.id,\n        companyId: row.company_id,\n        name: row.name,\n        description: row.description,\n        price: parseFloat(row.price),\n        cost: parseFloat(row.cost),\n        stock: row.stock,\n        category: row.category,\n        barcode: row.barcode,\n        sku: row.sku,\n        image: row.image,\n        minStock: row.min_stock,\n        unit: row.unit,\n        supplier: row.supplier,\n        taxRate: row.tax_rate,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      };\n    } catch (error) {\n      console.error('Error getting product by ID:', error);\n      return null;\n    }\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    try {\n      await this.safeUpdate('products', id, updates);\n      \n      // Fetch and return the updated product\n      const updatedProduct = await this.getProductById(id);\n      if (!updatedProduct) {\n        throw new Error('Product not found after update');\n      }\n      \n      console.log('Product updated successfully:', updatedProduct);\n      return updatedProduct;\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    try {\n      await this.executeQuery(`\n        UPDATE products \n        SET is_active = false, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n      `, [id]);\n      console.log('Product deleted successfully:', id);\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  }\n\n  // Customers - Enhanced with better persistence\n  async getCustomers(companyId: string): Promise<Customer[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM customers \n        WHERE company_id = $1 AND is_active = true \n        ORDER BY name\n      `, [companyId]);\n      \n      return rows.map(row => ({\n        id: row.id,\n        companyId: row.company_id,\n        name: row.name,\n        email: row.email,\n        phone: row.phone,\n        address: row.address,\n        city: row.city,\n        state: row.state,\n        zipCode: row.zip_code,\n        country: row.country,\n        gstin: row.gstin,\n        loyaltyPoints: row.loyalty_points,\n        totalSpent: parseFloat(row.total_spent),\n        visitCount: row.visit_count,\n        lastVisit: row.last_visit ? new Date(row.last_visit) : undefined,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      }));\n    } catch (error) {\n      console.error('Error getting customers:', error);\n      return [];\n    }\n  }\n\n  async getCustomerById(customerId: string): Promise<Customer | null> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM customers WHERE id = $1 AND is_active = true\n      `, [customerId]);\n      \n      if (rows.length === 0) return null;\n      \n      const row = rows[0];\n      return {\n        id: row.id,\n        companyId: row.company_id,\n        name: row.name,\n        email: row.email,\n        phone: row.phone,\n        address: row.address,\n        city: row.city,\n        state: row.state,\n        zipCode: row.zip_code,\n        country: row.country,\n        gstin: row.gstin,\n        loyaltyPoints: row.loyalty_points,\n        totalSpent: parseFloat(row.total_spent),\n        visitCount: row.visit_count,\n        lastVisit: row.last_visit ? new Date(row.last_visit) : undefined,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      };\n    } catch (error) {\n      console.error('Error getting customer by ID:', error);\n      return null;\n    }\n  }\n\n  async addCustomer(customer: Customer): Promise<Customer> {\n    try {\n      const customerId = customer.id || crypto.randomUUID();\n      await this.executeQuery(`\n        INSERT INTO customers (id, company_id, name, email, phone, address, city, state, zip_code, country, gstin, loyalty_points, total_spent, visit_count)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n      `, [\n        customerId,\n        customer.companyId,\n        customer.name,\n        customer.email,\n        customer.phone,\n        customer.address,\n        customer.city,\n        customer.state,\n        customer.zipCode,\n        customer.country,\n        customer.gstin,\n        customer.loyaltyPoints,\n        customer.totalSpent,\n        customer.visitCount\n      ]);\n\n      // Fetch and return the saved customer\n      const savedCustomer = await this.getCustomerById(customerId);\n      console.log('Customer saved successfully:', savedCustomer);\n      return savedCustomer;\n    } catch (error) {\n      console.error('Error adding customer:', error);\n      throw error;\n    }\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer> {\n    try {\n      await this.safeUpdate('customers', id, updates);\n      \n      // Fetch and return the updated customer\n      const updatedCustomer = await this.getCustomerById(id);\n      if (!updatedCustomer) {\n        throw new Error('Customer not found after update');\n      }\n      \n      console.log('Customer updated successfully:', updatedCustomer);\n      return updatedCustomer;\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      throw error;\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    try {\n      await this.executeQuery(`\n        UPDATE customers \n        SET is_active = false, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $1\n      `, [id]);\n      console.log('Customer deleted successfully:', id);\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      throw error;\n    }\n  }\n\n  // Employees\n  async getEmployees(companyId: string): Promise<Employee[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM employees \n        WHERE company_id = $1 AND is_active = true \n        ORDER BY name\n      `, [companyId]);\n      \n      return rows.map(row => ({\n        id: row.id,\n        companyId: row.company_id,\n        employeeId: row.employee_id,\n        name: row.name,\n        email: row.email,\n        phone: row.phone,\n        position: row.position,\n        salary: row.salary,\n        hireDate: row.hire_date ? new Date(row.hire_date) : undefined,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      }));\n    } catch (error) {\n      console.error('Error getting employees:', error);\n      return [];\n    }\n  }\n\n  async addEmployee(employee: Employee): Promise<void> {\n    try {\n      // If a plain password/PIN is provided on the payload, hash and use it.\n      // Fallback to a sensible default for backwards compatibility.\n      const plainPassword = (employee as any).pin || (employee as any).password || 'emp123'\n      const passwordHash = await bcryptjs.hash(plainPassword, config.security.bcryptRounds);\n      await this.executeQuery(`\n        INSERT INTO employees (id, company_id, employee_id, password_hash, name, email, phone, position, salary, hire_date)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n      `, [\n        employee.id,\n        employee.companyId,\n        employee.employeeId,\n        passwordHash,\n        employee.name,\n        employee.email,\n        employee.phone,\n        employee.position,\n        employee.salary,\n        employee.hireDate\n      ]);\n    } catch (error) {\n      console.error('Error adding employee:', error);\n      throw error;\n    }\n  }\n\n  // Transactions - Enhanced with better persistence and stock management\n  async getTransactions(companyId: string): Promise<Transaction[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT t.*, c.name as customer_name, e.name as employee_name \n        FROM transactions t \n        LEFT JOIN customers c ON t.customer_id = c.id \n        LEFT JOIN employees e ON t.employee_id = e.id \n        WHERE t.company_id = $1\n        ORDER BY t.timestamp DESC\n      `, [companyId]);\n      \n      return rows.map(row => ({\n        id: row.id,\n        companyId: row.company_id,\n        customerId: row.customer_id,\n        employeeId: row.employee_id,\n        items: typeof row.items === 'string' ? JSON.parse(row.items) : row.items,\n        subtotal: parseFloat(row.subtotal),\n        tax: parseFloat(row.tax),\n        discount: parseFloat(row.discount),\n        total: parseFloat(row.total),\n        paymentMethod: row.payment_method,\n        paymentDetails: typeof row.payment_details === 'string' ? JSON.parse(row.payment_details) : row.payment_details,\n        status: row.status,\n        notes: row.notes,\n        timestamp: new Date(row.timestamp),\n        customerName: row.customer_name,\n        employeeName: row.employee_name\n      }));\n    } catch (error) {\n      console.error('Error getting transactions:', error);\n      return [];\n    }\n  }\n\n  async getTransactionById(transactionId: string): Promise<Transaction | null> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT t.*, c.name as customer_name, e.name as employee_name \n        FROM transactions t \n        LEFT JOIN customers c ON t.customer_id = c.id \n        LEFT JOIN employees e ON t.employee_id = e.id \n        WHERE t.id = $1\n      `, [transactionId]);\n      \n      if (rows.length === 0) return null;\n      \n      const row = rows[0];\n      return {\n        id: row.id,\n        companyId: row.company_id,\n        customerId: row.customer_id,\n        employeeId: row.employee_id,\n        items: typeof row.items === 'string' ? JSON.parse(row.items) : row.items,\n        subtotal: parseFloat(row.subtotal),\n        tax: parseFloat(row.tax),\n        discount: parseFloat(row.discount),\n        total: parseFloat(row.total),\n        paymentMethod: row.payment_method,\n        paymentDetails: typeof row.payment_details === 'string' ? JSON.parse(row.payment_details) : row.payment_details,\n        status: row.status,\n        notes: row.notes,\n        timestamp: new Date(row.timestamp),\n        customerName: row.customer_name,\n        employeeName: row.employee_name\n      };\n    } catch (error) {\n      console.error('Error getting transaction by ID:', error);\n      return null;\n    }\n  }\n\n  async addTransaction(transaction: Transaction): Promise<Transaction> {\n    try {\n      const transactionId = transaction.id || crypto.randomUUID();\n      \n      // Start a transaction to ensure data consistency\n      const client = await this.getClient();\n      \n      try {\n        await client.query('BEGIN');\n        \n        // Insert the transaction\n        await this.executeQuery(`\n          INSERT INTO transactions (id, company_id, customer_id, employee_id, items, subtotal, tax, discount, total, payment_method, payment_details, status, notes)\n          VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)\n        `, [\n          transactionId,\n          transaction.companyId,\n          transaction.customerId,\n          transaction.employeeId,\n          JSON.stringify(transaction.items),\n          transaction.subtotal,\n          transaction.tax,\n          transaction.discount,\n          transaction.total,\n          transaction.paymentMethod,\n          JSON.stringify(transaction.paymentDetails),\n          transaction.status,\n          transaction.notes\n        ]);\n\n        // Update product stock levels\n        if (Array.isArray(transaction.items)) {\n          for (const item of transaction.items) {\n            await this.executeQuery(`\n              UPDATE products \n              SET stock = stock - $1, updated_at = CURRENT_TIMESTAMP\n              WHERE id = $2 AND company_id = $3\n            `, [item.quantity, item.productId, transaction.companyId]);\n          }\n        }\n\n        // Update customer statistics\n        if (transaction.customerId) {\n          await this.executeQuery(`\n            UPDATE customers \n            SET total_spent = total_spent + $1, \n                visit_count = visit_count + 1,\n                last_visit = CURRENT_TIMESTAMP,\n                updated_at = CURRENT_TIMESTAMP\n            WHERE id = $2\n          `, [transaction.total, transaction.customerId]);\n        }\n\n        await client.query('COMMIT');\n        \n        // Fetch and return the saved transaction\n        const savedTransaction = await this.getTransactionById(transactionId);\n        console.log('Transaction saved successfully:', savedTransaction);\n        return savedTransaction;\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      throw error;\n    }\n  }\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction> {\n    try {\n      await this.safeUpdate('transactions', id, updates);\n      \n      // Fetch and return the updated transaction\n      const updatedTransaction = await this.getTransactionById(id);\n      if (!updatedTransaction) {\n        throw new Error('Transaction not found after update');\n      }\n      \n      console.log('Transaction updated successfully:', updatedTransaction);\n      return updatedTransaction;\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    try {\n      // Get the transaction first to restore stock\n      const transaction = await this.getTransactionById(id);\n      if (!transaction) {\n        throw new Error('Transaction not found');\n      }\n\n      const client = await this.getClient();\n      \n      try {\n        await client.query('BEGIN');\n        \n        // Restore product stock levels\n        if (Array.isArray(transaction.items)) {\n          for (const item of transaction.items) {\n            await this.executeQuery(`\n              UPDATE products \n              SET stock = stock + $1, updated_at = CURRENT_TIMESTAMP\n              WHERE id = $2 AND company_id = $3\n            `, [item.quantity, item.productId, transaction.companyId]);\n          }\n        }\n\n        // Update customer statistics (subtract the transaction)\n        if (transaction.customerId) {\n          await this.executeQuery(`\n            UPDATE customers \n            SET total_spent = total_spent - $1, \n                visit_count = GREATEST(visit_count - 1, 0),\n                updated_at = CURRENT_TIMESTAMP\n            WHERE id = $2\n          `, [transaction.total, transaction.customerId]);\n        }\n\n        // Mark transaction as deleted\n        await this.executeQuery(`\n          UPDATE transactions \n          SET status = 'cancelled', updated_at = CURRENT_TIMESTAMP\n          WHERE id = $1\n        `, [id]);\n\n        await client.query('COMMIT');\n        console.log('Transaction deleted successfully:', id);\n      } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      throw error;\n    }\n  }\n\n  // Settings\n  async getSettings(companyId: string): Promise<Record<string, string>> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT key, value FROM settings WHERE company_id = $1\n      `, [companyId]);\n      const settings: Record<string, string> = {};\n      rows.forEach(row => {\n        settings[row.key] = row.value;\n      });\n      return settings;\n    } catch (error) {\n      console.error('Error getting settings:', error);\n      return {};\n    }\n  }\n\n  async updateSettings(companyId: string, settings: Record<string, string>): Promise<void> {\n    try {\n      for (const [key, value] of Object.entries(settings)) {\n        await this.executeQuery(`\n          INSERT INTO settings (company_id, key, value)\n          VALUES ($1, $2, $3)\n          ON CONFLICT (company_id, key) DO UPDATE SET value = EXCLUDED.value\n        `, [companyId, key, value]);\n      }\n    } catch (error) {\n      console.error('Error updating settings:', error);\n      throw error;\n    }\n  }\n\n  // Analytics and Reports\n  async getSalesReport(companyId: string, startDate?: Date, endDate?: Date): Promise<unknown[]> {\n    try {\n      let query = `\n        SELECT \n          DATE(timestamp) as date,\n          COUNT(*) as transaction_count,\n          SUM(total) as total_sales,\n          SUM(tax) as total_tax,\n          SUM(discount) as total_discount\n        FROM transactions \n        WHERE company_id = $1 AND status = 'completed'\n      `;\n      \n      const params: (string | Date)[] = [companyId];\n      if (startDate && endDate) {\n        query += ` AND timestamp BETWEEN $2 AND $3`;\n        params.push(startDate, endDate);\n      }\n      \n      query += ` GROUP BY DATE(timestamp) ORDER BY date DESC`;\n      \n      const rows = await this.executeQuery(query, params);\n      return rows;\n    } catch (error) {\n      console.error('Error getting sales report:', error);\n      return [];\n    }\n  }\n\n  async getTopProducts(companyId: string, limit: number = 10): Promise<unknown[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT \n          p.name,\n          p.sku,\n          COUNT(*) as times_sold,\n          SUM(CAST(item->>'quantity' AS INTEGER)) as total_quantity_sold\n        FROM transactions t,\n        jsonb_array_elements(t.items) as item\n        JOIN products p ON item->>'productId' = p.id\n        WHERE t.company_id = $1 AND t.status = 'completed'\n        GROUP BY p.id, p.name, p.sku\n        ORDER BY total_quantity_sold DESC\n        LIMIT $2\n      `, [companyId, limit]);\n      \n      return rows;\n    } catch (error) {\n      console.error('Error getting top products:', error);\n      return [];\n    }\n  }\n\n  async getLowStockProducts(companyId: string, threshold: number = 10): Promise<Product[]> {\n    try {\n      const rows = await this.executeQuery(`\n        SELECT * FROM products \n        WHERE company_id = $1 AND stock <= $2 AND is_active = true\n        ORDER BY stock ASC\n      `, [companyId, threshold]);\n      \n      return rows.map(row => ({\n        id: row.id,\n        companyId: row.company_id,\n        name: row.name,\n        description: row.description,\n        price: parseFloat(row.price),\n        cost: parseFloat(row.cost),\n        stock: row.stock,\n        category: row.category,\n        barcode: row.barcode,\n        sku: row.sku,\n        image: row.image,\n        isActive: row.is_active,\n        createdAt: new Date(row.created_at),\n        updatedAt: new Date(row.updated_at)\n      }));\n    } catch (error) {\n      console.error('Error getting low stock products:', error);\n      return [];\n    }\n  }\n\n  // Stock Management\n  async updateProductStock(productId: string, quantity: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      const operator = operation === 'add' ? '+' : '-';\n      await this.executeQuery(`\n        UPDATE products \n        SET stock = stock ${operator} $1, updated_at = CURRENT_TIMESTAMP\n        WHERE id = $2\n      `, [quantity, productId]);\n      \n      console.log(`Product stock ${operation}ed successfully:`, { productId, quantity, operation });\n    } catch (error) {\n      console.error('Error updating product stock:', error);\n      throw error;\n    }\n  }\n\n  // Customer Statistics\n  async updateCustomerStats(customerId: string, amount: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      const operator = operation === 'add' ? '+' : '-';\n      await this.executeQuery(`\n        UPDATE customers \n        SET total_spent = total_spent ${operator} $1, \n            visit_count = visit_count ${operator === '+' ? '+' : '-'} 1,\n            last_visit = CURRENT_TIMESTAMP,\n            updated_at = CURRENT_TIMESTAMP\n        WHERE id = $2\n      `, [amount, customerId]);\n      \n      console.log(`Customer stats ${operation}ed successfully:`, { customerId, amount, operation });\n    } catch (error) {\n      console.error('Error updating customer stats:', error);\n      throw error;\n    }\n  }\n\n  // Close connection\n  async close(): Promise<void> {\n    if (this.client) {\n      await this.client.end();\n      this.client = null;\n      console.log('PostgreSQL database connection closed.');\n    }\n  }\n}\n\n// Export singleton instance\nexport const postgresDatabaseService = new PostgresDatabaseService();","size_bytes":29599},"client/src/lib/printDrivers.ts":{"content":"import { Transaction } from './types';\nimport { getCompanySettings, getPrintSettings } from './storage';\n\nexport interface PrintOptions {\n  paperSize: 'thermal' | 'a4';\n  copies: number;\n  autocut: boolean;\n  cashdraw: boolean;\n}\n\nexport class ThermalPrintDriver {\n  private static instance: ThermalPrintDriver;\n  \n  static getInstance(): ThermalPrintDriver {\n    if (!ThermalPrintDriver.instance) {\n      ThermalPrintDriver.instance = new ThermalPrintDriver();\n    }\n    return ThermalPrintDriver.instance;\n  }\n\n  // ESC/POS Commands for thermal printers\n  private commands = {\n    INIT: '\\x1B\\x40',           // Initialize printer\n    CUT: '\\x1D\\x56\\x41',        // Cut paper\n    CASH_DRAWER: '\\x1B\\x70\\x00\\x19\\xFA', // Open cash drawer\n    ALIGN_CENTER: '\\x1B\\x61\\x01',\n    ALIGN_LEFT: '\\x1B\\x61\\x00',\n    ALIGN_RIGHT: '\\x1B\\x61\\x02',\n    BOLD_ON: '\\x1B\\x45\\x01',\n    BOLD_OFF: '\\x1B\\x45\\x00',\n    UNDERLINE_ON: '\\x1B\\x2D\\x01',\n    UNDERLINE_OFF: '\\x1B\\x2D\\x00',\n    DOUBLE_HEIGHT: '\\x1B\\x21\\x10',\n    DOUBLE_WIDTH: '\\x1B\\x21\\x20',\n    NORMAL_SIZE: '\\x1B\\x21\\x00',\n    LINE_FEED: '\\x0A',\n  };\n\n  async print(transaction: Transaction, options: Partial<PrintOptions> = {}): Promise<boolean> {\n    const defaultOptions: PrintOptions = {\n      paperSize: 'thermal',\n      copies: 1,\n      autocut: true,\n      cashdraw: true\n    };\n    \n    const printOptions = { ...defaultOptions, ...options };\n    \n    if (printOptions.paperSize === 'thermal') {\n      return this.printThermal(transaction, printOptions);\n    } else {\n      return this.printA4(transaction, printOptions);\n    }\n  }\n\n  private async printThermal(transaction: Transaction, options: PrintOptions): Promise<boolean> {\n    try {\n      // Only use web printing (browser print dialog)\n      return this.printViaWeb(transaction, options);\n    } catch (error) {\n      console.error('Thermal printing failed:', error);\n      return false;\n    }\n  }\n\n  private async printViaWeb(transaction: Transaction, options: PrintOptions): Promise<boolean> {\n    console.log('[PrintDriver] printViaWeb called', { transaction, options });\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return false;\n\n    const companySettings = getCompanySettings();\n    const printSettings = getPrintSettings();\n\n    const receiptHTML = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Receipt</title>\n          <style>\n            * { \n              margin: 0; \n              padding: 0; \n              box-sizing: border-box; \n              color: #000 !important;\n            }\n            body {\n              font-family: 'Courier New', monospace;\n              width: 80mm;\n              margin: 0;\n              padding: 5mm;\n              font-size: 11px;\n              line-height: 1.2;\n              background: white;\n              color: #000;\n              font-weight: 500;\n            }\n            .center { text-align: center; }\n            .bold { font-weight: bold; }\n            .large { font-size: 14px; font-weight: bold; }\n            .medium { font-size: 12px; }\n            .small { font-size: 10px; }\n            .line { \n              border-bottom: 1px solid #000; \n              margin: 3px 0; \n              height: 1px;\n              background: #000;\n            }\n            .row { \n              display: flex; \n              justify-content: space-between; \n              margin: 2px 0; \n              align-items: center;\n            }\n            .item-row {\n              margin: 3px 0;\n              border-bottom: 1px dotted #333;\n              padding-bottom: 2px;\n            }\n            .item-name {\n              font-weight: bold;\n              margin-bottom: 1px;\n            }\n            .item-details {\n              font-size: 9px;\n              color: #333;\n              margin-left: 2px;\n            }\n            .total-section {\n              border-top: 2px solid #000;\n              margin-top: 5px;\n              padding-top: 5px;\n            }\n            .payment-info {\n              background: #f0f0f0;\n              padding: 3px;\n              margin: 5px 0;\n              border: 1px solid #000;\n            }\n            .footer-text {\n              text-align: center;\n              margin-top: 8px;\n              font-size: 9px;\n              color: #333;\n              border-top: 1px solid #000;\n              padding-top: 5px;\n            }\n            @media print {\n              body { \n                margin: 0 !important; \n                padding: 2mm !important; \n                width: 80mm !important;\n                font-size: 11px !important;\n                color: #000 !important;\n                background: white !important;\n              }\n              @page { \n                margin: 0 !important; \n                size: 80mm auto !important;\n              }\n              * {\n                color: #000 !important;\n                background: transparent !important;\n              }\n              .payment-info {\n                background: #f0f0f0 !important;\n                border: 1px solid #000 !important;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"center\">\n            <div class=\"large\">${companySettings.name}</div>\n            <div class=\"small\">${companySettings.address}</div>\n            <div class=\"small\">Phone: ${companySettings.phone}</div>\n            ${companySettings.email ? `<div class=\"small\">Email: ${companySettings.email}</div>` : ''}\n            ${companySettings.taxId ? `<div class=\"small\">GST: ${companySettings.taxId}</div>` : ''}\n          </div>\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"medium\">\n            <div class=\"row\">\n              <span>Receipt #:</span>\n              <span>${transaction.id.slice(-8)}</span>\n            </div>\n            <div class=\"row\">\n              <span>Date:</span>\n              <span>${new Date(transaction.timestamp).toLocaleDateString()}</span>\n            </div>\n            <div class=\"row\">\n              <span>Time:</span>\n              <span>${new Date(transaction.timestamp).toLocaleTimeString()}</span>\n            </div>\n            ${transaction.customerName ? `\n              <div class=\"row\">\n                <span>Customer:</span>\n                <span>${transaction.customerName}</span>\n              </div>\n            ` : ''}\n          </div>\n          \n          <div class=\"line\"></div>\n          \n          ${transaction.items.map(item => `\n            <div class=\"item-row\">\n              <div class=\"item-name\">${item.product.name}</div>\n              <div class=\"row\">\n                <span class=\"item-details\">${item.quantity} x ₹${item.product.price.toFixed(2)}</span>\n                <span class=\"bold\">₹${(item.product.price * item.quantity).toFixed(2)}</span>\n              </div>\n            </div>\n          `).join('')}\n          \n          <div class=\"line\"></div>\n          \n          <div class=\"total-section\">\n            <div class=\"row\">\n              <span class=\"bold\">SUBTOTAL:</span>\n              <span class=\"bold\">₹${transaction.subtotal.toFixed(2)}</span>\n            </div>\n            ${transaction.tax > 0 ? `\n              <div class=\"row\">\n                <span>GST (18%):</span>\n                <span>₹${transaction.tax.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            ${transaction.discount > 0 ? `\n              <div class=\"row\">\n                <span>Discount:</span>\n                <span>-₹${transaction.discount.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            <div class=\"row large\">\n              <span>TOTAL:</span>\n              <span>₹${transaction.total.toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div class=\"payment-info\">\n            <div class=\"row\">\n              <span class=\"bold\">Payment Method:</span>\n              <span class=\"bold\">${transaction.paymentMethod.toUpperCase()}</span>\n            </div>\n            ${transaction.paymentMethod === 'cash' && transaction.paymentDetails?.cashAmount ? `\n              <div class=\"row\">\n                <span>Cash Received:</span>\n                <span>₹${transaction.paymentDetails.cashAmount.toFixed(2)}</span>\n              </div>\n              ${transaction.paymentDetails.change ? `\n                <div class=\"row\">\n                  <span>Change:</span>\n                  <span>₹${transaction.paymentDetails.change.toFixed(2)}</span>\n                </div>\n              ` : ''}\n            ` : ''}\n            ${transaction.paymentMethod === 'card' && transaction.receipt ? `\n              <div class=\"row\">\n                <span>Transaction ID:</span>\n                <span>${transaction.receipt}</span>\n              </div>\n            ` : ''}\n          </div>\n          \n          <div class=\"footer-text\">\n            <div>Thank you for your business!</div>\n            <div>${printSettings.footer || 'Please visit again'}</div>\n            <div style=\"margin-top: 5px;\">Generated by Sales Channel PoS</div>\n          </div>\n          \n          <script>\n            window.onload = function() {\n              // Print multiple copies if specified\n              for (let i = 0; i < ${options.copies}; i++) {\n                setTimeout(() => {\n                  window.print();\n                }, i * 1000);\n              }\n              setTimeout(() => window.close(), 2000);\n            }\n          </script>\n        </body>\n      </html>\n    `;\n    console.log('[PrintDriver] Generated receipt HTML:', receiptHTML);\n    printWindow.document.write(receiptHTML);\n    printWindow.document.close();\n    console.log('[PrintDriver] Receipt HTML written to print window.');\n    return true;\n  }\n\n  private async printA4(transaction: Transaction, options: PrintOptions): Promise<boolean> {\n    // A4 printing logic for standard printers\n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return false;\n\n    const companySettings = getCompanySettings();\n    const printSettings = getPrintSettings();\n\n    const invoiceHTML = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <title>Invoice - ${transaction.id}</title>\n          <style>\n            * {\n              color: #000 !important;\n              box-sizing: border-box;\n            }\n            body {\n              font-family: 'Times New Roman', serif;\n              max-width: 210mm;\n              margin: 0 auto;\n              padding: 15mm;\n              font-size: 12px;\n              line-height: 1.4;\n              color: #000;\n              background: white;\n            }\n            .header {\n              text-align: center;\n              border-bottom: 3px solid #000;\n              padding-bottom: 10px;\n              margin-bottom: 15px;\n            }\n            .company-name {\n              font-size: 20px;\n              font-weight: bold;\n              margin-bottom: 5px;\n              color: #000;\n            }\n            .company-details {\n              font-size: 11px;\n              color: #000;\n            }\n            .invoice-details {\n              display: grid;\n              grid-template-columns: 1fr 1fr;\n              gap: 15px;\n              margin-bottom: 15px;\n              font-size: 11px;\n            }\n            .invoice-details h3 {\n              font-size: 13px;\n              font-weight: bold;\n              margin-bottom: 5px;\n              color: #000;\n              border-bottom: 1px solid #000;\n              padding-bottom: 2px;\n            }\n            .items-table {\n              width: 100%;\n              border-collapse: collapse;\n              margin-bottom: 15px;\n              font-size: 11px;\n            }\n            .items-table th,\n            .items-table td {\n              border: 1px solid #000;\n              padding: 6px;\n              text-align: left;\n              color: #000;\n            }\n            .items-table th {\n              background-color: #f0f0f0;\n              font-weight: bold;\n              color: #000;\n            }\n            .items-table td {\n              vertical-align: top;\n            }\n            .total-section {\n              margin-left: auto;\n              width: 250px;\n              border: 2px solid #000;\n              padding: 10px;\n              background: #f9f9f9;\n            }\n            .total-row {\n              display: flex;\n              justify-content: space-between;\n              margin-bottom: 3px;\n              font-size: 11px;\n            }\n            .total-final {\n              font-weight: bold;\n              font-size: 14px;\n              border-top: 2px solid #000;\n              padding-top: 5px;\n              margin-top: 5px;\n            }\n            .payment-info {\n              margin-top: 10px;\n              padding: 8px;\n              border: 1px solid #000;\n              background: #f0f0f0;\n              font-size: 11px;\n            }\n            .footer {\n              text-align: center;\n              margin-top: 20px;\n              color: #000;\n              font-size: 10px;\n              border-top: 1px solid #000;\n              padding-top: 10px;\n            }\n            .sku {\n              font-size: 9px;\n              color: #333;\n              font-style: italic;\n            }\n            @media print {\n              body { \n                margin: 0; \n                padding: 10mm; \n                font-size: 12px !important;\n                color: #000 !important;\n                background: white !important;\n              }\n              @page { \n                margin: 10mm; \n                size: A4;\n              }\n              * {\n                color: #000 !important;\n              }\n              .total-section {\n                background: #f9f9f9 !important;\n                border: 2px solid #000 !important;\n              }\n              .payment-info {\n                background: #f0f0f0 !important;\n                border: 1px solid #000 !important;\n              }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <div class=\"company-name\">${companySettings.name}</div>\n            <div class=\"company-details\">${companySettings.address}</div>\n            <div class=\"company-details\">Phone: ${companySettings.phone} | Email: ${companySettings.email}</div>\n            ${companySettings.taxId ? `<div class=\"company-details\">GST: ${companySettings.taxId}</div>` : ''}\n          </div>\n          \n          <div class=\"invoice-details\">\n            <div>\n              <h3>INVOICE DETAILS</h3>\n              <div><strong>Invoice #:</strong> ${transaction.id}</div>\n              <div><strong>Date:</strong> ${new Date(transaction.timestamp).toLocaleDateString()}</div>\n              <div><strong>Time:</strong> ${new Date(transaction.timestamp).toLocaleTimeString()}</div>\n            </div>\n            <div>\n              <h3>CUSTOMER DETAILS</h3>\n              ${transaction.customerName ? `<div><strong>Name:</strong> ${transaction.customerName}</div>` : ''}\n              <div><strong>Payment Method:</strong> ${transaction.paymentMethod.toUpperCase()}</div>\n            </div>\n          </div>\n          \n          <table class=\"items-table\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Qty</th>\n                <th>Unit Price</th>\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              ${transaction.items.map(item => `\n                <tr>\n                  <td>\n                    <strong>${item.product.name}</strong>\n                    ${item.product.sku ? `<br><span class=\"sku\">SKU: ${item.product.sku}</span>` : ''}\n                  </td>\n                  <td>${item.quantity}</td>\n                  <td>₹${item.product.price.toFixed(2)}</td>\n                  <td><strong>₹${(item.product.price * item.quantity).toFixed(2)}</strong></td>\n                </tr>\n              `).join('')}\n            </tbody>\n          </table>\n          \n          <div class=\"total-section\">\n            <div class=\"total-row\">\n              <span>Subtotal:</span>\n              <span>₹${transaction.subtotal.toFixed(2)}</span>\n            </div>\n            ${transaction.tax > 0 ? `\n              <div class=\"total-row\">\n                <span>GST (18%):</span>\n                <span>₹${transaction.tax.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            ${transaction.discount > 0 ? `\n              <div class=\"total-row\">\n                <span>Discount:</span>\n                <span>-₹${transaction.discount.toFixed(2)}</span>\n              </div>\n            ` : ''}\n            <div class=\"total-row total-final\">\n              <span>TOTAL AMOUNT:</span>\n              <span>₹${transaction.total.toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div class=\"payment-info\">\n            <div><strong>Payment Details:</strong></div>\n            ${transaction.paymentMethod === 'cash' && transaction.paymentDetails?.cashAmount ? `\n              <div>Cash Received: ₹${transaction.paymentDetails.cashAmount.toFixed(2)}</div>\n              ${transaction.paymentDetails.change ? `<div>Change: ₹${transaction.paymentDetails.change.toFixed(2)}</div>` : ''}\n            ` : ''}\n            ${transaction.paymentMethod === 'card' && transaction.receipt ? `\n              <div>Transaction ID: ${transaction.receipt}</div>\n            ` : ''}\n          </div>\n          \n          <div class=\"footer\">\n            <div><strong>${printSettings.header || 'Thank you for your business!'}</strong></div>\n            <div>${printSettings.footer || 'Please visit again'}</div>\n            <div style=\"margin-top: 5px;\">Generated by Sales Channel PoS System</div>\n          </div>\n          \n          <script>\n            window.onload = function() {\n              window.print();\n              setTimeout(() => window.close(), 1000);\n            }\n          </script>\n        </body>\n      </html>\n    `;\n\n    printWindow.document.write(invoiceHTML);\n    printWindow.document.close();\n    return true;\n  }\n\n  // Test printer connection\n  async testPrint(): Promise<boolean> {\n    try {\n      const testTransaction: Transaction = {\n        id: 'TEST-' + Date.now(),\n        items: [{\n          product: {\n            id: 'test',\n            name: 'Test Item',\n            price: 1.00,\n            cost: 0.50,\n            sku: 'TEST001',\n            category: 'Test',\n            stock: 999,\n            minStock: 1,\n            taxRate: 0,\n            isActive: true,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          quantity: 1\n        }],\n        subtotal: 1.00,\n        tax: 0,\n        discount: 0,\n        total: 1.00,\n        paymentMethod: 'cash',\n        paymentDetails: {\n          cashAmount: 1.00,\n          change: 0\n        },\n        timestamp: new Date(),\n        status: 'completed'\n      };\n\n      return await this.print(testTransaction, { copies: 1, autocut: false, cashdraw: false });\n    } catch (error) {\n      console.error('Test print failed:', error);\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const printDriver = ThermalPrintDriver.getInstance();","size_bytes":19317},"client/src/lib/storage.ts":{"content":"import { dataSyncService } from './data-sync';\nimport { Product, Customer, Transaction, Employee } from './types';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Settings interfaces\nexport interface CompanySettings {\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  pinCode: string;\n  country: string;\n  email: string;\n  phone: string;\n  taxId: string;\n  gstin: string;\n  taxationMethod: 'gst' | 'vat' | 'none';\n  currency: string;\n  logo?: string;\n}\n\nexport interface PrintTemplateSettings {\n  template: 'default' | 'modern' | 'classic';\n  fontSize: 'small' | 'medium' | 'large';\n  showLogo: boolean;\n  showQRCode: boolean;\n  headerText: string;\n  footerText: string;\n}\n\n// Enhanced storage service that ensures all data is saved to server\nexport class EnhancedStorageService {\n  private static instance: EnhancedStorageService;\n\n  private constructor() {}\n\n  static getInstance(): EnhancedStorageService {\n    if (!EnhancedStorageService.instance) {\n      EnhancedStorageService.instance = new EnhancedStorageService();\n    }\n    return EnhancedStorageService.instance;\n  }\n\n  // Product Operations\n  async getProducts(companyId: string): Promise<Product[]> {\n    try {\n      return await dataSyncService.syncProducts(companyId);\n    } catch (error) {\n      console.error('Error getting products:', error);\n      return [];\n    }\n  }\n\n  async saveProduct(product: Product): Promise<Product> {\n    try {\n      return await dataSyncService.saveProduct(product);\n    } catch (error) {\n      console.error('Error saving product:', error);\n      throw error;\n    }\n  }\n\n  async updateProduct(id: string, updates: Partial<Product>): Promise<Product> {\n    try {\n      return await dataSyncService.updateProduct(id, updates);\n    } catch (error) {\n      console.error('Error updating product:', error);\n      throw error;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    try {\n      await dataSyncService.deleteProduct(id);\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      throw error;\n    }\n  }\n\n  // Customer Operations\n  async getCustomers(companyId: string): Promise<Customer[]> {\n    try {\n      return await dataSyncService.syncCustomers(companyId);\n    } catch (error) {\n      console.error('Error getting customers:', error);\n      return [];\n    }\n  }\n\n  async saveCustomer(customer: Customer): Promise<Customer> {\n    try {\n      return await dataSyncService.saveCustomer(customer);\n    } catch (error) {\n      console.error('Error saving customer:', error);\n      throw error;\n    }\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer> {\n    try {\n      return await dataSyncService.updateCustomer(id, updates);\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      throw error;\n    }\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    try {\n      await dataSyncService.deleteCustomer(id);\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n      throw error;\n    }\n  }\n\n  // Transaction Operations\n  async getTransactions(companyId: string): Promise<Transaction[]> {\n    try {\n      return await dataSyncService.syncTransactions(companyId);\n    } catch (error) {\n      console.error('Error getting transactions:', error);\n      return [];\n    }\n  }\n\n  async saveTransaction(transaction: Transaction): Promise<Transaction> {\n    try {\n      return await dataSyncService.saveTransaction(transaction);\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      throw error;\n    }\n  }\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction> {\n    try {\n      return await dataSyncService.updateTransaction(id, updates);\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      throw error;\n    }\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    try {\n      await dataSyncService.deleteTransaction(id);\n    } catch (error) {\n      console.error('Error deleting transaction:', error);\n      throw error;\n    }\n  }\n\n  // Employee Operations\n  async getEmployees(companyId: string): Promise<Employee[]> {\n    try {\n      return await dataSyncService.syncEmployees(companyId);\n    } catch (error) {\n      console.error('Error getting employees:', error);\n      return [];\n    }\n  }\n\n  async saveEmployee(employee: Employee): Promise<void> {\n    try {\n      await dataSyncService.saveEmployee(employee);\n    } catch (error) {\n      console.error('Error saving employee:', error);\n      throw error;\n    }\n  }\n\n  // Stock Management\n  async updateProductStock(productId: string, quantity: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      await dataSyncService.updateProductStock(productId, quantity, operation);\n    } catch (error) {\n      console.error('Error updating product stock:', error);\n      throw error;\n    }\n  }\n\n  // Customer Statistics\n  async updateCustomerStats(customerId: string, amount: number, operation: 'add' | 'subtract'): Promise<void> {\n    try {\n      await dataSyncService.updateCustomerStats(customerId, amount, operation);\n    } catch (error) {\n      console.error('Error updating customer stats:', error);\n      throw error;\n    }\n  }\n\n  // Batch Operations\n  async syncAllData(companyId: string) {\n    try {\n      return await dataSyncService.syncAllData(companyId);\n    } catch (error) {\n      console.error('Error syncing all data:', error);\n      throw error;\n    }\n  }\n\n  // Health Check\n  async healthCheck(): Promise<boolean> {\n    return await dataSyncService.healthCheck();\n  }\n}\n\n// Export singleton instance\nexport const enhancedStorageService = EnhancedStorageService.getInstance();\n\n// Legacy functions for backward compatibility\nexport const getProducts = async (companyId: string): Promise<Product[]> => {\n  return await enhancedStorageService.getProducts(companyId);\n};\n\nexport const saveProduct = async (product: Product): Promise<Product> => {\n  return await enhancedStorageService.saveProduct(product);\n};\n\nexport const updateProduct = async (id: string, updates: Partial<Product>): Promise<Product> => {\n  return await enhancedStorageService.updateProduct(id, updates);\n};\n\nexport const deleteProduct = async (id: string): Promise<void> => {\n  return await enhancedStorageService.deleteProduct(id);\n};\n\nexport const getCustomers = async (companyId: string): Promise<Customer[]> => {\n  return await enhancedStorageService.getCustomers(companyId);\n};\n\nexport const saveCustomer = async (customer: Customer): Promise<Customer> => {\n  return await enhancedStorageService.saveCustomer(customer);\n};\n\nexport const updateCustomer = async (id: string, updates: Partial<Customer>): Promise<Customer> => {\n  return await enhancedStorageService.updateCustomer(id, updates);\n};\n\nexport const deleteCustomer = async (id: string): Promise<void> => {\n  return await enhancedStorageService.deleteCustomer(id);\n};\n\nexport const getTransactions = async (companyId: string): Promise<Transaction[]> => {\n  return await enhancedStorageService.getTransactions(companyId);\n};\n\nexport const saveTransaction = async (transaction: Transaction): Promise<Transaction> => {\n  return await enhancedStorageService.saveTransaction(transaction);\n};\n\nexport const updateTransaction = async (id: string, updates: Partial<Transaction>): Promise<Transaction> => {\n  return await enhancedStorageService.updateTransaction(id, updates);\n};\n\nexport const deleteTransaction = async (id: string): Promise<void> => {\n  return await enhancedStorageService.deleteTransaction(id);\n};\n\nexport const getEmployees = async (companyId: string): Promise<Employee[]> => {\n  return await enhancedStorageService.getEmployees(companyId);\n};\n\nexport const saveEmployee = async (employee: Employee): Promise<void> => {\n  return await enhancedStorageService.saveEmployee(employee);\n};\n\nexport const initializeSampleData = async (): Promise<void> => {\n  // This is a placeholder function to fix a build error.\n  // It is not intended to be used.\n  console.warn(\"initializeSampleData is a deprecated function.\");\n};\n\n// Settings functions\nexport const getCompanySettings = (): CompanySettings => {\n  try {\n    const saved = localStorage.getItem('company_settings');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n  } catch (error) {\n    console.error('Error loading company settings:', error);\n  }\n  \n  // Return default settings\n  return {\n    name: 'ACE Business',\n    address: '123 Business Street',\n    city: 'Business City',\n    state: 'Business State',\n    pinCode: '12345',\n    country: 'India',\n    email: 'info@acebusiness.com',\n    phone: '+91 98765 43210',\n    taxId: 'GST123456789',\n    gstin: 'GST123456789',\n    taxationMethod: 'gst',\n    currency: 'INR'\n  };\n};\n\nexport const getPrintSettings = (): PrintTemplateSettings => {\n  try {\n    const saved = localStorage.getItem('print_settings');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n  } catch (error) {\n    console.error('Error loading print settings:', error);\n  }\n  \n  // Return default print settings\n  return {\n    template: 'default',\n    fontSize: 'medium',\n    showLogo: true,\n    showQRCode: true,\n    headerText: 'Thank you for your business!',\n    footerText: 'Please visit again!'\n  };\n};\n\n// Employee ID settings functions\nexport const getEmployeeIdSettings = () => {\n  try {\n    const saved = localStorage.getItem('employee_id_settings');\n    if (saved) {\n      return JSON.parse(saved);\n    }\n  } catch (error) {\n    console.error('Error loading employee ID settings:', error);\n  }\n  \n  return {\n    prefix: 'EMP',\n    nextNumber: 1,\n    format: 'EMP{number}'\n  };\n};\n\nexport const setEmployeeIdSettings = (settings: any) => {\n  try {\n    localStorage.setItem('employee_id_settings', JSON.stringify(settings));\n  } catch (error) {\n    console.error('Error saving employee ID settings:', error);\n  }\n};\n\n// Employee management functions\nexport const addEmployee = async (employee: Employee): Promise<void> => {\n  try {\n    // For now, just log the employee data\n    console.log('Adding employee:', employee);\n    // In a real implementation, this would save to the database\n  } catch (error) {\n    console.error('Error adding employee:', error);\n    throw error;\n  }\n};\n\nexport const updateEmployee = async (id: string, employee: Employee): Promise<void> => {\n  try {\n    // For now, just log the update\n    console.log('Updating employee:', id, employee);\n    // In a real implementation, this would update the database\n  } catch (error) {\n    console.error('Error updating employee:', error);\n    throw error;\n  }\n};\n\nexport const deleteEmployee = async (id: string): Promise<void> => {\n  try {\n    // For now, just log the deletion\n    console.log('Deleting employee:', id);\n    // In a real implementation, this would delete from the database\n  } catch (error) {\n    console.error('Error deleting employee:', error);\n    throw error;\n  }\n};\n\nexport const generateNextEmployeeId = async (): Promise<string> => {\n  try {\n    const settings = getEmployeeIdSettings();\n    const nextId = `${settings.prefix}${String(settings.nextNumber).padStart(3, '0')}`;\n    \n    // Update the next number\n    setEmployeeIdSettings({\n      ...settings,\n      nextNumber: settings.nextNumber + 1\n    });\n    \n    return nextId;\n  } catch (error) {\n    console.error('Error generating employee ID:', error);\n    return 'EMP001';\n  }\n};\n\n// Support functions (mock implementations)\nexport const getSupportTickets = async () => {\n  // Mock implementation\n  return [];\n};\n\nexport const createSupportTicket = async (ticket: any) => {\n  // Mock implementation\n  console.log('Creating support ticket:', ticket);\n};\n\nexport const sendSupportMessage = async (message: any) => {\n  // Mock implementation\n  console.log('Sending support message:', message);\n};\n\nexport const getConversationMessages = async () => {\n  // Mock implementation\n  return [];\n};\n\n// Add missing exports for compatibility\nexport const addCustomer = saveCustomer;\nexport const addProduct = saveProduct;","size_bytes":12037},"client/src/lib/subscription-storage.ts":{"content":"// src/lib/subscription-storage.ts\n\n// This file is the central API for managing subscription-related data.\n// It uses the async database functions from database.ts and provides\n// a clean, high-level interface for the UI components.\n\nimport { SubscriptionPlan, CompanySubscription, SupportTicket } from './subscription-types';\nimport { Company } from './types';\nimport { subscriptionPlanService, companyService, supportTicketService } from './database';\n\n// --- Subscription Plans ---\nexport const getSubscriptionPlans = async (): Promise<SubscriptionPlan[]> => {\n  try {\n    const plans = await subscriptionPlanService.getPlans();\n    return Array.isArray(plans) ? plans : [];\n  } catch (error) {\n    console.error('Error getting subscription plans:', error);\n    return [];\n  }\n};\nexport const saveSubscriptionPlan = async (plan: SubscriptionPlan): Promise<void> => {\n  await subscriptionPlanService.add(plan);\n};\n\n// --- Companies ---\nexport const getSubscribedCompanies = async (): Promise<Company[]> => {\n  return await companyService.getAll();\n};\nexport const saveSubscribedCompany = async (company: Company): Promise<void> => {\n  await companyService.add(company);\n};\n\n// --- Company Subscriptions ---\nexport const getCompanySubscriptions = async (): Promise<CompanySubscription[]> => {\n  try {\n    // Fallback to local list from companyService for demo\n    const companies = await companyService.getAll();\n    const plans = await subscriptionPlanService.getPlans();\n    \n    // Ensure we have arrays\n    const companiesArray = Array.isArray(companies) ? companies : [];\n    const plansArray = Array.isArray(plans) ? plans : [];\n    \n    // Map companies to a synthetic active subscription if planId exists in company meta (optional)\n    return companiesArray\n      .filter((c: any) => c.subscriptionPlanId)\n      .map((c: any) => ({\n        companyId: c.id,\n        planId: c.subscriptionPlanId,\n        startDate: c.subscriptionStart || new Date(),\n        endDate: c.subscriptionEnd || new Date(Date.now() + 30*24*3600*1000),\n        status: 'active',\n        tokensUsed: 0\n      }));\n  } catch (error) {\n    console.error('Error getting company subscriptions:', error);\n    return [];\n  }\n};\nexport const getSubscriptionByCompany = async (companyId: string): Promise<CompanySubscription | undefined> => {\n  try {\n    // Try subscription service if available in future; otherwise infer from company record\n    const companies = await companyService.getAll();\n    const companiesArray = Array.isArray(companies) ? companies : [];\n    const c: any = companiesArray.find((x: any) => x.id === companyId);\n    if (!c || !c.subscriptionPlanId) return undefined;\n    return {\n      companyId: c.id,\n      planId: c.subscriptionPlanId,\n      startDate: c.subscriptionStart || new Date(),\n      endDate: c.subscriptionEnd || new Date(Date.now() + 30*24*3600*1000),\n      status: 'active',\n      tokensUsed: 0\n    };\n  } catch (error) {\n    console.error('Error getting subscription by company:', error);\n    return undefined;\n  }\n};\nexport const assignSubscriptionToCompany = async (companyId: string, planId: string): Promise<void> => {\n  try {\n    const plans = await subscriptionPlanService.getPlans();\n    const plansArray = Array.isArray(plans) ? plans : [];\n    const plan = plansArray.find(p => p.id === planId);\n    if (!plan) throw new Error('Subscription plan not found');\n\n    const now = new Date();\n    const endDate = new Date(now);\n    endDate.setDate(now.getDate() + plan.durationDays);\n\n    const newSubscription: CompanySubscription = {\n      companyId,\n      planId,\n      startDate: now,\n      endDate,\n      status: 'active',\n      tokensUsed: 0,\n    };\n    // Persist minimal subscription metadata onto company until full service exists\n    await companyService.update(companyId, {\n      subscriptionPlanId: planId,\n      subscriptionStart: now,\n      subscriptionEnd: endDate,\n    } as any);\n  } catch (error) {\n    console.error('Error assigning subscription to company:', error);\n    throw error;\n  }\n};\n\n// --- Support Tickets ---\nexport const getSupportTickets = async (): Promise<SupportTicket[]> => {\n  try {\n    const tickets = await supportTicketService.getTickets();\n    return Array.isArray(tickets) ? tickets : [];\n  } catch (error) {\n    console.error('Error getting support tickets:', error);\n    return [];\n  }\n};\nexport const getTicketsByCompany = async (companyId: string): Promise<SupportTicket[]> => {\n  try {\n    const tickets = await supportTicketService.getTickets();\n    if (!Array.isArray(tickets)) {\n      console.warn('getTicketsByCompany: tickets is not an array:', tickets);\n      return [];\n    }\n    return tickets.filter(t => t.companyId === companyId);\n  } catch (error) {\n    console.error('Error getting tickets by company:', error);\n    return [];\n  }\n};\nexport const createSupportTicket = async (ticketData: Omit<SupportTicket, 'id' | 'createdAt' | 'updatedAt' | 'status'>): Promise<SupportTicket> => {\n  const newTicket: SupportTicket = {\n    ...ticketData,\n    id: `TICKET_${Date.now()}`,\n    status: 'open',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n  await supportTicketService.createTicket(newTicket);\n  return newTicket;\n};\nexport const updateSupportTicketStatus = async (ticketId: string, status: 'open' | 'in_progress' | 'closed'): Promise<void> => {\n  await supportTicketService.updateTicket(ticketId, { status, updatedAt: new Date() });\n};\n","size_bytes":5427},"client/src/lib/subscription-types.ts":{"content":"export interface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: number;\n  durationDays: number; // e.g., 30 for monthly, 365 for yearly\n  features: string[];\n  tokenLimit: number; // Number of tokens/actions allowed\n}\n\nexport interface CompanySubscription {\n  companyId: string;\n  planId: string;\n  startDate: Date;\n  endDate: Date;\n  status: 'active' | 'expired' | 'cancelled';\n  tokensUsed: number;\n}\n\nexport interface SupportTicket {\n  id: string;\n  companyId: string;\n  subject: string;\n  message: string;\n  status: 'open' | 'in_progress' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n}\n","size_bytes":606},"client/src/lib/thermalPrinter.ts":{"content":"// Thermal Printer Service for ACE-POS\nexport interface ReceiptData {\n  companyName: string;\n  companyAddress: string;\n  companyPhone: string;\n  companyTaxId: string;\n  receiptNumber: string;\n  date: string;\n  cashierName: string;\n  customerName: string;\n  items: Array<{\n    name: string;\n    quantity: number;\n    price: number;\n    total: number;\n  }>;\n  subtotal: number;\n  tax: number;\n  total: number;\n  paymentMethod: string;\n  paymentDetails?: {\n    cashAmount?: number;\n    cardAmount?: number;\n    walletAmount?: number;\n    parts?: Array<{\n      method: string;\n      amount: number;\n      txnId?: string;\n      lastDigits?: string;\n    }>;\n  };\n  isReprint?: boolean;\n  reprintCount?: number;\n}\n\nclass ThermalPrinterService {\n  // Generate proper thermal printer formatted receipt\n  generateReceipt(data: ReceiptData): string {\n    let receipt = '';\n    \n    // Header with company info\n    receipt += this.centerText(data.companyName, 48) + '\\n';\n    receipt += this.centerText(data.companyAddress, 48) + '\\n';\n    receipt += this.centerText(`Phone: ${data.companyPhone}`, 48) + '\\n';\n    receipt += this.centerText(`Tax ID: ${data.companyTaxId}`, 48) + '\\n';\n    \n    // Reprint notice if applicable\n    if (data.isReprint) {\n      receipt += '\\n';\n      receipt += this.centerText(`*** REPRINT #${data.reprintCount || 1} ***`, 48) + '\\n';\n      receipt += '\\n';\n    }\n    \n    // Receipt details\n    receipt += `Receipt #: ${data.receiptNumber}\\n`;\n    receipt += `Date: ${data.date}\\n`;\n    receipt += `Cashier: ${data.cashierName}\\n`;\n    receipt += `Customer: ${data.customerName}\\n`;\n    \n    // Separator line\n    receipt += this.generateSeparatorLine();\n    \n    // Items header\n    receipt += this.padRight('Item', 30) + this.padLeft('Qty', 8) + this.padLeft('Price', 10) + '\\n';\n    receipt += this.generateSeparatorLine();\n    \n    // Items\n    data.items.forEach(item => {\n      const itemName = this.truncateText(item.name, 30);\n      const quantity = item.quantity.toString();\n      const price = `₹${item.price.toFixed(2)}`;\n      \n      receipt += this.padRight(itemName, 30) + this.padLeft(quantity, 8) + this.padLeft(price, 10) + '\\n';\n    });\n    \n    // Separator line\n    receipt += this.generateSeparatorLine();\n    \n    // Totals\n    receipt += this.padRight('Subtotal:', 38) + this.padLeft(`₹${data.subtotal.toFixed(2)}`, 10) + '\\n';\n    receipt += this.padRight('Tax:', 38) + this.padLeft(`₹${data.tax.toFixed(2)}`, 10) + '\\n';\n    receipt += this.padRight('TOTAL:', 38) + this.padLeft(`₹${data.total.toFixed(2)}`, 10) + '\\n';\n    \n    // Payment method\n    receipt += '\\n';\n    receipt += `Payment Method: ${data.paymentMethod.toUpperCase()}\\n`;\n    \n    // Payment details\n    if (data.paymentDetails) {\n      const pd = data.paymentDetails;\n      if (pd.parts && pd.parts.length > 0) {\n        receipt += this.generateSeparatorLine();\n        receipt += 'Split Breakdown:\\n';\n        pd.parts.forEach((p, i) => {\n          const label = p.method.toUpperCase();\n          const line = `${i + 1}. ${label}` + (p.lastDigits ? ` ****${p.lastDigits}` : '') + (p.txnId ? ` (${p.txnId})` : '');\n          receipt += this.padRight(line, 38) + this.padLeft(`₹${p.amount.toFixed(2)}`, 10) + '\\n';\n        });\n      } else {\n        if (pd.cashAmount) receipt += `Cash Amount: ₹${pd.cashAmount.toFixed(2)}\\n`;\n        if (pd.cardAmount) receipt += `Card Amount: ₹${pd.cardAmount.toFixed(2)}\\n`;\n        if (pd.walletAmount) receipt += `Wallet Amount: ₹${pd.walletAmount.toFixed(2)}\\n`;\n      }\n    }\n    \n    // Footer\n    receipt += '\\n';\n    receipt += this.centerText('Thank you for your business!', 48) + '\\n';\n    receipt += '\\n';\n    \n    // Reprint notice at bottom if applicable\n    if (data.isReprint) {\n      receipt += this.centerText(`*** REPRINT #${data.reprintCount || 1} ***`, 48) + '\\n';\n      receipt += this.centerText(`Reprint Date: ${new Date().toLocaleString()}`, 48) + '\\n';\n    }\n    \n    // Cut paper\n    receipt += '\\n\\n';\n    \n    return receipt;\n  }\n\n  // Generate HTML for web printing (fallback)\n  generateHTMLReceipt(data: ReceiptData): string {\n    const reprintNotice = data.isReprint ? `*** REPRINT #${data.reprintCount || 1} ***` : '';\n    \n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Receipt - ${data.receiptNumber}</title>\n        <style>\n          @media print {\n            body { \n              font-family: 'Courier New', monospace; \n              font-size: 12px; \n              margin: 0; \n              padding: 10px; \n              width: 80mm;\n              max-width: 80mm;\n            }\n            .receipt-container {\n              width: 80mm;\n              max-width: 80mm;\n              margin: 0 auto;\n            }\n            .header { text-align: center; margin-bottom: 10px; }\n            .reprint-notice { \n              color: red; \n              font-weight: bold; \n              text-align: center; \n              margin: 5px 0; \n              font-size: 10px;\n            }\n            .item { \n              display: flex; \n              justify-content: space-between; \n              margin: 2px 0; \n              font-size: 11px;\n            }\n            .total { \n              font-weight: bold; \n              border-top: 1px solid #000; \n              padding-top: 5px; \n              margin-top: 10px; \n              text-align: right;\n            }\n            .footer { text-align: center; margin-top: 10px; font-size: 10px; }\n            .separator { \n              border-top: 1px dashed #000; \n              margin: 5px 0; \n              height: 1px; \n            }\n          }\n          body { \n            font-family: 'Courier New', monospace; \n            font-size: 12px; \n            margin: 0; \n            padding: 10px; \n            width: 80mm;\n            max-width: 80mm;\n          }\n          .receipt-container {\n            width: 80mm;\n            max-width: 80mm;\n            margin: 0 auto;\n          }\n          .header { text-align: center; margin-bottom: 10px; }\n          .reprint-notice { \n            color: red; \n            font-weight: bold; \n            text-align: center; \n            margin: 5px 0; \n            font-size: 10px;\n          }\n          .item { \n            display: flex; \n            justify-content: space-between; \n            margin: 2px 0; \n            font-size: 11px;\n          }\n          .total { \n            font-weight: bold; \n            border-top: 1px solid #000; \n            padding-top: 5px; \n            margin-top: 10px; \n            text-align: right;\n          }\n          .footer { text-align: center; margin-top: 10px; font-size: 10px; }\n          .separator { \n            border-top: 1px dashed #000; \n            margin: 5px 0; \n            height: 1px; \n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"receipt-container\">\n          ${data.isReprint ? `<div class=\"reprint-notice\">${reprintNotice}</div>` : ''}\n          <div class=\"header\">\n            <h2 style=\"margin: 0; font-size: 14px;\">${data.companyName}</h2>\n            <p style=\"margin: 2px 0; font-size: 10px;\">${data.companyAddress}</p>\n            <p style=\"margin: 2px 0; font-size: 10px;\">Phone: ${data.companyPhone}</p>\n            <p style=\"margin: 2px 0; font-size: 10px;\">Tax ID: ${data.companyTaxId}</p>\n          </div>\n          ${data.isReprint ? `<div class=\"reprint-notice\">${reprintNotice}</div>` : ''}\n          \n          <div class=\"separator\"></div>\n          \n          <div style=\"font-size: 10px; margin: 5px 0;\">\n            <div><strong>Receipt #:</strong> ${data.receiptNumber}</div>\n            <div><strong>Date:</strong> ${data.date}</div>\n            <div><strong>Cashier:</strong> ${data.cashierName}</div>\n            <div><strong>Customer:</strong> ${data.customerName}</div>\n            ${data.isReprint ? `<div><strong>Reprint Date:</strong> ${new Date().toLocaleString()}</div>` : ''}\n          </div>\n          \n          <div class=\"separator\"></div>\n          \n          ${data.items.map(item => `\n            <div class=\"item\">\n              <span>${item.name}</span>\n              <span>${item.quantity} x ₹${item.price.toFixed(2)}</span>\n              <span>₹${item.total.toFixed(2)}</span>\n            </div>\n          `).join('')}\n          \n          <div class=\"separator\"></div>\n          \n          <div class=\"total\">\n            <div class=\"item\">\n              <span>Subtotal:</span>\n              <span>₹${data.subtotal.toFixed(2)}</span>\n            </div>\n            <div class=\"item\">\n              <span>Tax:</span>\n              <span>₹${data.tax.toFixed(2)}</span>\n            </div>\n            <div class=\"item\" style=\"font-size: 14px;\">\n              <span>TOTAL:</span>\n              <span>₹${data.total.toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <div style=\"margin: 10px 0; font-size: 11px;\">\n            <div><strong>Payment Method:</strong> ${data.paymentMethod.toUpperCase()}</div>\n            ${data.paymentDetails ? `\n              ${data.paymentDetails.parts && data.paymentDetails.parts.length ? `\n                <div style=\"margin-top:6px;\"><strong>Split Breakdown:</strong></div>\n                ${data.paymentDetails.parts.map((p, i) => `\n                  <div style=\"display:flex;justify-content:space-between;\">\n                    <span>${i+1}. ${p.method.toUpperCase()}${p.lastDigits ? ` ****${p.lastDigits}` : ''}${p.txnId ? ` (${p.txnId})` : ''}</span>\n                    <span>₹${p.amount.toFixed(2)}</span>\n                  </div>\n                `).join('')}\n              ` : `\n                ${data.paymentDetails.cashAmount ? `<div>Cash Amount: ₹${data.paymentDetails.cashAmount.toFixed(2)}</div>` : ''}\n                ${data.paymentDetails.cardAmount ? `<div>Card Amount: ₹${data.paymentDetails.cardAmount.toFixed(2)}</div>` : ''}\n                ${data.paymentDetails.walletAmount ? `<div>Wallet Amount: ₹${data.paymentDetails.walletAmount.toFixed(2)}</div>` : ''}\n              `}\n            ` : ''}\n          </div>\n          \n          <div class=\"footer\">\n            <p>Thank you for your business!</p>\n            ${data.isReprint ? `<p>Reprint #${data.reprintCount || 1} - ${new Date().toLocaleString()}</p>` : ''}\n          </div>\n          \n          ${data.isReprint ? `<div class=\"reprint-notice\">${reprintNotice}</div>` : ''}\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  // Print receipt using proper thermal printer\n  async printReceipt(data: ReceiptData): Promise<boolean> {\n    try {\n      // Try to use thermal printer driver if available\n      if (this.isThermalPrinterAvailable()) {\n        return await this.printWithThermalDriver(data);\n      } else {\n        return await this.printWithWebAPI(data);\n      }\n    } catch (error) {\n      console.error('Print error:', error);\n      // Fallback to web printing\n      return await this.printWithWebAPI(data);\n    }\n  }\n\n  // Check if thermal printer driver is available\n  private isThermalPrinterAvailable(): boolean {\n    // Check for Electron API\n    if (typeof window !== 'undefined' && (window as any).electronAPI) {\n      return true;\n    }\n    \n    // Check for WebUSB API\n    if (navigator.usb) {\n      return true;\n    }\n    \n    // Check for Web Serial API\n    if (navigator.serial) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  // Print using thermal printer driver\n  private async printWithThermalDriver(data: ReceiptData): Promise<boolean> {\n    try {\n      const escposData = this.generateReceipt(data);\n      \n      // Try Electron API first\n      if (typeof window !== 'undefined' && (window as any).electronAPI) {\n        return await (window as any).electronAPI.printReceipt(escposData);\n      }\n      \n      // Try WebUSB API\n      if (navigator.usb) {\n        return await this.printWithWebUSB(escposData);\n      }\n      \n      // Try Web Serial API\n      if (navigator.serial) {\n        return await this.printWithWebSerial(escposData);\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Thermal printer error:', error);\n      return false;\n    }\n  }\n\n  // Print using WebUSB API\n  private async printWithWebUSB(escposData: string): Promise<boolean> {\n    try {\n      const device = await navigator.usb.requestDevice({\n        filters: [\n          { vendorId: 0x0483 }, // STMicroelectronics\n          { vendorId: 0x04b8 }, // Epson\n          { vendorId: 0x0416 }, // WinChipHead\n          { vendorId: 0x0525 }, // PLX Technology\n        ]\n      });\n      \n      await device.open();\n      await device.selectConfiguration(1);\n      await device.claimInterface(0);\n      \n      const encoder = new TextEncoder();\n      const data = encoder.encode(escposData);\n      \n      await device.transferOut(1, data);\n      await device.close();\n      return true;\n    } catch (error) {\n      console.error('WebUSB print error:', error);\n      return false;\n    }\n  }\n\n  // Print using Web Serial API\n  private async printWithWebSerial(escposData: string): Promise<boolean> {\n    try {\n      const port = await navigator.serial.requestPort();\n      await port.open({ baudRate: 9600 });\n      \n      const encoder = new TextEncoder();\n      const data = encoder.encode(escposData);\n      \n      const writer = port.writable.getWriter();\n      await writer.write(data);\n      writer.releaseLock();\n      \n      await port.close();\n      return true;\n    } catch (error) {\n      console.error('Web Serial print error:', error);\n      return false;\n    }\n  }\n\n  // Print using web browser API (fallback)\n  private async printWithWebAPI(data: ReceiptData): Promise<boolean> {\n    return new Promise((resolve) => {\n      const html = this.generateHTMLReceipt(data);\n      const printWindow = window.open('', '_blank');\n      \n      if (printWindow) {\n        printWindow.document.write(html);\n        printWindow.document.close();\n        \n        printWindow.onload = () => {\n          printWindow.print();\n          setTimeout(() => {\n            printWindow.close();\n            resolve(true);\n          }, 1000);\n        };\n        \n        setTimeout(() => {\n          if (!printWindow.closed) {\n            printWindow.print();\n            setTimeout(() => {\n              printWindow.close();\n              resolve(true);\n            }, 1000);\n          }\n        }, 500);\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // Utility functions\n  private generateSeparatorLine(): string {\n    return '-'.repeat(48) + '\\n';\n  }\n\n  private padRight(text: string, width: number): string {\n    return text.padEnd(width, ' ');\n  }\n\n  private padLeft(text: string, width: number): string {\n    return text.padStart(width, ' ');\n  }\n\n  private centerText(text: string, width: number): string {\n    const padding = Math.max(0, width - text.length);\n    const leftPadding = Math.floor(padding / 2);\n    const rightPadding = padding - leftPadding;\n    return ' '.repeat(leftPadding) + text + ' '.repeat(rightPadding);\n  }\n\n  private truncateText(text: string, maxLength: number): string {\n    return text.length > maxLength ? text.substring(0, maxLength - 3) + '...' : text;\n  }\n}\n\n// Export singleton instance\nexport const thermalPrinter = new ThermalPrinterService();\nexport default ThermalPrinterService;\n","size_bytes":15300},"client/src/lib/types.ts":{"content":"export interface Product {\n  id: string;\n  companyId: string;\n  name: string;\n  description?: string;\n  price: number;\n  cost: number;\n  stock: number;\n  category?: string;\n  barcode?: string;\n  sku?: string;\n  image?: string;\n  unit?: string;\n  mrp?: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Customer {\n  id: string;\n  companyId: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  country?: string;\n  notes?: string;\n  totalSpent: number;\n  visitCount: number;\n  lastVisit?: Date;\n  gst?: string;\n  loyaltyPoints?: number;\n  visits?: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Employee {\n  id: string;\n  companyId: string;\n  employeeId: string;\n  name: string;\n  email?: string;\n  phone?: string;\n  position?: string;\n  salary?: number;\n  hireDate?: Date;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Company {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  zipCode?: string;\n  country?: string;\n  taxId?: string;\n  logoUrl?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Transaction {\n  id: string;\n  companyId: string;\n  customerId?: string;\n  employeeId?: string;\n  items: TransactionItem[];\n  subtotal: number;\n  tax: number;\n  discount: number;\n  total: number;\n  paymentMethod?: string;\n  paymentDetails?: {\n    cashAmount?: number;\n    change?: number;\n    cardAmount?: number;\n  };\n  status: 'pending' | 'completed' | 'cancelled' | 'refunded';\n  notes?: string;\n  timestamp: Date;\n  customerName?: string;\n  employeeName?: string;\n  receipt?: string;\n}\n\nexport interface TransactionItem {\n  productId: string;\n  name: string;\n  price: number;\n  quantity: number;\n  total: number;\n  mrp?: number;\n}\n\nexport interface CartItem {\n  product: Product;\n  quantity: number;\n}\n\nexport interface AuthState {\n  isAuthenticated: boolean;\n  company: Company | null;\n  employee: Employee | null;\n  loading: boolean;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface EmployeeLoginCredentials {\n  employeeId: string;\n  password: string;\n}\n\nexport interface SalesReport {\n  date: string;\n  totalSales: number;\n  totalTransactions: number;\n  averageTransaction: number;\n  topProducts: {\n    product: Product;\n    quantity: number;\n    revenue: number;\n  }[];\n  paymentMethods: {\n    cash: number;\n    card: number;\n    check: number;\n  };\n  hourlyBreakdown: {\n    hour: number;\n    sales: number;\n    transactions: number;\n  }[];\n}\n\nexport interface InventoryAlert {\n  product: Product;\n  currentStock: number;\n  minStock: number;\n  type: 'low_stock' | 'out_of_stock';\n}\n\n// Admin System Types\nexport interface AdminUser {\n  id: string;\n  username: string;\n  email: string;\n  role: 'super_admin' | 'admin' | 'support' | 'sales';\n  permissions: string[];\n  isActive: boolean;\n  lastLogin?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface SoftwareCompanyEmployee {\n  id: string;\n  employeeId: string;\n  name: string;\n  email: string;\n  phone?: string;\n  department: 'sales' | 'support' | 'technical' | 'marketing' | 'finance' | 'hr';\n  position: string;\n  managerId?: string;\n  salary?: number;\n  hireDate: Date;\n  isActive: boolean;\n  avatar?: string;\n  skills?: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface AdminLoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface AdminAuthState {\n  isAuthenticated: boolean;\n  adminUser: AdminUser | null;\n  loading: boolean;\n}\n\n// CRM Types for Software Company\nexport interface Lead {\n  id: string;\n  companyName: string;\n  contactPerson: string;\n  email: string;\n  phone?: string;\n  industry: string;\n  companySize: 'small' | 'medium' | 'large';\n  source: 'website' | 'referral' | 'cold_call' | 'social_media' | 'other';\n  status: 'new' | 'contacted' | 'qualified' | 'proposal' | 'negotiation' | 'closed_won' | 'closed_lost';\n  assignedTo?: string;\n  estimatedValue?: number;\n  notes?: string;\n  nextFollowUp?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Opportunity {\n  id: string;\n  leadId: string;\n  title: string;\n  description?: string;\n  value: number;\n  probability: number; // 0-100\n  stage: 'discovery' | 'qualification' | 'proposal' | 'negotiation' | 'closed_won' | 'closed_lost';\n  expectedCloseDate?: Date;\n  assignedTo?: string;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description?: string;\n  type: 'call' | 'email' | 'meeting' | 'follow_up' | 'proposal' | 'other';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n  assignedTo?: string;\n  relatedTo?: {\n    type: 'lead' | 'opportunity' | 'company';\n    id: string;\n  };\n  dueDate?: Date;\n  completedAt?: Date;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Activity {\n  id: string;\n  type: 'call' | 'email' | 'meeting' | 'note' | 'task_completed';\n  title: string;\n  description?: string;\n  performedBy: string;\n  relatedTo?: {\n    type: 'lead' | 'opportunity' | 'company' | 'employee';\n    id: string;\n  };\n  timestamp: Date;\n  duration?: number; // in minutes\n  outcome?: string;\n}\n\n// Extended Company interface for admin management\nexport interface CompanyWithSubscription extends Company {\n  subscriptionPlan: 'basic' | 'professional' | 'enterprise';\n  subscriptionStatus: 'active' | 'suspended' | 'cancelled' | 'expired';\n  monthlyFee: number;\n  employees: number;\n  lastLogin?: Date;\n  billingInfo?: {\n    nextPaymentDate: Date;\n    lastPaymentDate?: Date;\n    paymentMethod?: string;\n    outstandingAmount?: number;\n  };\n  usage?: {\n    storageUsed: number;\n    storageLimit: number;\n    transactionsThisMonth: number;\n    activeUsers: number;\n  };\n  owner?: {\n    name: string;\n    email: string;\n    phone?: string;\n  };\n}","size_bytes":6054},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminCRM.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Users,\n  Target,\n  CheckSquare,\n  Activity as ActivityIcon,\n  Plus,\n  Search,\n  Filter,\n  Eye,\n  Edit,\n  Trash2,\n  Phone,\n  Mail,\n  Calendar,\n  DollarSign,\n  TrendingUp,\n  UserPlus,\n  Briefcase,\n  Clock,\n  AlertCircle,\n  CheckCircle,\n  XCircle,\n  ArrowRight,\n  BarChart3,\n  PieChart,\n  MapPin,\n  Building2,\n  FileText\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { Lead, Opportunity, Task, Activity as ActivityType, SoftwareCompanyEmployee } from '@/lib/types';\n\nexport default function AdminCRM() {\n  const [leads, setLeads] = useState<Lead[]>([]);\n  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [activities, setActivities] = useState<ActivityType[]>([]);\n  const [employees, setEmployees] = useState<SoftwareCompanyEmployee[]>([]);\n  \n  // Dialog states\n  const [isLeadDialogOpen, setIsLeadDialogOpen] = useState(false);\n  const [isLeadViewDialogOpen, setIsLeadViewDialogOpen] = useState(false);\n  const [isOpportunityDialogOpen, setIsOpportunityDialogOpen] = useState(false);\n  const [isTaskDialogOpen, setIsTaskDialogOpen] = useState(false);\n  const [editingLeadId, setEditingLeadId] = useState<string | null>(null);\n  const [viewLead, setViewLead] = useState<Lead | null>(null);\n  const [isActivityDialogOpen, setIsActivityDialogOpen] = useState(false);\n  \n  // Form states\n  const [leadForm, setLeadForm] = useState({\n    companyName: '',\n    contactPerson: '',\n    email: '',\n    phone: '',\n    industry: '',\n    companySize: 'small' as const,\n    source: 'website' as const,\n    estimatedValue: '',\n    notes: ''\n  });\n\n  const [opportunityForm, setOpportunityForm] = useState({\n    leadId: '',\n    title: '',\n    description: '',\n    value: '',\n    probability: '',\n    stage: 'discovery' as const,\n    expectedCloseDate: '',\n    notes: ''\n  });\n\n  const [taskForm, setTaskForm] = useState({\n    title: '',\n    description: '',\n    type: 'call' as const,\n    priority: 'medium' as const,\n    assignedTo: '',\n    dueDate: '',\n    notes: ''\n  });\n\n  // Filters\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [assignedFilter, setAssignedFilter] = useState('all');\n\n  useEffect(() => {\n    loadMockData();\n  }, []);\n\n  const loadMockData = () => {\n    // Mock employees\n    const mockEmployees: SoftwareCompanyEmployee[] = [\n      {\n        id: 'emp-1',\n        employeeId: 'EMP001',\n        name: 'John Smith',\n        email: 'john@possystem.com',\n        phone: '+1-555-0123',\n        department: 'sales',\n        position: 'Sales Manager',\n        hireDate: new Date('2023-01-15'),\n        isActive: true,\n        skills: ['Sales', 'CRM', 'Negotiation'],\n        createdAt: new Date('2023-01-15'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'emp-2',\n        employeeId: 'EMP002',\n        name: 'Sarah Johnson',\n        email: 'sarah@possystem.com',\n        phone: '+1-555-0124',\n        department: 'support',\n        position: 'Support Specialist',\n        hireDate: new Date('2023-02-20'),\n        isActive: true,\n        skills: ['Customer Support', 'Technical Support'],\n        createdAt: new Date('2023-02-20'),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Mock leads\n    const mockLeads: Lead[] = [\n      {\n        id: 'lead-1',\n        companyName: 'Tech Solutions Inc',\n        contactPerson: 'Mike Wilson',\n        email: 'mike@techsolutions.com',\n        phone: '+1-555-0101',\n        industry: 'Technology',\n        companySize: 'medium',\n        source: 'website',\n        status: 'qualified',\n        assignedTo: 'emp-1',\n        estimatedValue: 5000,\n        notes: 'Interested in POS system for retail chain',\n        nextFollowUp: new Date('2024-01-15'),\n        createdAt: new Date('2024-01-01'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'lead-2',\n        companyName: 'Retail Plus',\n        contactPerson: 'Lisa Brown',\n        email: 'lisa@retailplus.com',\n        phone: '+1-555-0102',\n        industry: 'Retail',\n        companySize: 'large',\n        source: 'referral',\n        status: 'new',\n        estimatedValue: 8000,\n        notes: 'Looking for comprehensive POS solution',\n        createdAt: new Date('2024-01-10'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'lead-3',\n        companyName: 'Food Court Express',\n        contactPerson: 'David Chen',\n        email: 'david@foodcourtexpress.com',\n        phone: '+1-555-0103',\n        industry: 'Food & Beverage',\n        companySize: 'small',\n        source: 'cold_call',\n        status: 'contacted',\n        assignedTo: 'emp-2',\n        estimatedValue: 3000,\n        notes: 'Multiple locations, needs inventory management',\n        nextFollowUp: new Date('2024-01-18'),\n        createdAt: new Date('2024-01-12'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'lead-4',\n        companyName: 'Fashion Boutique',\n        contactPerson: 'Emma Rodriguez',\n        email: 'emma@fashionboutique.com',\n        phone: '+1-555-0104',\n        industry: 'Fashion',\n        companySize: 'medium',\n        source: 'social_media',\n        status: 'proposal',\n        assignedTo: 'emp-1',\n        estimatedValue: 6000,\n        notes: 'Interested in customer loyalty features',\n        nextFollowUp: new Date('2024-01-20'),\n        createdAt: new Date('2024-01-08'),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Mock opportunities\n    const mockOpportunities: Opportunity[] = [\n      {\n        id: 'opp-1',\n        leadId: 'lead-1',\n        title: 'Tech Solutions POS Implementation',\n        description: 'Full POS system implementation for 5 locations',\n        value: 5000,\n        probability: 75,\n        stage: 'proposal',\n        expectedCloseDate: new Date('2024-02-15'),\n        assignedTo: 'emp-1',\n        notes: 'Proposal sent, waiting for response',\n        createdAt: new Date('2024-01-05'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'opp-2',\n        leadId: 'lead-4',\n        title: 'Fashion Boutique Customer Loyalty System',\n        description: 'POS with advanced customer loyalty and inventory management',\n        value: 6000,\n        probability: 60,\n        stage: 'negotiation',\n        expectedCloseDate: new Date('2024-02-20'),\n        assignedTo: 'emp-1',\n        notes: 'Final pricing discussion scheduled',\n        createdAt: new Date('2024-01-10'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'opp-3',\n        leadId: 'lead-2',\n        title: 'Retail Plus Multi-Location Setup',\n        description: 'Enterprise POS solution for 15 retail locations',\n        value: 8000,\n        probability: 40,\n        stage: 'qualification',\n        expectedCloseDate: new Date('2024-03-01'),\n        assignedTo: 'emp-2',\n        notes: 'Technical requirements gathering in progress',\n        createdAt: new Date('2024-01-12'),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Mock tasks\n    const mockTasks: Task[] = [\n      {\n        id: 'task-1',\n        title: 'Follow up with Tech Solutions',\n        description: 'Call Mike to discuss proposal feedback',\n        type: 'call',\n        priority: 'high',\n        status: 'pending',\n        assignedTo: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-1' },\n        dueDate: new Date('2024-01-16'),\n        createdAt: new Date('2024-01-14'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'task-2',\n        title: 'Prepare demo for Retail Plus',\n        description: 'Create customized demo for retail chain',\n        type: 'meeting',\n        priority: 'medium',\n        status: 'in_progress',\n        assignedTo: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-2' },\n        dueDate: new Date('2024-01-20'),\n        createdAt: new Date('2024-01-12'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'task-3',\n        title: 'Send proposal to Fashion Boutique',\n        description: 'Prepare and send detailed proposal with pricing',\n        type: 'proposal',\n        priority: 'high',\n        status: 'pending',\n        assignedTo: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-4' },\n        dueDate: new Date('2024-01-17'),\n        createdAt: new Date('2024-01-15'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'task-4',\n        title: 'Schedule demo with Food Court Express',\n        description: 'Arrange online demo for inventory management features',\n        type: 'meeting',\n        priority: 'medium',\n        status: 'pending',\n        assignedTo: 'emp-2',\n        relatedTo: { type: 'lead', id: 'lead-3' },\n        dueDate: new Date('2024-01-19'),\n        createdAt: new Date('2024-01-16'),\n        updatedAt: new Date()\n      },\n      {\n        id: 'task-5',\n        title: 'Review competitor analysis',\n        description: 'Research competitor pricing and features',\n        type: 'other',\n        priority: 'low',\n        status: 'completed',\n        assignedTo: 'emp-1',\n        dueDate: new Date('2024-01-15'),\n        createdAt: new Date('2024-01-10'),\n        updatedAt: new Date()\n      }\n    ];\n\n    // Mock activities\n    const mockActivities: ActivityType[] = [\n      {\n        id: 'act-1',\n        type: 'call',\n        title: 'Initial call with Tech Solutions',\n        description: 'Discussed POS requirements and pricing',\n        performedBy: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-1' },\n        timestamp: new Date('2024-01-13'),\n        duration: 30,\n        outcome: 'Positive response, proposal requested'\n      },\n      {\n        id: 'act-2',\n        type: 'email',\n        title: 'Proposal sent to Tech Solutions',\n        description: 'Sent detailed proposal with pricing',\n        performedBy: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-1' },\n        timestamp: new Date('2024-01-14'),\n        outcome: 'Proposal delivered successfully'\n      },\n      {\n        id: 'act-3',\n        type: 'meeting',\n        title: 'Demo with Fashion Boutique',\n        description: 'Presented customer loyalty features and pricing',\n        performedBy: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-4' },\n        timestamp: new Date('2024-01-15'),\n        duration: 45,\n        outcome: 'Very interested, requested proposal'\n      },\n      {\n        id: 'act-4',\n        type: 'call',\n        title: 'Follow-up with Food Court Express',\n        description: 'Discussed inventory management requirements',\n        performedBy: 'emp-2',\n        relatedTo: { type: 'lead', id: 'lead-3' },\n        timestamp: new Date('2024-01-16'),\n        duration: 25,\n        outcome: 'Scheduled demo for next week'\n      },\n      {\n        id: 'act-5',\n        type: 'email',\n        title: 'Welcome email to Retail Plus',\n        description: 'Sent welcome package and next steps',\n        performedBy: 'emp-1',\n        relatedTo: { type: 'lead', id: 'lead-2' },\n        timestamp: new Date('2024-01-16'),\n        outcome: 'Email opened and acknowledged'\n      }\n    ];\n\n    setEmployees(mockEmployees);\n    setLeads(mockLeads);\n    setOpportunities(mockOpportunities);\n    setTasks(mockTasks);\n    setActivities(mockActivities);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'new': return 'bg-blue-100 text-blue-800';\n      case 'contacted': return 'bg-yellow-100 text-yellow-800';\n      case 'qualified': return 'bg-green-100 text-green-800';\n      case 'proposal': return 'bg-purple-100 text-purple-800';\n      case 'negotiation': return 'bg-orange-100 text-orange-800';\n      case 'closed_won': return 'bg-green-100 text-green-800';\n      case 'closed_lost': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800';\n      case 'high': return 'bg-orange-100 text-orange-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTaskTypeIcon = (type: string) => {\n    switch (type) {\n      case 'call': return <Phone className=\"w-4 h-4\" />;\n      case 'email': return <Mail className=\"w-4 h-4\" />;\n      case 'meeting': return <Calendar className=\"w-4 h-4\" />;\n      case 'follow_up': return <ArrowRight className=\"w-4 h-4\" />;\n      case 'proposal': return <FileText className=\"w-4 h-4\" />;\n      default: return <CheckSquare className=\"w-4 h-4\" />;\n    }\n  };\n\n  const handleAddLead = () => {\n    if (editingLeadId) {\n      setLeads(leads.map(l => l.id === editingLeadId ? {\n        ...l,\n        companyName: leadForm.companyName,\n        contactPerson: leadForm.contactPerson,\n        email: leadForm.email,\n        phone: leadForm.phone,\n        industry: leadForm.industry,\n        companySize: leadForm.companySize,\n        source: leadForm.source,\n        estimatedValue: parseFloat(leadForm.estimatedValue) || 0,\n        notes: leadForm.notes,\n        updatedAt: new Date()\n      } : l));\n      setEditingLeadId(null);\n      toast.success('Lead updated successfully');\n    } else {\n      const newLead: Lead = {\n        id: `lead-${Date.now()}`,\n        companyName: leadForm.companyName,\n        contactPerson: leadForm.contactPerson,\n        email: leadForm.email,\n        phone: leadForm.phone,\n        industry: leadForm.industry,\n        companySize: leadForm.companySize,\n        source: leadForm.source,\n        status: 'new',\n        estimatedValue: parseFloat(leadForm.estimatedValue) || 0,\n        notes: leadForm.notes,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      setLeads([...leads, newLead]);\n      toast.success('Lead added successfully');\n    }\n    setLeadForm({\n      companyName: '',\n      contactPerson: '',\n      email: '',\n      phone: '',\n      industry: '',\n      companySize: 'small',\n      source: 'website',\n      estimatedValue: '',\n      notes: ''\n    });\n    setIsLeadDialogOpen(false);\n  };\n\n  const handleEditLead = (lead: Lead) => {\n    setEditingLeadId(lead.id);\n    setLeadForm({\n      companyName: lead.companyName,\n      contactPerson: lead.contactPerson,\n      email: lead.email || '',\n      phone: lead.phone || '',\n      industry: lead.industry || '',\n      companySize: (lead.companySize as any) || 'small',\n      source: (lead.source as any) || 'website',\n      estimatedValue: lead.estimatedValue?.toString() || '',\n      notes: lead.notes || ''\n    });\n    setIsLeadDialogOpen(true);\n  };\n\n  const handleViewLead = (lead: Lead) => {\n    setViewLead(lead);\n    setIsLeadViewDialogOpen(true);\n  };\n\n  const handleAddOpportunity = () => {\n    const newOpportunity: Opportunity = {\n      id: `opp-${Date.now()}`,\n      leadId: opportunityForm.leadId,\n      title: opportunityForm.title,\n      description: opportunityForm.description,\n      value: parseFloat(opportunityForm.value) || 0,\n      probability: parseFloat(opportunityForm.probability) || 0,\n      stage: opportunityForm.stage,\n      expectedCloseDate: opportunityForm.expectedCloseDate ? new Date(opportunityForm.expectedCloseDate) : undefined,\n      notes: opportunityForm.notes,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    setOpportunities([...opportunities, newOpportunity]);\n    setOpportunityForm({\n      leadId: '',\n      title: '',\n      description: '',\n      value: '',\n      probability: '',\n      stage: 'discovery',\n      expectedCloseDate: '',\n      notes: ''\n    });\n    setIsOpportunityDialogOpen(false);\n    toast.success('Opportunity added successfully');\n  };\n\n  const handleAddTask = () => {\n    const newTask: Task = {\n      id: `task-${Date.now()}`,\n      title: taskForm.title,\n      description: taskForm.description,\n      type: taskForm.type,\n      priority: taskForm.priority,\n      status: 'pending',\n      assignedTo: taskForm.assignedTo,\n      dueDate: taskForm.dueDate ? new Date(taskForm.dueDate) : undefined,\n      notes: taskForm.notes,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    setTasks([...tasks, newTask]);\n    setTaskForm({\n      title: '',\n      description: '',\n      type: 'call',\n      priority: 'medium',\n      assignedTo: '',\n      dueDate: '',\n      notes: ''\n    });\n    setIsTaskDialogOpen(false);\n    toast.success('Task added successfully');\n  };\n\n  const handleCompleteTask = (taskId: string) => {\n    setTasks(tasks.map(task => \n      task.id === taskId \n        ? { ...task, status: 'completed', completedAt: new Date(), updatedAt: new Date() }\n        : task\n    ));\n    toast.success('Task completed successfully');\n  };\n\n  const handleUpdateTaskStatus = (taskId: string, status: 'pending' | 'in_progress' | 'completed' | 'cancelled') => {\n    setTasks(tasks.map(task => \n      task.id === taskId \n        ? { \n            ...task, \n            status, \n            completedAt: status === 'completed' ? new Date() : undefined,\n            updatedAt: new Date() \n          }\n        : task\n    ));\n    toast.success(`Task status updated to ${status.replace('_', ' ')}`);\n  };\n\n  const handleUpdateLeadStatus = (leadId: string, status: Lead['status']) => {\n    setLeads(leads.map(lead => \n      lead.id === leadId \n        ? { ...lead, status, updatedAt: new Date() }\n        : lead\n    ));\n    toast.success(`Lead status updated to ${status.replace('_', ' ')}`);\n  };\n\n  const handleDeleteLead = (leadId: string) => {\n    setLeads(leads.filter(lead => lead.id !== leadId));\n    toast.success('Lead deleted successfully');\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    setTasks(tasks.filter(task => task.id !== taskId));\n    toast.success('Task deleted successfully');\n  };\n\n  const filteredLeads = leads.filter(lead => \n    (searchQuery === '' || \n     lead.companyName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n     lead.contactPerson.toLowerCase().includes(searchQuery.toLowerCase())) &&\n    (statusFilter === 'all' || lead.status === statusFilter) &&\n    (assignedFilter === 'all' || lead.assignedTo === assignedFilter)\n  );\n\n  const filteredTasks = tasks.filter(task =>\n    (searchQuery === '' || \n     task.title.toLowerCase().includes(searchQuery.toLowerCase())) &&\n    (statusFilter === 'all' || task.status === statusFilter) &&\n    (assignedFilter === 'all' || task.assignedTo === assignedFilter)\n  );\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6 max-w-full overflow-x-hidden\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">CRM Dashboard</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Manage leads, opportunities, and customer relationships</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2\">\n          <Badge variant=\"outline\" className=\"text-xs sm:text-sm\">\n            <Users className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n            {leads.length} Leads\n          </Badge>\n          <Badge variant=\"outline\" className=\"text-xs sm:text-sm\">\n            <Target className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n            {opportunities.length} Opportunities\n          </Badge>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Leads</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{leads.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +{leads.filter(l => l.status === 'new').length} new this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pipeline Value</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              ₹{opportunities.reduce((sum, opp) => sum + opp.value, 0).toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {opportunities.length} active opportunities\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Tasks</CardTitle>\n            <CheckSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{tasks.filter(t => t.status === 'pending').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {tasks.filter(t => t.priority === 'high' && t.status === 'pending').length} high priority\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Conversion Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {leads.length > 0 ? Math.round((opportunities.length / leads.length) * 100) : 0}%\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Leads to opportunities\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"leads\" className=\"space-y-4 sm:space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-4\">\n          <TabsTrigger value=\"leads\" className=\"text-xs sm:text-sm\">Leads</TabsTrigger>\n          <TabsTrigger value=\"opportunities\" className=\"text-xs sm:text-sm\">Opportunities</TabsTrigger>\n          <TabsTrigger value=\"tasks\" className=\"text-xs sm:text-sm\">Tasks</TabsTrigger>\n          <TabsTrigger value=\"activities\" className=\"text-xs sm:text-sm\">Activities</TabsTrigger>\n        </TabsList>\n\n        {/* Leads Tab */}\n        <TabsContent value=\"leads\" className=\"space-y-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"proposal\">Proposal</SelectItem>\n                  <SelectItem value=\"negotiation\">Negotiation</SelectItem>\n                  <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                  <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isLeadDialogOpen} onOpenChange={setIsLeadDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Lead\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Lead</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"companyName\">Company Name</Label>\n                      <Input\n                        id=\"companyName\"\n                        value={leadForm.companyName}\n                        onChange={(e) => setLeadForm({...leadForm, companyName: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"contactPerson\">Contact Person</Label>\n                      <Input\n                        id=\"contactPerson\"\n                        value={leadForm.contactPerson}\n                        onChange={(e) => setLeadForm({...leadForm, contactPerson: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={leadForm.email}\n                        onChange={(e) => setLeadForm({...leadForm, email: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input\n                        id=\"phone\"\n                        value={leadForm.phone}\n                        onChange={(e) => setLeadForm({...leadForm, phone: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"industry\">Industry</Label>\n                      <Input\n                        id=\"industry\"\n                        value={leadForm.industry}\n                        onChange={(e) => setLeadForm({...leadForm, industry: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companySize\">Company Size</Label>\n                      <Select value={leadForm.companySize} onValueChange={(value) => setLeadForm({...leadForm, companySize: value as 'small' | 'medium' | 'large'})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"small\">Small</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"large\">Large</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"estimatedValue\">Estimated Value</Label>\n                    <Input\n                      id=\"estimatedValue\"\n                      type=\"number\"\n                      value={leadForm.estimatedValue}\n                      onChange={(e) => setLeadForm({...leadForm, estimatedValue: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"notes\">Notes</Label>\n                    <Textarea\n                      id=\"notes\"\n                      value={leadForm.notes}\n                      onChange={(e) => setLeadForm({...leadForm, notes: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsLeadDialogOpen(false)} className=\"flex-1\">\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddLead} className=\"flex-1\">\n                      Add Lead\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Leads Overview</CardTitle>\n              <CardDescription>\n                Manage and track potential customers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Contact</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Value</TableHead>\n                    <TableHead>Source</TableHead>\n                    <TableHead>Next Follow-up</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLeads.map((lead) => (\n                    <TableRow key={lead.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{lead.companyName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{lead.industry}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{lead.contactPerson}</div>\n                          <div className=\"text-sm text-muted-foreground\">{lead.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(lead.status)}>\n                          {lead.status.replace('_', ' ')}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>₹{lead.estimatedValue?.toLocaleString() || '0'}</TableCell>\n                      <TableCell className=\"capitalize\">{lead.source.replace('_', ' ')}</TableCell>\n                      <TableCell>\n                        {lead.nextFollowUp ? lead.nextFollowUp.toLocaleDateString() : 'Not set'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleViewLead(lead)}>\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditLead(lead)}>\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-red-600 hover:text-red-700\"\n                            onClick={() => handleDeleteLead(lead.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Opportunities Tab */}\n        <TabsContent value=\"opportunities\" className=\"space-y-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search opportunities...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Filter by stage\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Stages</SelectItem>\n                  <SelectItem value=\"discovery\">Discovery</SelectItem>\n                  <SelectItem value=\"qualification\">Qualification</SelectItem>\n                  <SelectItem value=\"proposal\">Proposal</SelectItem>\n                  <SelectItem value=\"negotiation\">Negotiation</SelectItem>\n                  <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                  <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isOpportunityDialogOpen} onOpenChange={setIsOpportunityDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Opportunity\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Opportunity</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"opportunityTitle\">Title</Label>\n                    <Input\n                      id=\"opportunityTitle\"\n                      value={opportunityForm.title}\n                      onChange={(e) => setOpportunityForm({...opportunityForm, title: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"opportunityDescription\">Description</Label>\n                    <Textarea\n                      id=\"opportunityDescription\"\n                      value={opportunityForm.description}\n                      onChange={(e) => setOpportunityForm({...opportunityForm, description: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"opportunityValue\">Value (₹)</Label>\n                      <Input\n                        id=\"opportunityValue\"\n                        type=\"number\"\n                        value={opportunityForm.value}\n                        onChange={(e) => setOpportunityForm({...opportunityForm, value: e.target.value})}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"opportunityProbability\">Probability (%)</Label>\n                      <Input\n                        id=\"opportunityProbability\"\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={opportunityForm.probability}\n                        onChange={(e) => setOpportunityForm({...opportunityForm, probability: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"opportunityStage\">Stage</Label>\n                      <Select value={opportunityForm.stage} onValueChange={(value) => setOpportunityForm({...opportunityForm, stage: value as 'discovery' | 'qualification' | 'proposal' | 'negotiation' | 'closed_won' | 'closed_lost'})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"discovery\">Discovery</SelectItem>\n                          <SelectItem value=\"qualification\">Qualification</SelectItem>\n                          <SelectItem value=\"proposal\">Proposal</SelectItem>\n                          <SelectItem value=\"negotiation\">Negotiation</SelectItem>\n                          <SelectItem value=\"closed_won\">Closed Won</SelectItem>\n                          <SelectItem value=\"closed_lost\">Closed Lost</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"opportunityCloseDate\">Expected Close Date</Label>\n                      <Input\n                        id=\"opportunityCloseDate\"\n                        type=\"date\"\n                        value={opportunityForm.expectedCloseDate}\n                        onChange={(e) => setOpportunityForm({...opportunityForm, expectedCloseDate: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"opportunityLead\">Related Lead</Label>\n                    <Select value={opportunityForm.leadId} onValueChange={(value) => setOpportunityForm({...opportunityForm, leadId: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select lead\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {leads.map(lead => (\n                          <SelectItem key={lead.id} value={lead.id}>{lead.companyName} - {lead.contactPerson}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"opportunityNotes\">Notes</Label>\n                    <Textarea\n                      id=\"opportunityNotes\"\n                      value={opportunityForm.notes}\n                      onChange={(e) => setOpportunityForm({...opportunityForm, notes: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsOpportunityDialogOpen(false)} className=\"flex-1\">\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddOpportunity} className=\"flex-1\">\n                      Add Opportunity\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Opportunities Overview</CardTitle>\n              <CardDescription>\n                Track sales opportunities and pipeline\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Opportunity</TableHead>\n                    <TableHead>Lead</TableHead>\n                    <TableHead>Value</TableHead>\n                    <TableHead>Probability</TableHead>\n                    <TableHead>Stage</TableHead>\n                    <TableHead>Expected Close</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {opportunities.map((opportunity) => {\n                    const relatedLead = leads.find(lead => lead.id === opportunity.leadId);\n                    return (\n                      <TableRow key={opportunity.id}>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{opportunity.title}</div>\n                            <div className=\"text-sm text-muted-foreground\">{opportunity.description}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {relatedLead ? (\n                            <div>\n                              <div className=\"font-medium\">{relatedLead.companyName}</div>\n                              <div className=\"text-sm text-muted-foreground\">{relatedLead.contactPerson}</div>\n                            </div>\n                          ) : 'Unknown Lead'}\n                        </TableCell>\n                        <TableCell>₹{opportunity.value.toLocaleString()}</TableCell>\n                        <TableCell>{opportunity.probability}%</TableCell>\n                        <TableCell>\n                          <Badge className={getStatusColor(opportunity.stage)}>\n                            {opportunity.stage.replace('_', ' ')}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {opportunity.expectedCloseDate ? opportunity.expectedCloseDate.toLocaleDateString() : 'Not set'}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Eye className=\"w-4 h-4\" />\n                            </Button>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tasks Tab */}\n        <TabsContent value=\"tasks\" className=\"space-y-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search tasks...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-8\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full sm:w-[180px]\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isTaskDialogOpen} onOpenChange={setIsTaskDialogOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Task\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Task</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"taskTitle\">Title</Label>\n                    <Input\n                      id=\"taskTitle\"\n                      value={taskForm.title}\n                      onChange={(e) => setTaskForm({...taskForm, title: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"taskDescription\">Description</Label>\n                    <Textarea\n                      id=\"taskDescription\"\n                      value={taskForm.description}\n                      onChange={(e) => setTaskForm({...taskForm, description: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"taskType\">Type</Label>\n                      <Select value={taskForm.type} onValueChange={(value) => setTaskForm({...taskForm, type: value as 'call' | 'email' | 'meeting' | 'follow_up' | 'proposal' | 'other'})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"call\">Call</SelectItem>\n                          <SelectItem value=\"email\">Email</SelectItem>\n                          <SelectItem value=\"meeting\">Meeting</SelectItem>\n                          <SelectItem value=\"follow_up\">Follow Up</SelectItem>\n                          <SelectItem value=\"proposal\">Proposal</SelectItem>\n                          <SelectItem value=\"other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"taskPriority\">Priority</Label>\n                      <Select value={taskForm.priority} onValueChange={(value) => setTaskForm({...taskForm, priority: value as 'low' | 'medium' | 'high' | 'urgent'})}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"low\">Low</SelectItem>\n                          <SelectItem value=\"medium\">Medium</SelectItem>\n                          <SelectItem value=\"high\">High</SelectItem>\n                          <SelectItem value=\"urgent\">Urgent</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"taskAssignedTo\">Assign To</Label>\n                      <Select value={taskForm.assignedTo} onValueChange={(value) => setTaskForm({...taskForm, assignedTo: value})}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select employee\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {employees.map(emp => (\n                            <SelectItem key={emp.id} value={emp.id}>{emp.name}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"taskDueDate\">Due Date</Label>\n                      <Input\n                        id=\"taskDueDate\"\n                        type=\"date\"\n                        value={taskForm.dueDate}\n                        onChange={(e) => setTaskForm({...taskForm, dueDate: e.target.value})}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"taskNotes\">Notes</Label>\n                    <Textarea\n                      id=\"taskNotes\"\n                      value={taskForm.notes}\n                      onChange={(e) => setTaskForm({...taskForm, notes: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsTaskDialogOpen(false)} className=\"flex-1\">\n                      Cancel\n                    </Button>\n                    <Button onClick={handleAddTask} className=\"flex-1\">\n                      Add Task\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Tasks Overview</CardTitle>\n              <CardDescription>\n                Track and manage team tasks and activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Task</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Assigned To</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTasks.map((task) => (\n                    <TableRow key={task.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{task.title}</div>\n                          <div className=\"text-sm text-muted-foreground\">{task.description}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getTaskTypeIcon(task.type)}\n                          <span className=\"capitalize\">{task.type.replace('_', ' ')}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPriorityColor(task.priority)}>\n                          {task.priority}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(task.status)}>\n                          {task.status.replace('_', ' ')}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {employees.find(emp => emp.id === task.assignedTo)?.name || 'Unassigned'}\n                      </TableCell>\n                      <TableCell>\n                        {task.dueDate ? task.dueDate.toLocaleDateString() : 'Not set'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          {task.status !== 'completed' && (\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => handleCompleteTask(task.id)}\n                              className=\"text-green-600 hover:text-green-700\"\n                            >\n                              <CheckCircle className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"text-red-600 hover:text-red-700\"\n                            onClick={() => handleDeleteTask(task.id)}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activities Tab */}\n        <TabsContent value=\"activities\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activities</CardTitle>\n              <CardDescription>\n                Track all customer interactions and activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activities.map((activity) => (\n                  <div key={activity.id} className=\"flex items-start gap-4 p-4 border rounded-lg\">\n                    <div className=\"flex-shrink-0\">\n                      {getTaskTypeIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">{activity.title}</h4>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {activity.timestamp.toLocaleDateString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {activity.description}\n                      </p>\n                      {activity.outcome && (\n                        <p className=\"text-sm text-green-600 mt-1\">\n                          Outcome: {activity.outcome}\n                        </p>\n                      )}\n                      <div className=\"flex items-center gap-4 mt-2 text-xs text-muted-foreground\">\n                        <span>By: {employees.find(emp => emp.id === activity.performedBy)?.name || 'Unknown'}</span>\n                        {activity.duration && (\n                          <span>Duration: {activity.duration} min</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      {/* Lead View Dialog */}\n      <Dialog open={isLeadViewDialogOpen} onOpenChange={setIsLeadViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Lead Details</DialogTitle>\n          </DialogHeader>\n          {viewLead && (\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"text-base font-semibold\">{viewLead.companyName}</div>\n              <div>Contact: {viewLead.contactPerson}</div>\n              {viewLead.email && <div>Email: {viewLead.email}</div>}\n              {viewLead.phone && <div>Phone: {viewLead.phone}</div>}\n              {viewLead.industry && <div>Industry: {viewLead.industry}</div>}\n              <div>Status: {viewLead.status}</div>\n              {viewLead.estimatedValue && <div>Estimated Value: ₹{viewLead.estimatedValue.toLocaleString()}</div>}\n              {viewLead.notes && <div className=\"italic\">“{viewLead.notes}”</div>}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n} ","size_bytes":55815},"client/src/pages/AdminCompanyDashboard.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Users, Target, CheckSquare, Plus, Ticket, Mail } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\ninterface TeamTask {\n  id: string;\n  title: string;\n  status: 'pending' | 'in_progress' | 'completed';\n  owner: string;\n}\n\ninterface SupportTicketLite {\n  id: string;\n  company: string;\n  subject: string;\n  status: 'open' | 'in_progress' | 'closed';\n}\n\nexport default function AdminCompanyDashboard() {\n  const [tasks, setTasks] = useState<TeamTask[]>([]);\n  const [tickets, setTickets] = useState<SupportTicketLite[]>([]);\n  const [isTicketDialogOpen, setIsTicketDialogOpen] = useState(false);\n  const [ticketSubject, setTicketSubject] = useState('');\n  const [ticketMessage, setTicketMessage] = useState('');\n\n  useEffect(() => {\n    setTasks([\n      { id: 't1', title: 'Onboard ACME Retail', status: 'in_progress', owner: 'support' },\n      { id: 't2', title: 'Prepare demo for Fashion Boutique', status: 'pending', owner: 'sales' },\n      { id: 't3', title: 'Upgrade servers', status: 'completed', owner: 'technical' }\n    ]);\n    setTickets([\n      { id: 's1', company: 'Retail Plus', subject: 'POS freezes during billing', status: 'open' },\n      { id: 's2', company: 'Tech Solutions', subject: 'Need help with reports', status: 'in_progress' }\n    ]);\n  }, []);\n\n  const addTask = (title: string) => {\n    setTasks(prev => [...prev, { id: `t${Date.now()}`, title, status: 'pending', owner: 'support' }]);\n    toast.success('Task added');\n  };\n\n  const createInternalTicket = () => {\n    setTickets(prev => [...prev, { id: `s${Date.now()}`, company: 'Internal', subject: ticketSubject, status: 'open' }]);\n    setTicketSubject('');\n    setTicketMessage('');\n    setIsTicketDialogOpen(false);\n    toast.success('Internal ticket created (demo)');\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Admin Company Dashboard</h1>\n          <p className=\"text-sm text-muted-foreground\">Workspace for support, sales, and technical teams</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm\">Active Tickets</CardTitle>\n            <Ticket className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{tickets.length}</div>\n            <p className=\"text-xs text-muted-foreground\">Across all companies</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm\">Team Tasks</CardTitle>\n            <CheckSquare className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{tasks.filter(t => t.status !== 'completed').length}</div>\n            <p className=\"text-xs text-muted-foreground\">Pending and in-progress</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n            <CardTitle className=\"text-sm\">Customers Touched</CardTitle>\n            <Users className=\"w-4 h-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">12</div>\n            <p className=\"text-xs text-muted-foreground\">Last 7 days</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"tickets\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tickets\">Support Tickets</TabsTrigger>\n          <TabsTrigger value=\"tasks\">Team Tasks</TabsTrigger>\n          <TabsTrigger value=\"broadcast\">Broadcast</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tickets\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <h2 className=\"text-lg font-semibold\">Open Tickets</h2>\n            <Dialog open={isTicketDialogOpen} onOpenChange={setIsTicketDialogOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\"><Plus className=\"w-4 h-4 mr-1\" />New Ticket</Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader><DialogTitle>Create Internal Ticket</DialogTitle></DialogHeader>\n                <div className=\"space-y-3\">\n                  <Input placeholder=\"Subject\" value={ticketSubject} onChange={e => setTicketSubject(e.target.value)} />\n                  <Textarea placeholder=\"Message\" value={ticketMessage} onChange={e => setTicketMessage(e.target.value)} rows={5} />\n                  <div className=\"flex justify-end\">\n                    <Button onClick={createInternalTicket}>Create</Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {tickets.map(t => (\n                    <TableRow key={t.id}>\n                      <TableCell>{t.id}</TableCell>\n                      <TableCell>{t.company}</TableCell>\n                      <TableCell>{t.subject}</TableCell>\n                      <TableCell className=\"capitalize\">{t.status.replace('_', ' ')}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tasks\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Tasks</CardTitle>\n              <Button size=\"sm\" onClick={() => addTask('Follow up with Retail Plus')}><Plus className=\"w-4 h-4 mr-1\" />Add Task</Button>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Owner</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {tasks.map(task => (\n                    <TableRow key={task.id}>\n                      <TableCell>{task.title}</TableCell>\n                      <TableCell className=\"capitalize\">{task.owner}</TableCell>\n                      <TableCell className=\"capitalize\">{task.status.replace('_', ' ')}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"broadcast\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Send Broadcast to Customers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-3\">\n                <Input placeholder=\"Subject\" />\n                <Textarea placeholder=\"Message\" rows={6} />\n                <div className=\"flex justify-end\">\n                  <Button><Mail className=\"w-4 h-4 mr-1\" />Send</Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n\n","size_bytes":8373},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  Building2, \n  Users, \n  CreditCard, \n  TrendingUp, \n  AlertTriangle,\n  Calendar,\n  Plus,\n  Search,\n  Filter,\n  Download,\n  Eye,\n  Edit,\n  Trash2,\n  CheckCircle,\n  XCircle,\n  Clock,\n  DollarSign,\n  Activity,\n  BarChart3,\n  PieChart,\n  Settings,\n  Shield,\n  Database,\n  Server\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\ninterface Company {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  subscriptionPlan: 'basic' | 'premium' | 'enterprise';\n  subscriptionStatus: 'active' | 'expired' | 'suspended' | 'pending';\n  startDate: Date;\n  endDate: Date;\n  monthlyFee: number;\n  features: string[];\n  employees: number;\n  transactions: number;\n  revenue: number;\n  lastLogin: Date;\n  status: 'active' | 'inactive';\n}\n\ninterface SubscriptionPlan {\n  id: string;\n  name: string;\n  price: number;\n  features: string[];\n  maxEmployees: number;\n  maxTransactions: number;\n  storage: string;\n}\n\ninterface SystemStats {\n  totalCompanies: number;\n  activeSubscriptions: number;\n  monthlyRevenue: number;\n  totalRevenue: number;\n  pendingPayments: number;\n  systemHealth: 'excellent' | 'good' | 'warning' | 'critical';\n  uptime: number;\n  activeUsers: number;\n}\n\nexport default function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [subscriptionPlans, setSubscriptionPlans] = useState<SubscriptionPlan[]>([]);\n  const [systemStats, setSystemStats] = useState<SystemStats>({\n    totalCompanies: 0,\n    activeSubscriptions: 0,\n    monthlyRevenue: 0,\n    totalRevenue: 0,\n    pendingPayments: 0,\n    systemHealth: 'excellent',\n    uptime: 99.9,\n    activeUsers: 0\n  });\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [planFilter, setPlanFilter] = useState<string>('all');\n  const [isAddCompanyOpen, setIsAddCompanyOpen] = useState(false);\n  const [isAddPlanOpen, setIsAddPlanOpen] = useState(false);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n\n  useEffect(() => {\n    loadMockData();\n  }, []);\n\n  const loadMockData = () => {\n    // Mock companies data\n    const mockCompanies: Company[] = [\n      {\n        id: '1',\n        name: 'Cafe Central',\n        email: 'admin@cafecentral.com',\n        phone: '+91 98765 43210',\n        address: '123 Main St, Mumbai, India',\n        subscriptionPlan: 'premium',\n        subscriptionStatus: 'active',\n        startDate: new Date('2024-01-01'),\n        endDate: new Date('2024-12-31'),\n        monthlyFee: 2999,\n        features: ['POS System', 'Inventory Management', 'Reports', 'Multi-location'],\n        employees: 15,\n        transactions: 1250,\n        revenue: 450000,\n        lastLogin: new Date(),\n        status: 'active'\n      },\n      {\n        id: '2',\n        name: 'Bakery Delight',\n        email: 'info@bakerydelight.com',\n        phone: '+91 87654 32109',\n        address: '456 Park Ave, Delhi, India',\n        subscriptionPlan: 'basic',\n        subscriptionStatus: 'active',\n        startDate: new Date('2024-02-01'),\n        endDate: new Date('2025-01-31'),\n        monthlyFee: 1499,\n        features: ['POS System', 'Basic Reports'],\n        employees: 8,\n        transactions: 850,\n        revenue: 280000,\n        lastLogin: new Date(Date.now() - 86400000),\n        status: 'active'\n      },\n      {\n        id: '3',\n        name: 'Restaurant Elite',\n        email: 'contact@restaurantelite.com',\n        phone: '+91 76543 21098',\n        address: '789 Business Rd, Bangalore, India',\n        subscriptionPlan: 'enterprise',\n        subscriptionStatus: 'expired',\n        startDate: new Date('2023-06-01'),\n        endDate: new Date('2024-05-31'),\n        monthlyFee: 5999,\n        features: ['POS System', 'Inventory Management', 'Reports', 'Multi-location', 'API Access', 'Custom Branding'],\n        employees: 45,\n        transactions: 3200,\n        revenue: 1200000,\n        lastLogin: new Date(Date.now() - 172800000),\n        status: 'inactive'\n      }\n    ];\n\n    const mockPlans: SubscriptionPlan[] = [\n      {\n        id: '1',\n        name: 'Basic',\n        price: 1499,\n        features: ['POS System', 'Basic Reports', 'Email Support'],\n        maxEmployees: 10,\n        maxTransactions: 1000,\n        storage: '5GB'\n      },\n      {\n        id: '2',\n        name: 'Premium',\n        price: 2999,\n        features: ['POS System', 'Inventory Management', 'Advanced Reports', 'Phone Support'],\n        maxEmployees: 25,\n        maxTransactions: 5000,\n        storage: '20GB'\n      },\n      {\n        id: '3',\n        name: 'Enterprise',\n        price: 5999,\n        features: ['POS System', 'Inventory Management', 'Advanced Reports', 'Multi-location', 'API Access', 'Custom Branding', 'Priority Support'],\n        maxEmployees: 100,\n        maxTransactions: 50000,\n        storage: '100GB'\n      }\n    ];\n\n    setCompanies(mockCompanies);\n    setSubscriptionPlans(mockPlans);\n    \n    // Calculate system stats\n    const activeSubs = mockCompanies.filter(c => c.subscriptionStatus === 'active').length;\n    const monthlyRev = mockCompanies.reduce((sum, c) => sum + c.monthlyFee, 0);\n    const totalRev = mockCompanies.reduce((sum, c) => sum + c.revenue, 0);\n    \n    setSystemStats({\n      totalCompanies: mockCompanies.length,\n      activeSubscriptions: activeSubs,\n      monthlyRevenue: monthlyRev,\n      totalRevenue: totalRev,\n      pendingPayments: 3,\n      systemHealth: 'excellent',\n      uptime: 99.9,\n      activeUsers: mockCompanies.filter(c => c.status === 'active').length\n    });\n  };\n\n  const filteredCompanies = companies.filter(company => {\n    const matchesSearch = company.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         company.email.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || company.subscriptionStatus === statusFilter;\n    const matchesPlan = planFilter === 'all' || company.subscriptionPlan === planFilter;\n    \n    return matchesSearch && matchesStatus && matchesPlan;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'expired': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'suspended': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'pending': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getPlanColor = (plan: string) => {\n    switch (plan) {\n      case 'basic': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'premium': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'enterprise': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getSystemHealthColor = (health: string) => {\n    switch (health) {\n      case 'excellent': return 'text-green-600 dark:text-green-400';\n      case 'good': return 'text-blue-600 dark:text-blue-400';\n      case 'warning': return 'text-yellow-600 dark:text-yellow-400';\n      case 'critical': return 'text-red-600 dark:text-red-400';\n      default: return 'text-gray-600 dark:text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6 bg-background text-foreground\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground dark:text-gray-300\">Manage companies, subscriptions, and system health</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Badge className={`${getSystemHealthColor(systemStats.systemHealth)} bg-opacity-10 dark:bg-opacity-20`}>\n            <Activity className=\"w-4 h-4 mr-1\" />\n            System: {systemStats.systemHealth}\n          </Badge>\n          <Badge variant=\"outline\" className=\"dark:border-gray-600 dark:text-gray-300\">\n            <Server className=\"w-4 h-4 mr-1\" />\n            Uptime: {systemStats.uptime}%\n          </Badge>\n        </div>\n      </div>\n\n        {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-foreground\">Total Companies</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{systemStats.totalCompanies}</div>\n            <p className=\"text-xs text-muted-foreground dark:text-gray-400\">\n              +2 this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-foreground\">Active Subscriptions</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{systemStats.activeSubscriptions}</div>\n            <p className=\"text-xs text-muted-foreground dark:text-gray-400\">\n              {((systemStats.activeSubscriptions / systemStats.totalCompanies) * 100).toFixed(1)}% active rate\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-foreground\">Monthly Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">₹{systemStats.monthlyRevenue.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground dark:text-gray-400\">\n              +12.5% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium text-foreground\">Active Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground dark:text-gray-400\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-foreground\">{systemStats.activeUsers}</div>\n            <p className=\"text-xs text-muted-foreground dark:text-gray-400\">\n              +5.2% from yesterday\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"companies\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4 dark:bg-gray-800 dark:border-gray-700\">\n          <TabsTrigger value=\"companies\" className=\"dark:text-gray-300 dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-white\">Companies</TabsTrigger>\n          <TabsTrigger value=\"subscriptions\" className=\"dark:text-gray-300 dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-white\">Subscriptions</TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"dark:text-gray-300 dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-white\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"dark:text-gray-300 dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-white\">System</TabsTrigger>\n        </TabsList>\n\n        {/* Companies Tab */}\n        <TabsContent value=\"companies\" className=\"space-y-6\">\n          {/* Filters and Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground dark:text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search companies...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:placeholder:text-gray-400\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48 dark:bg-gray-800 dark:border-gray-700 dark:text-white\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent className=\"dark:bg-gray-800 dark:border-gray-700\">\n                  <SelectItem value=\"all\" className=\"dark:text-white dark:hover:bg-gray-700\">All Status</SelectItem>\n                  <SelectItem value=\"active\" className=\"dark:text-white dark:hover:bg-gray-700\">Active</SelectItem>\n                  <SelectItem value=\"expired\" className=\"dark:text-white dark:hover:bg-gray-700\">Expired</SelectItem>\n                  <SelectItem value=\"suspended\" className=\"dark:text-white dark:hover:bg-gray-700\">Suspended</SelectItem>\n                  <SelectItem value=\"pending\" className=\"dark:text-white dark:hover:bg-gray-700\">Pending</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={planFilter} onValueChange={setPlanFilter}>\n                <SelectTrigger className=\"w-48 dark:bg-gray-800 dark:border-gray-700 dark:text-white\">\n                  <SelectValue placeholder=\"Filter by plan\" />\n                </SelectTrigger>\n                <SelectContent className=\"dark:bg-gray-800 dark:border-gray-700\">\n                  <SelectItem value=\"all\" className=\"dark:text-white dark:hover:bg-gray-700\">All Plans</SelectItem>\n                  <SelectItem value=\"basic\" className=\"dark:text-white dark:hover:bg-gray-700\">Basic</SelectItem>\n                  <SelectItem value=\"premium\" className=\"dark:text-white dark:hover:bg-gray-700\">Premium</SelectItem>\n                  <SelectItem value=\"enterprise\" className=\"dark:text-white dark:hover:bg-gray-700\">Enterprise</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isAddCompanyOpen} onOpenChange={setIsAddCompanyOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"dark:bg-blue-600 dark:hover:bg-blue-700 dark:text-white\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Company\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-2xl dark:bg-gray-800 dark:border-gray-700\">\n                <DialogHeader>\n                  <DialogTitle className=\"dark:text-white\">Add New Company</DialogTitle>\n                </DialogHeader>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\" className=\"dark:text-white\">Company Name</Label>\n                    <Input id=\"name\" placeholder=\"Enter company name\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"dark:text-white\">Email</Label>\n                    <Input id=\"email\" type=\"email\" placeholder=\"Enter email\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\" className=\"dark:text-white\">Phone</Label>\n                    <Input id=\"phone\" placeholder=\"Enter phone number\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"plan\" className=\"dark:text-white\">Subscription Plan</Label>\n                    <Select>\n                      <SelectTrigger className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white\">\n                        <SelectValue placeholder=\"Select plan\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"dark:bg-gray-800 dark:border-gray-700\">\n                        {subscriptionPlans.map(plan => (\n                          <SelectItem key={plan.id} value={plan.id} className=\"dark:text-white dark:hover:bg-gray-700\">\n                            {plan.name} - ₹{plan.price}/month\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2 col-span-2\">\n                    <Label htmlFor=\"address\" className=\"dark:text-white\">Address</Label>\n                    <Input id=\"address\" placeholder=\"Enter company address\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddCompanyOpen(false)} className=\"dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\">\n                    Cancel\n                  </Button>\n                  <Button onClick={() => {\n                    toast.success('Company added successfully!');\n                    setIsAddCompanyOpen(false);\n                  }} className=\"dark:bg-blue-600 dark:hover:bg-blue-700 dark:text-white\">\n                    Add Company\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Companies Table */}\n          <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n            <CardHeader>\n              <CardTitle className=\"dark:text-white\">Companies Overview</CardTitle>\n              <CardDescription className=\"dark:text-gray-300\">\n                Manage all companies and their subscription status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow className=\"dark:border-gray-700 dark:hover:bg-gray-700\">\n                    <TableHead className=\"dark:text-white\">Company</TableHead>\n                    <TableHead className=\"dark:text-white\">Plan</TableHead>\n                    <TableHead className=\"dark:text-white\">Status</TableHead>\n                    <TableHead className=\"dark:text-white\">Monthly Fee</TableHead>\n                    <TableHead className=\"dark:text-white\">Employees</TableHead>\n                    <TableHead className=\"dark:text-white\">Last Login</TableHead>\n                    <TableHead className=\"dark:text-white\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredCompanies.map((company) => (\n                    <TableRow key={company.id} className=\"dark:border-gray-700 dark:hover:bg-gray-700\">\n                      <TableCell className=\"dark:text-white\">\n                        <div>\n                          <div className=\"font-medium\">{company.name}</div>\n                          <div className=\"text-sm text-muted-foreground dark:text-gray-400\">{company.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPlanColor(company.subscriptionPlan)}>\n                          {company.subscriptionPlan}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(company.subscriptionStatus)}>\n                          {company.subscriptionStatus}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"dark:text-white\">₹{company.monthlyFee.toLocaleString()}</TableCell>\n                      <TableCell className=\"dark:text-white\">{company.employees}</TableCell>\n                      <TableCell className=\"dark:text-white\">\n                        {company.lastLogin.toLocaleDateString()}\n                        <div className=\"text-xs text-muted-foreground dark:text-gray-400\">\n                          {company.lastLogin.toLocaleTimeString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => navigate(`/admin/company/${company.id}`)}\n                            className=\"dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\"\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\"\n                            onClick={() => navigate(`/admin/company/${company.id}`, { state: { startEditing: true } })}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\"\n                            onClick={() => navigate(`/admin/company/${company.id}`, { state: { tab: 'settings' } })}\n                          >\n                            <Settings className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Subscriptions Tab */}\n        <TabsContent value=\"subscriptions\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Subscription Plans */}\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"dark:text-white\">Subscription Plans</CardTitle>\n                  <Dialog open={isAddPlanOpen} onOpenChange={setIsAddPlanOpen}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" className=\"dark:bg-blue-600 dark:hover:bg-blue-700 dark:text-white\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Plan\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"dark:bg-gray-800 dark:border-gray-700\">\n                      <DialogHeader>\n                        <DialogTitle className=\"dark:text-white\">Add New Subscription Plan</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"planName\" className=\"dark:text-white\">Plan Name</Label>\n                          <Input id=\"planName\" placeholder=\"Enter plan name\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"planPrice\" className=\"dark:text-white\">Monthly Price (₹)</Label>\n                          <Input id=\"planPrice\" type=\"number\" placeholder=\"Enter price\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"maxEmployees\" className=\"dark:text-white\">Max Employees</Label>\n                          <Input id=\"maxEmployees\" type=\"number\" placeholder=\"Enter max employees\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"maxTransactions\" className=\"dark:text-white\">Max Transactions</Label>\n                          <Input id=\"maxTransactions\" type=\"number\" placeholder=\"Enter max transactions\" className=\"dark:bg-gray-700 dark:border-gray-600 dark:text-white dark:placeholder:text-gray-400\" />\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"outline\" onClick={() => setIsAddPlanOpen(false)} className=\"dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\">\n                          Cancel\n                        </Button>\n                        <Button onClick={() => {\n                          toast.success('Plan added successfully!');\n                          setIsAddPlanOpen(false);\n                        }} className=\"dark:bg-blue-600 dark:hover:bg-blue-700 dark:text-white\">\n                          Add Plan\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {subscriptionPlans.map((plan) => (\n                    <div key={plan.id} className=\"border rounded-lg p-4 dark:border-gray-700 dark:bg-gray-700\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"font-semibold dark:text-white\">{plan.name}</h3>\n                        <Badge className={getPlanColor(plan.name.toLowerCase())}>\n                          ₹{plan.price}/month\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground dark:text-gray-300 mb-3\">\n                        <div>Max Employees: {plan.maxEmployees}</div>\n                        <div>Max Transactions: {plan.maxTransactions.toLocaleString()}</div>\n                        <div>Storage: {plan.storage}</div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground dark:text-gray-400\">\n                        Features: {plan.features.join(', ')}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Subscription Analytics */}\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Subscription Analytics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Total Revenue</span>\n                    <span className=\"font-bold dark:text-white\">₹{systemStats.totalRevenue.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Monthly Recurring Revenue</span>\n                    <span className=\"font-bold dark:text-white\">₹{systemStats.monthlyRevenue.toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Average Revenue Per User</span>\n                    <span className=\"font-bold dark:text-white\">₹{(systemStats.monthlyRevenue / systemStats.totalCompanies).toFixed(0)}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Churn Rate</span>\n                    <span className=\"font-bold text-red-600 dark:text-red-400\">2.3%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Revenue Trends</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground dark:text-gray-400\">\n                  <BarChart3 className=\"w-16 h-16\" />\n                  <span className=\"ml-2\">Revenue Chart</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Subscription Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground dark:text-gray-400\">\n                  <PieChart className=\"w-16 h-16\" />\n                  <span className=\"ml-2\">Plan Distribution</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* System Tab */}\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">System Health</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">System Status</span>\n                    <Badge className={getSystemHealthColor(systemStats.systemHealth)}>\n                      {systemStats.systemHealth}\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Uptime</span>\n                    <span className=\"font-bold dark:text-white\">{systemStats.uptime}%</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Active Users</span>\n                    <span className=\"font-bold dark:text-white\">{systemStats.activeUsers}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"dark:text-white\">Database Status</span>\n                    <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n                      <CheckCircle className=\"w-3 h-3 mr-1\" />\n                      Healthy\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"dark:bg-gray-800 dark:border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"dark:text-white\">Recent Activities</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"dark:text-white\">New company &quot;Tech Cafe&quot; registered</span>\n                    <span className=\"text-muted-foreground dark:text-gray-400\">2 hours ago</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                    <span className=\"dark:text-white\">Subscription renewed for &quot;Bakery Delight&quot;</span>\n                    <span className=\"text-muted-foreground dark:text-gray-400\">4 hours ago</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-yellow-500 rounded-full\"></div>\n                    <span className=\"dark:text-white\">Payment failed for &quot;Restaurant Elite&quot;</span>\n                    <span className=\"text-muted-foreground dark:text-gray-400\">6 hours ago</span>\n                  </div>\n                  <div className=\"flex items-center gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span className=\"dark:text-white\">System backup completed</span>\n                    <span className=\"text-muted-foreground dark:text-gray-400\">1 day ago</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","size_bytes":34995},"client/src/pages/AdminSettings.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useAuth } from '@/hooks/useAuth';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function AdminSettings() {\n  const { adminAuth } = useAuth();\n  const [crmLeadSources, setCrmLeadSources] = useState<string>('website,referral,cold_call');\n  const [crmStages, setCrmStages] = useState<string>('discovery,qualification,proposal,negotiation,closed_won,closed_lost');\n  const [supportEmail, setSupportEmail] = useState<string>('support@acebill.com');\n  const [brandName, setBrandName] = useState<string>('Ace-Bill');\n\n  if (!adminAuth.isAuthenticated) {\n    return <div className=\"p-6\">Unauthorized</div>;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold\">Admin Settings</h1>\n        <p className=\"text-muted-foreground\">Configure software company settings and CRM defaults</p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"company\">Company</TabsTrigger>\n          <TabsTrigger value=\"crm\">CRM Defaults</TabsTrigger>\n          <TabsTrigger value=\"support\">Support</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Brand</CardTitle>\n              <CardDescription>Set product branding visible to all tenants.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"brandName\">Product Name</Label>\n                <Input id=\"brandName\" value={brandName} onChange={(e) => setBrandName(e.target.value)} />\n              </div>\n              <Button onClick={() => toast.success('Admin brand settings saved (demo)')}>Save</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"crm\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>CRM Defaults</CardTitle>\n              <CardDescription>Defaults for lead sources and pipeline stages for staff in Admin CRM.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"leadSources\">Lead Sources (comma separated)</Label>\n                <Input id=\"leadSources\" value={crmLeadSources} onChange={(e) => setCrmLeadSources(e.target.value)} />\n              </div>\n              <div>\n                <Label htmlFor=\"stages\">Pipeline Stages (comma separated)</Label>\n                <Input id=\"stages\" value={crmStages} onChange={(e) => setCrmStages(e.target.value)} />\n              </div>\n              <Button onClick={() => toast.success('CRM defaults saved (demo)')}>Save</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"support\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Support</CardTitle>\n              <CardDescription>Contact details and SLA for your support team.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"supportEmail\">Support Email</Label>\n                <Input id=\"supportEmail\" value={supportEmail} onChange={(e) => setSupportEmail(e.target.value)} />\n              </div>\n              <Button onClick={() => toast.success('Support settings saved (demo)')}>Save</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n\n","size_bytes":3957},"client/src/pages/BillTestPage.tsx":{"content":"import React from 'react';\nimport { PrintableBill } from '@/components/PrintableBill';\nimport { Transaction } from '@/lib/types';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { printDriver } from '@/lib/printDrivers';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function BillTestPage() {\n  // Sample transaction data for testing\n  const sampleTransaction: Transaction = {\n    id: 'TXN-' + Date.now(),\n    items: [\n      {\n        product: {\n          id: 'prod1',\n          name: 'Premium Coffee',\n          price: 120.00,\n          cost: 60.00,\n          sku: 'COFF001',\n          category: 'Beverages',\n          stock: 50,\n          minStock: 5,\n          taxRate: 18,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        quantity: 2\n      },\n      {\n        product: {\n          id: 'prod2',\n          name: 'Chocolate Cake',\n          price: 85.50,\n          cost: 40.00,\n          sku: 'CAKE002',\n          category: 'Desserts',\n          stock: 20,\n          minStock: 3,\n          taxRate: 18,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        quantity: 1\n      },\n      {\n        product: {\n          id: 'prod3',\n          name: 'Sandwich Combo',\n          price: 150.00,\n          cost: 75.00,\n          sku: 'SAND003',\n          category: 'Food',\n          stock: 30,\n          minStock: 8,\n          taxRate: 18,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        },\n        quantity: 1\n      }\n    ],\n    subtotal: 475.50,\n    tax: 85.59,\n    discount: 25.00,\n    total: 536.09,\n    paymentMethod: 'cash',\n    paymentDetails: {\n      cashAmount: 600.00,\n      change: 63.91\n    },\n    timestamp: new Date(),\n    customerName: 'John Doe',\n    customerPhone: '+91 98765 43210',\n    status: 'completed'\n  };\n\n  const cardTransaction: Transaction = {\n    ...sampleTransaction,\n    id: 'CARD-' + Date.now(),\n    paymentMethod: 'card',\n    paymentDetails: {\n      cardAmount: 536.09\n    },\n    receipt: 'TXN' + Math.random().toString(36).substr(2, 9).toUpperCase()\n  };\n\n  const handleTestPrint = async (transaction: Transaction) => {\n    try {\n      const success = await printDriver.print(transaction, { \n        paperSize: 'thermal',\n        copies: 1,\n        autocut: true,\n        cashdraw: false\n      });\n      \n      if (success) {\n        toast.success('Print job sent successfully!');\n      } else {\n        toast.error('Print failed. Please check your printer settings.');\n      }\n    } catch (error) {\n      console.error('Print error:', error);\n      toast.error('Print error occurred');\n    }\n  };\n\n  const handleTestA4Print = async (transaction: Transaction) => {\n    try {\n      const success = await printDriver.print(transaction, { \n        paperSize: 'a4',\n        copies: 1,\n        autocut: false,\n        cashdraw: false\n      });\n      \n      if (success) {\n        toast.success('A4 print job sent successfully!');\n      } else {\n        toast.error('A4 print failed. Please check your printer settings.');\n      }\n    } catch (error) {\n      console.error('Print error:', error);\n      toast.error('Print error occurred');\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"text-center\">\n        <h1 className=\"text-3xl font-bold mb-2\">Printable Bill Test Page</h1>\n        <p className=\"text-gray-600\">Test and preview the improved printable bill functionality</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Cash Transaction */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Cash Transaction Bill</span>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => handleTestPrint(sampleTransaction)}\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  Test Print\n                </Button>\n                <Button \n                  onClick={() => handleTestA4Print(sampleTransaction)}\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  A4 Print\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <PrintableBill \n              transaction={sampleTransaction} \n              showPreview={true}\n            />\n          </CardContent>\n        </Card>\n\n        {/* Card Transaction */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Card Transaction Bill</span>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={() => handleTestPrint(cardTransaction)}\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  Test Print\n                </Button>\n                <Button \n                  onClick={() => handleTestA4Print(cardTransaction)}\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  A4 Print\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <PrintableBill \n              transaction={cardTransaction} \n              showPreview={true}\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Features Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Improved Bill Features</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold text-lg mb-3\">Thermal Receipt (80mm)</h3>\n              <ul className=\"space-y-2 text-sm\">\n                <li>✅ <strong>Dark, bold text</strong> for better readability</li>\n                <li>✅ <strong>Optimized layout</strong> for 80mm thermal paper</li>\n                <li>✅ <strong>Compact design</strong> to minimize paper usage</li>\n                <li>✅ <strong>Professional formatting</strong> with clear sections</li>\n                <li>✅ <strong>Print-ready</strong> with proper margins</li>\n                <li>✅ <strong>GST compliant</strong> with tax breakdown</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg mb-3\">A4 Invoice</h3>\n              <ul className=\"space-y-2 text-sm\">\n                <li>✅ <strong>Professional layout</strong> for standard printers</li>\n                <li>✅ <strong>Detailed item breakdown</strong> with SKU information</li>\n                <li>✅ <strong>Company branding</strong> with logo and details</li>\n                <li>✅ <strong>Payment details</strong> clearly displayed</li>\n                <li>✅ <strong>Tax calculations</strong> properly formatted</li>\n                <li>✅ <strong>Print-optimized</strong> for A4 paper</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Instructions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How to Use</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">For Thermal Printers (PoS Receipts):</h4>\n              <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                <li>Click \"Test Print\" to print a sample receipt</li>\n                <li>Ensure your thermal printer is set to 80mm paper width</li>\n                <li>The receipt will automatically format for thermal paper</li>\n                <li>Text is optimized for dark, clear printing</li>\n              </ol>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">For Standard Printers (A4):</h4>\n              <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                <li>Click \"A4 Print\" to print a detailed invoice</li>\n                <li>Use standard A4 paper in your printer</li>\n                <li>The invoice includes detailed item information</li>\n                <li>Professional layout suitable for business records</li>\n              </ol>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Preview and Download:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                <li>Use the \"Preview\" button to see how the bill will look</li>\n                <li>Use the \"Download\" button to save as HTML file</li>\n                <li>Test different transaction types (cash/card)</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8970},"client/src/pages/CompanyDashboard.tsx":{"content":"// src/pages/CompanyDashboard.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { SubscriptionPlan, CompanySubscription, SupportTicket } from '@/lib/subscription-types';\nimport { Company } from '@/lib/types';\nimport { useAuth } from '@/hooks/useAuth'; // To get the logged-in company\nimport {\n  getSubscriptionByCompany,\n  getSubscriptionPlans,\n  getTicketsByCompany,\n  createSupportTicket,\n} from '@/lib/subscription-storage';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { PlusCircle } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\n\nexport default function CompanyDashboard() {\n  const { company } = useAuth(); // Assuming useAuth provides the logged-in company's details\n  const [subscription, setSubscription] = useState<CompanySubscription | null>(null);\n  const [plan, setPlan] = useState<SubscriptionPlan | null>(null);\n  const [tickets, setTickets] = useState<SupportTicket[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isTicketDialogOpen, setIsTicketDialogOpen] = useState(false);\n  const [newTicketSubject, setNewTicketSubject] = useState('');\n  const [newTicketMessage, setNewTicketMessage] = useState('');\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      if (!company) {\n        setIsLoading(false);\n        return;\n      }\n      \n      try {\n        console.log('Fetching data for company:', company.id);\n        \n        const [sub, plans, supportTickets] = await Promise.all([\n          getSubscriptionByCompany(company.id),\n          getSubscriptionPlans(),\n          getTicketsByCompany(company.id),\n        ]);\n        \n        console.log('Data fetched:', {\n          subscription: sub,\n          plans: plans,\n          supportTickets: supportTickets,\n          plansType: typeof plans,\n          plansIsArray: Array.isArray(plans),\n          ticketsType: typeof supportTickets,\n          ticketsIsArray: Array.isArray(supportTickets)\n        });\n        \n        if (sub) {\n          setSubscription(sub);\n          // Ensure plans is an array before calling .find()\n          if (Array.isArray(plans)) {\n            const activePlan = plans.find(p => p.id === sub.planId);\n            setPlan(activePlan || null);\n          } else {\n            console.warn('getSubscriptionPlans() did not return an array:', plans);\n            setPlan(null);\n          }\n        }\n        \n        // Ensure supportTickets is an array before setting it\n        if (Array.isArray(supportTickets)) {\n          setTickets(supportTickets);\n        } else {\n          console.warn('getTicketsByCompany() did not return an array:', supportTickets);\n          setTickets([]);\n        }\n\n      } catch (error) {\n        console.error(\"Failed to fetch company data:\", error);\n        toast.error('Could not load your dashboard data.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [company]);\n\n  const handleCreateTicket = async () => {\n    if (!newTicketSubject || !newTicketMessage) {\n      toast.error('Please provide a subject and a message for your ticket.');\n      return;\n    }\n    \n    if (!company) {\n      toast.error('You must be logged in to create a ticket.');\n      return;\n    }\n    \n    try {\n      await createSupportTicket({\n        companyId: company.id,\n        subject: newTicketSubject,\n        message: newTicketMessage,\n      });\n      toast.success('Support ticket created successfully!');\n      setIsTicketDialogOpen(false);\n      setNewTicketSubject('');\n      setNewTicketMessage('');\n      // Refresh tickets\n      const supportTickets = await getTicketsByCompany(company.id);\n      if (Array.isArray(supportTickets)) {\n        setTickets(supportTickets);\n      } else {\n        console.warn('getTicketsByCompany() did not return an array:', supportTickets);\n        setTickets([]);\n      }\n    } catch (error) {\n      toast.error('Failed to create support ticket.');\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"p-8\">Loading your dashboard...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Company Dashboard</h1>\n\n      {/* My Subscription */}\n      <Card>\n        <CardHeader>\n          <CardTitle>My Subscription</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {subscription && plan ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-xl font-semibold\">{plan.name}</h3>\n                <Badge variant={subscription.status === 'active' ? 'default' : 'destructive'}>\n                  {subscription.status}\n                </Badge>\n              </div>\n              <p>\n                Active from {new Date(subscription.startDate).toLocaleDateString()} to {new Date(subscription.endDate).toLocaleDateString()}\n              </p>\n              <div>\n                <Label>Token Usage</Label>\n                <Progress value={(subscription.tokensUsed / plan.tokenLimit) * 100} className=\"w-full\" />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  {subscription.tokensUsed} / {plan.tokenLimit} tokens used\n                </p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Plan Features:</h4>\n                <ul className=\"list-disc list-inside\">\n                  {Array.isArray(plan.features) ? (\n                    plan.features.map((feature, index) => (\n                      <li key={index}>{feature}</li>\n                    ))\n                  ) : (\n                    <li>No features listed</li>\n                  )}\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <p>You do not have an active subscription. Please contact support.</p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Customer Support */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Customer Support</CardTitle>\n          <Dialog open={isTicketDialogOpen} onOpenChange={setIsTicketDialogOpen}>\n            <DialogTrigger asChild>\n              <Button>\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Create New Ticket\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader><DialogTitle>Create Support Ticket</DialogTitle></DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Input id=\"subject\" value={newTicketSubject} onChange={(e) => setNewTicketSubject(e.target.value)} />\n                </div>\n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea id=\"message\" value={newTicketMessage} onChange={(e) => setNewTicketMessage(e.target.value)} />\n                </div>\n                <Button onClick={handleCreateTicket} className=\"w-full\">Submit Ticket</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader><TableRow><TableHead>Subject</TableHead><TableHead>Status</TableHead><TableHead>Last Updated</TableHead></TableRow></TableHeader>\n            <TableBody>\n              {Array.isArray(tickets) && tickets.length > 0 ? (\n                tickets.map(ticket => (\n                  <TableRow key={ticket.id}>\n                    <TableCell>{ticket.subject}</TableCell>\n                    <TableCell><Badge variant={ticket.status === 'closed' ? 'secondary' : 'default'}>{ticket.status}</Badge></TableCell>\n                    <TableCell>{new Date(ticket.updatedAt).toLocaleDateString()}</TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                <TableRow>\n                  <TableCell colSpan={3} className=\"text-center text-gray-500\">\n                    No support tickets found\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8697},"client/src/pages/CompanyDetails.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  ArrowLeft,\n  Building2, \n  Users, \n  CreditCard, \n  TrendingUp,\n  Calendar,\n  Edit,\n  Save,\n  X,\n  CheckCircle,\n  XCircle,\n  Clock,\n  DollarSign,\n  Activity,\n  BarChart3,\n  PieChart,\n  Settings,\n  Shield,\n  Database,\n  Server,\n  Phone,\n  Mail,\n  MapPin,\n  User,\n  FileText,\n  AlertTriangle,\n  Receipt\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\n\ninterface Company {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  subscriptionPlan: 'basic' | 'premium' | 'enterprise';\n  subscriptionStatus: 'active' | 'expired' | 'suspended' | 'pending';\n  startDate: Date;\n  endDate: Date;\n  monthlyFee: number;\n  features: string[];\n  employees: number;\n  transactions: number;\n  revenue: number;\n  lastLogin: Date;\n  status: 'active' | 'inactive';\n  owner: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  billing: {\n    nextBillingDate: Date;\n    lastPaymentDate: Date;\n    lastPaymentAmount: number;\n    paymentMethod: string;\n    outstandingAmount: number;\n  };\n  usage: {\n    storageUsed: string;\n    storageLimit: string;\n    transactionsThisMonth: number;\n    transactionsLimit: number;\n    employeesActive: number;\n    employeesLimit: number;\n  };\n}\n\ninterface Transaction {\n  id: string;\n  date: Date;\n  amount: number;\n  type: 'sale' | 'refund' | 'adjustment';\n  status: 'completed' | 'pending' | 'failed';\n  customer: string;\n  items: number;\n}\n\ninterface Employee {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  status: 'active' | 'inactive';\n  lastLogin: Date;\n  permissions: string[];\n}\n\nexport default function CompanyDetails() {\n  const { companyId } = useParams();\n  const [, setLocation] = useLocation();\n  const location = useLocation() as any;\n  const [company, setCompany] = useState<Company | null>(null);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [isEditing, setIsEditing] = useState(false);\n  const [isSuspendDialogOpen, setIsSuspendDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  useEffect(() => {\n    loadCompanyData();\n  }, [companyId]);\n\n  // Handle navigation state to auto-open editing or specific tab\n  useEffect(() => {\n    if (location?.state?.startEditing) {\n      setIsEditing(true);\n    }\n    if (location?.state?.tab === 'settings') {\n      // If you add controlled Tabs, you could set default here; for now, scroll to settings section\n      const el = document.getElementById('company-settings-section');\n      if (el) {\n        setTimeout(() => el.scrollIntoView({ behavior: 'smooth' }), 200);\n      }\n    }\n  }, [location?.state]);\n\n  const loadCompanyData = () => {\n    // Mock company data\n    const mockCompany: Company = {\n      id: companyId || '1',\n      name: 'Cafe Central',\n      email: 'admin@cafecentral.com',\n      phone: '+91 98765 43210',\n      address: '123 Main St, Mumbai, India',\n      subscriptionPlan: 'premium',\n      subscriptionStatus: 'active',\n      startDate: new Date('2024-01-01'),\n      endDate: new Date('2024-12-31'),\n      monthlyFee: 2999,\n      features: ['POS System', 'Inventory Management', 'Reports', 'Multi-location'],\n      employees: 15,\n      transactions: 1250,\n      revenue: 450000,\n      lastLogin: new Date(),\n      status: 'active',\n      owner: {\n        name: 'Rajesh Kumar',\n        email: 'rajesh@cafecentral.com',\n        phone: '+91 98765 43210'\n      },\n      billing: {\n        nextBillingDate: new Date('2024-12-31'),\n        lastPaymentDate: new Date('2024-11-30'),\n        lastPaymentAmount: 2999,\n        paymentMethod: 'Credit Card',\n        outstandingAmount: 0\n      },\n      usage: {\n        storageUsed: '8.5GB',\n        storageLimit: '20GB',\n        transactionsThisMonth: 1250,\n        transactionsLimit: 5000,\n        employeesActive: 12,\n        employeesLimit: 25\n      }\n    };\n\n    const mockTransactions: Transaction[] = [\n      {\n        id: '1',\n        date: new Date(),\n        amount: 1250,\n        type: 'sale',\n        status: 'completed',\n        customer: 'John Doe',\n        items: 3\n      },\n      {\n        id: '2',\n        date: new Date(Date.now() - 86400000),\n        amount: 850,\n        type: 'sale',\n        status: 'completed',\n        customer: 'Jane Smith',\n        items: 2\n      },\n      {\n        id: '3',\n        date: new Date(Date.now() - 172800000),\n        amount: 2100,\n        type: 'sale',\n        status: 'completed',\n        customer: 'Mike Johnson',\n        items: 5\n      }\n    ];\n\n    const mockEmployees: Employee[] = [\n      {\n        id: '1',\n        name: 'Rajesh Kumar',\n        email: 'rajesh@cafecentral.com',\n        role: 'Owner',\n        status: 'active',\n        lastLogin: new Date(),\n        permissions: ['all']\n      },\n      {\n        id: '2',\n        name: 'Priya Sharma',\n        email: 'priya@cafecentral.com',\n        role: 'Manager',\n        status: 'active',\n        lastLogin: new Date(Date.now() - 3600000),\n        permissions: ['sales', 'inventory', 'reports']\n      },\n      {\n        id: '3',\n        name: 'Amit Patel',\n        email: 'amit@cafecentral.com',\n        role: 'Cashier',\n        status: 'active',\n        lastLogin: new Date(Date.now() - 7200000),\n        permissions: ['sales']\n      }\n    ];\n\n    setCompany(mockCompany);\n    setTransactions(mockTransactions);\n    setEmployees(mockEmployees);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'expired': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'suspended': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'pending': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getPlanColor = (plan: string) => {\n    switch (plan) {\n      case 'basic': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'premium': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'enterprise': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const handleSuspendCompany = () => {\n    if (company) {\n      setCompany({ ...company, status: 'inactive', subscriptionStatus: 'suspended' });\n      toast.success('Company suspended successfully');\n      setIsSuspendDialogOpen(false);\n    }\n  };\n\n  const handleDeleteCompany = () => {\n    toast.success('Company deleted successfully');\n    navigate('/admin');\n    setIsDeleteDialogOpen(false);\n  };\n\n  if (!company) {\n    return <div className=\"p-6\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" size=\"sm\" onClick={() => navigate('/admin')}>\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Admin\n          </Button>\n          <div>\n            <h1 className=\"text-3xl font-bold\">{company.name}</h1>\n            <p className=\"text-muted-foreground\">Company Management & Analytics</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge className={getStatusColor(company.subscriptionStatus)}>\n            {company.subscriptionStatus}\n          </Badge>\n          <Badge className={getPlanColor(company.subscriptionPlan)}>\n            {company.subscriptionPlan}\n          </Badge>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => setIsEditing(!isEditing)}>\n            <Edit className=\"w-4 h-4 mr-2\" />\n            {isEditing ? 'Cancel' : 'Edit'}\n          </Button>\n          <Dialog open={isSuspendDialogOpen} onOpenChange={setIsSuspendDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">\n                <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                Suspend\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Suspend Company</DialogTitle>\n              </DialogHeader>\n              <p>Are you sure you want to suspend {company.name}? This will disable their access to the system.</p>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsSuspendDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button variant=\"destructive\" onClick={handleSuspendCompany}>\n                  Suspend Company\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n            <DialogTrigger asChild>\n              <Button variant=\"destructive\" size=\"sm\">\n                <X className=\"w-4 h-4 mr-2\" />\n                Delete\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Delete Company</DialogTitle>\n              </DialogHeader>\n              <p>Are you sure you want to permanently delete {company.name}? This action cannot be undone.</p>\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button variant=\"destructive\" onClick={handleDeleteCompany}>\n                  Delete Company\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{company.revenue.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +12.5% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Transactions</CardTitle>\n            <Receipt className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{company.transactions}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {company.usage.transactionsThisMonth} this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Employees</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{company.usage.employeesActive}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              of {company.usage.employeesLimit} limit\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Storage Used</CardTitle>\n            <Database className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{company.usage.storageUsed}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              of {company.usage.storageLimit} limit\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"billing\">Billing</TabsTrigger>\n          <TabsTrigger value=\"employees\">Employees</TabsTrigger>\n          <TabsTrigger value=\"transactions\">Transactions</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Company Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Company Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Company Name</Label>\n                    <div className=\"mt-1\">{company.name}</div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Email</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <Mail className=\"w-4 h-4\" />\n                      {company.email}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Phone</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <Phone className=\"w-4 h-4\" />\n                      {company.phone}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Status</Label>\n                    <div className=\"mt-1\">\n                      <Badge className={getStatusColor(company.status)}>\n                        {company.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Address</Label>\n                  <div className=\"mt-1 flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4\" />\n                    {company.address}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Owner Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Owner Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Owner Name</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <User className=\"w-4 h-4\" />\n                      {company.owner.name}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Owner Email</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <Mail className=\"w-4 h-4\" />\n                      {company.owner.email}\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Owner Phone</Label>\n                  <div className=\"mt-1 flex items-center gap-2\">\n                    <Phone className=\"w-4 h-4\" />\n                    {company.owner.phone}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Subscription Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Subscription Details</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Plan</Label>\n                  <div className=\"mt-1\">\n                    <Badge className={getPlanColor(company.subscriptionPlan)}>\n                      {company.subscriptionPlan}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Monthly Fee</Label>\n                  <div className=\"mt-1 text-lg font-bold\">₹{company.monthlyFee.toLocaleString()}</div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Subscription Period</Label>\n                  <div className=\"mt-1\">\n                    {company.startDate.toLocaleDateString()} - {company.endDate.toLocaleDateString()}\n                  </div>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Label className=\"text-sm font-medium\">Features</Label>\n                <div className=\"mt-2 flex flex-wrap gap-2\">\n                  {company.features.map((feature, index) => (\n                    <Badge key={index} variant=\"outline\">\n                      {feature}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Billing Tab */}\n        <TabsContent value=\"billing\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Billing Information</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Next Billing Date</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      {company.billing.nextBillingDate.toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Last Payment Date</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4\" />\n                      {company.billing.lastPaymentDate.toLocaleDateString()}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Last Payment Amount</Label>\n                    <div className=\"mt-1 text-lg font-bold\">₹{company.billing.lastPaymentAmount.toLocaleString()}</div>\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Payment Method</Label>\n                    <div className=\"mt-1 flex items-center gap-2\">\n                      <CreditCard className=\"w-4 h-4\" />\n                      {company.billing.paymentMethod}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Outstanding Amount</Label>\n                    <div className=\"mt-1 text-lg font-bold text-red-600\">\n                      ₹{company.billing.outstandingAmount.toLocaleString()}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Employees Tab */}\n        <TabsContent value=\"employees\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Employees</CardTitle>\n              <CardDescription>\n                Manage company employees and their permissions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Last Login</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {employees.map((employee) => (\n                    <TableRow key={employee.id}>\n                      <TableCell>{employee.name}</TableCell>\n                      <TableCell>{employee.email}</TableCell>\n                      <TableCell>{employee.role}</TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(employee.status)}>\n                          {employee.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {employee.lastLogin.toLocaleDateString()}\n                        <div className=\"text-xs text-muted-foreground\">\n                          {employee.lastLogin.toLocaleTimeString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Settings className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Transactions Tab */}\n        <TabsContent value=\"transactions\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Transactions</CardTitle>\n              <CardDescription>\n                View recent sales and transactions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Items</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {transactions.map((transaction) => (\n                    <TableRow key={transaction.id}>\n                      <TableCell>\n                        {transaction.date.toLocaleDateString()}\n                        <div className=\"text-xs text-muted-foreground\">\n                          {transaction.date.toLocaleTimeString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>{transaction.customer}</TableCell>\n                      <TableCell>₹{transaction.amount.toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Badge className={transaction.type === 'sale' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {transaction.type}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={transaction.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}>\n                          {transaction.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{transaction.items}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Settings Tab */}\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Settings</CardTitle>\n              <CardDescription>\n                Manage company configuration and preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent id=\"company-settings-section\">\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"companyName\">Company Name</Label>\n                    <Input id=\"companyName\" defaultValue={company.name} disabled={!isEditing} />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"companyEmail\">Email</Label>\n                    <Input id=\"companyEmail\" defaultValue={company.email} disabled={!isEditing} />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"companyPhone\">Phone</Label>\n                    <Input id=\"companyPhone\" defaultValue={company.phone} disabled={!isEditing} />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"subscriptionPlan\">Subscription Plan</Label>\n                    <Select defaultValue={company.subscriptionPlan} disabled={!isEditing}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"basic\">Basic</SelectItem>\n                        <SelectItem value=\"premium\">Premium</SelectItem>\n                        <SelectItem value=\"enterprise\">Enterprise</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                {isEditing && (\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsEditing(false)}>\n                      Cancel\n                    </Button>\n                    <Button onClick={() => {\n                      toast.success('Company settings updated successfully!');\n                      setIsEditing(false);\n                    }}>\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      Save Changes\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","size_bytes":27640},"client/src/pages/CompanyLogin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../hooks/useAuth';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '../components/ui/tabs';\nimport { Loader2, Building2, Shield, User, Eye, EyeOff, AlertTriangle } from 'lucide-react';\n\nexport default function CompanyLogin() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [username, setUsername] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginMode, setLoginMode] = useState<'company' | 'admin'>('company');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showAdminPassword, setShowAdminPassword] = useState(false);\n  const [loginAttempts, setLoginAttempts] = useState(0);\n  const [isLocked, setIsLocked] = useState(false);\n  const [lockoutTime, setLockoutTime] = useState<Date | null>(null);\n  \n  const { loginCompany, loginAdmin } = useAuth();\n  const [, setLocation] = useLocation();\n  const location = useLocation();\n\n  // Security: Check for lockout\n  useEffect(() => {\n    const savedLockout = localStorage.getItem('login_lockout');\n    if (savedLockout) {\n      const lockoutData = JSON.parse(savedLockout);\n      const now = new Date();\n      const lockoutEnd = new Date(lockoutData.endTime);\n      \n      if (now < lockoutEnd) {\n        setIsLocked(true);\n        setLockoutTime(lockoutEnd);\n      } else {\n        localStorage.removeItem('login_lockout');\n        setIsLocked(false);\n        setLoginAttempts(0);\n      }\n    }\n  }, []);\n\n  // Security: Input validation\n  const validateEmail = (email: string): boolean => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const validatePassword = (password: string): boolean => {\n    return password.length >= 6;\n  };\n\n  const validateUsername = (username: string): boolean => {\n    return username.length >= 3 && /^[a-zA-Z0-9_]+$/.test(username);\n  };\n\n  // Security: Rate limiting\n  const handleRateLimit = () => {\n    const newAttempts = loginAttempts + 1;\n    setLoginAttempts(newAttempts);\n    \n    if (newAttempts >= 5) {\n      const lockoutEnd = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n      setIsLocked(true);\n      setLockoutTime(lockoutEnd);\n      localStorage.setItem('login_lockout', JSON.stringify({\n        endTime: lockoutEnd.toISOString(),\n        attempts: newAttempts\n      }));\n    }\n  };\n\n  const resetRateLimit = () => {\n    setLoginAttempts(0);\n    setIsLocked(false);\n    setLockoutTime(null);\n    localStorage.removeItem('login_lockout');\n  };\n\n  const handleCompanySubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isLocked) {\n      setError('Account temporarily locked. Please try again later.');\n      return;\n    }\n\n    // Security: Input validation\n    if (!validateEmail(email)) {\n      setError('Please enter a valid email address');\n      return;\n    }\n\n    if (!validatePassword(password)) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const success = await loginCompany({ email, password });\n      \n      if (success) {\n        resetRateLimit();\n        setLocation('/employee-login');\n      } else {\n        handleRateLimit();\n        setError('Invalid email or password');\n      }\n    } catch (err) {\n      handleRateLimit();\n      setError('An error occurred during login. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAdminSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isLocked) {\n      setError('Account temporarily locked. Please try again later.');\n      return;\n    }\n\n    // Security: Input validation\n    if (!validateUsername(username)) {\n      setError('Username must be at least 3 characters and contain only letters, numbers, and underscores');\n      return;\n    }\n\n    if (!validatePassword(password)) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const role = await loginAdmin({ username, password });\n      \n      if (role) {\n        resetRateLimit();\n        setLocation('/admin');\n      } else {\n        handleRateLimit();\n        setError('Invalid username or password');\n      }\n    } catch (err) {\n      handleRateLimit();\n      setError('An error occurred during login. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getRemainingLockoutTime = (): string => {\n    if (!lockoutTime) return '';\n    \n    const now = new Date();\n    const diff = lockoutTime.getTime() - now.getTime();\n    \n    if (diff <= 0) {\n      resetRateLimit();\n      return '';\n    }\n    \n    const minutes = Math.floor(diff / 60000);\n    const seconds = Math.floor((diff % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-blue-100\">\n            <Building2 className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Welcome Back</CardTitle>\n          <CardDescription>\n            Sign in to your account to continue\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs value={loginMode} onValueChange={(value) => setLoginMode(value as 'company' | 'admin')}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"company\" className=\"flex items-center gap-2\">\n                <Building2 className=\"h-4 w-4\" />\n                Company\n              </TabsTrigger>\n              <TabsTrigger value=\"admin\" className=\"flex items-center gap-2\">\n                <Shield className=\"h-4 w-4\" />\n                Admin\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"company\" className=\"space-y-4\">\n              {isLocked && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">\n                    Account temporarily locked due to too many failed attempts. \n                    Please try again in {getRemainingLockoutTime()}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {error && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <form onSubmit={handleCompanySubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    disabled={isLoading || isLocked}\n                    required\n                    className=\"transition-all focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      disabled={isLoading || isLocked}\n                      required\n                      className=\"pr-10 transition-all focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      disabled={isLoading || isLocked}\n                    >\n                      {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading || isLocked}\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    'Sign In'\n                  )}\n                </Button>\n              </form>\n\n              <div className=\"text-center text-sm text-gray-600\">\n                <p>Demo Credentials:</p>\n                <p className=\"font-mono text-xs\">admin@defaultcompany.com / admin123</p>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"admin\" className=\"space-y-4\">\n              {isLocked && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">\n                    Account temporarily locked due to too many failed attempts. \n                    Please try again in {getRemainingLockoutTime()}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {error && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n                </Alert>\n              )}\n\n              <form onSubmit={handleAdminSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    placeholder=\"Enter your username\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    disabled={isLoading || isLocked}\n                    required\n                    className=\"transition-all focus:ring-2 focus:ring-blue-500\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminPassword\">Password</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"adminPassword\"\n                      type={showAdminPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      disabled={isLoading || isLocked}\n                      required\n                      className=\"pr-10 transition-all focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowAdminPassword(!showAdminPassword)}\n                      className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      disabled={isLoading || isLocked}\n                    >\n                      {showAdminPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                    </button>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading || isLocked}\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing in...\n                    </>\n                  ) : (\n                    'Sign In as Admin'\n                  )}\n                </Button>\n              </form>\n\n              <div className=\"text-center text-sm text-gray-600\">\n                <p>Demo Admin Credentials:</p>\n                <p className=\"font-mono text-xs\">superadmin / admin123</p>\n                <p className=\"font-mono text-xs\">admin / admin123</p>\n                <p className=\"font-mono text-xs\">sales / admin123</p>\n                <p className=\"font-mono text-xs\">support / admin123</p>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} ","size_bytes":13433},"client/src/pages/Customers.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { Customer } from '@/lib/types';\nimport { getCustomers, addCustomer, updateCustomer, deleteCustomer } from '@/lib/storage';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Plus, Edit, Trash2, Search, Users, Star, DollarSign, Upload, Eye, MessageSquare, Download, SlidersHorizontal } from 'lucide-react';\nimport * as XLSX from 'xlsx';\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from '@/hooks/use-toast';\nimport { ExcelImport } from '@/components/import/ExcelImport';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Customers() {\n  const { company } = useAuth();\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [viewCustomer, setViewCustomer] = useState<Customer | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isMessageDialogOpen, setIsMessageDialogOpen] = useState(false);\n  const [messageSubject, setMessageSubject] = useState('');\n  const [messageBody, setMessageBody] = useState('');\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n  const [exportUseCurrentView, setExportUseCurrentView] = useState(true);\n  const [exportFromDate, setExportFromDate] = useState<string>('');\n  const [exportToDate, setExportToDate] = useState<string>('');\n  const [savedViews, setSavedViews] = useState<Array<{ name: string; searchQuery: string; columns: Record<string, boolean> }>>([]);\n  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>({\n    name: true,\n    email: true,\n    phone: true,\n    address: true,\n    totalSpent: true,\n    visits: true,\n    status: true,\n    actions: true,\n  });\n  const [exportFormat, setExportFormat] = useState<'xlsx' | 'csv'>('xlsx');\n  // Expand formData to include all new fields\n  const [formData, setFormData] = useState({\n    name: '',\n    address: '',\n    city: '',\n    state: '',\n    country: 'India',\n    pin: '',\n    email: '',\n    phoneNo: '',\n    mobileNo: '',\n    panNo: '',\n    gstin: '',\n    documentType: '',\n    documentNo: '',\n    dob: '',\n    anniversary: '',\n    openingBalance: '',\n    creditAllowed: 'N',\n    creditLimit: '',\n    notes: ''\n  });\n\n  useEffect(() => {\n    loadCustomers();\n  }, []);\n\n  useEffect(() => {\n    try {\n      const storedViews = localStorage.getItem('customersSavedViews');\n      if (storedViews) setSavedViews(JSON.parse(storedViews));\n      const storedCols = localStorage.getItem('customersVisibleColumns');\n      if (storedCols) setVisibleColumns(JSON.parse(storedCols));\n    } catch {}\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('customersVisibleColumns', JSON.stringify(visibleColumns));\n  }, [visibleColumns]);\n\n  // Listen for customer updates from other components\n  useEffect(() => {\n    const handleCustomerUpdate = () => {\n      loadCustomers();\n    };\n\n    window.addEventListener('customerUpdated', handleCustomerUpdate);\n    return () => {\n      window.removeEventListener('customerUpdated', handleCustomerUpdate);\n    };\n  }, []);\n\n  const loadCustomers = async () => {\n    try {\n      const customersData = await getCustomers();\n      const customersArray = Array.isArray(customersData) ? customersData : [];\n      setCustomers(customersArray);\n    } catch (error) {\n      console.error('Error loading customers:', error);\n      setCustomers([]);\n    }\n  };\n\n  // Test function to create a sample customer\n  const createTestCustomer = async () => {\n    if (!company?.id) {\n      toast.error('No company ID available');\n      return;\n    }\n\n    try {\n      const testCustomer: Customer = {\n        id: `TEST-CUST-${Date.now()}`,\n        companyId: company.id,\n        name: 'Test Customer',\n        email: 'test@example.com',\n        phone: '9876543210',\n        address: {\n          street: '123 Test Street',\n          city: 'Test City',\n          state: 'Test State',\n          zipCode: '12345'\n        },\n        loyaltyPoints: 0,\n        totalSpent: 0,\n        visitCount: 0,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      console.log('Creating test customer:', testCustomer);\n      const savedCustomer = await addCustomer(testCustomer);\n      console.log('Test customer saved:', savedCustomer);\n      \n      toast.success('Test customer created successfully');\n      \n      // Dispatch event to notify other components\n      window.dispatchEvent(new CustomEvent('customerUpdated'));\n      \n      loadCustomers();\n    } catch (error) {\n      console.error('Error creating test customer:', error);\n      toast.error('Failed to create test customer');\n    }\n  };\n\n  // Update resetForm to reset all fields\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      address: '',\n      city: '',\n      state: '',\n      country: 'India',\n      pin: '',\n      email: '',\n      phoneNo: '',\n      mobileNo: '',\n      panNo: '',\n      gstin: '',\n      documentType: '',\n      documentNo: '',\n      dob: '',\n      anniversary: '',\n      openingBalance: '',\n      creditAllowed: 'N',\n      creditLimit: '',\n      notes: ''\n    });\n  };\n\n  // Update handleSubmit to use new fields and validation\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.name || !formData.mobileNo) {\n      toast.error('Name and Mobile No are required');\n      return;\n    }\n    // Add more validation as needed\n    const customerData: Omit<Customer, 'id' | 'createdAt' | 'updatedAt'> = {\n      name: formData.name,\n      email: formData.email || undefined,\n      phone: formData.mobileNo || undefined,\n      address: (formData.address || formData.city || formData.state || formData.pin) ? {\n        street: formData.address,\n        city: formData.city,\n        state: formData.state,\n        zipCode: formData.pin\n      } : undefined,\n      loyaltyPoints: 0,\n      totalSpent: 0,\n      visits: 0,\n      notes: formData.notes || undefined,\n      isActive: true\n    };\n    if (editingCustomer) {\n      updateCustomer(editingCustomer.id, customerData);\n      toast.success('Customer updated successfully');\n      setEditingCustomer(null);\n    } else {\n      const newCustomer: Customer = {\n        id: Date.now().toString(),\n        ...customerData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      addCustomer(newCustomer);\n      toast.success('Customer added successfully');\n    }\n    \n    // Dispatch event to notify other components\n    window.dispatchEvent(new CustomEvent('customerUpdated'));\n    \n    loadCustomers();\n    resetForm();\n    setIsAddDialogOpen(false);\n  };\n\n  const handleEdit = (customer: Customer) => {\n    setEditingCustomer(customer);\n    setFormData({\n      name: customer.name,\n      address: customer.address?.street || '',\n      city: customer.address?.city || '',\n      state: customer.address?.state || '',\n      country: 'India',\n      pin: customer.address?.zipCode || '',\n      email: customer.email || '',\n      phoneNo: '', // No direct mapping, left blank\n      mobileNo: customer.phone || '',\n      panNo: '',\n      gstin: '',\n      documentType: '',\n      documentNo: '',\n      dob: '',\n      anniversary: '',\n      openingBalance: '',\n      creditAllowed: 'N',\n      creditLimit: '',\n      notes: customer.notes || ''\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleView = (customer: Customer) => {\n    setViewCustomer(customer);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleMessage = (customer: Customer) => {\n    setViewCustomer(customer);\n    setMessageSubject(`Hello ${customer.name}`);\n    setMessageBody('');\n    setIsMessageDialogOpen(true);\n  };\n\n  const sendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    toast.success(`Message sent to ${viewCustomer?.name} (demo)`);\n    setIsMessageDialogOpen(false);\n    setMessageSubject('');\n    setMessageBody('');\n  };\n\n  const handleDelete = (id: string) => {\n    deleteCustomer(id);\n    \n    // Dispatch event to notify other components\n    window.dispatchEvent(new CustomEvent('customerUpdated'));\n    \n    loadCustomers();\n    toast.success('Customer deleted successfully');\n  };\n\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    customer.phone?.includes(searchQuery)\n  );\n\n  const stats = {\n    totalCustomers: customers.length,\n    totalSpent: customers.reduce((sum, c) => sum + c.totalSpent, 0),\n    averageSpent: customers.length > 0 ? customers.reduce((sum, c) => sum + c.totalSpent, 0) / customers.length : 0\n  };\n\n  const filteredStats = useMemo(() => {\n    const totalCustomers = filteredCustomers.length;\n    const totalSpent = filteredCustomers.reduce((sum, c) => sum + c.totalSpent, 0);\n    const averageSpent = totalCustomers > 0 ? totalSpent / totalCustomers : 0;\n    return { totalCustomers, totalSpent, averageSpent };\n  }, [filteredCustomers]);\n\n  const exportCustomersToExcel = () => {\n    try {\n      const rows = filteredCustomers.map(c => ({\n        ID: c.id,\n        Name: c.name,\n        Email: c.email || '',\n        Phone: c.phone || '',\n        Street: c.address?.street || '',\n        City: c.address?.city || '',\n        State: c.address?.state || '',\n        ZipCode: c.address?.zipCode || '',\n        TotalSpent: c.totalSpent ?? 0,\n        Visits: (c as any).visits ?? (c as any).visitCount ?? 0,\n        LoyaltyPoints: c.loyaltyPoints ?? 0,\n        Notes: c.notes || ''\n      }));\n      const worksheet = XLSX.utils.json_to_sheet(rows);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Customers');\n      XLSX.writeFile(workbook, 'customers.xlsx');\n    } catch (error) {\n      console.error('Export customers failed:', error);\n      toast.error('Failed to export customers');\n    }\n  };\n\n  const exportWithWizard = () => {\n    try {\n      const source = exportUseCurrentView ? filteredCustomers : customers;\n      const rows = source.map(c => {\n        const row: Record<string, any> = {};\n        if (visibleColumns.name) row.Name = c.name;\n        if (visibleColumns.email) row.Email = c.email || '';\n        if (visibleColumns.phone) row.Phone = c.phone || '';\n        if (visibleColumns.address) row.Address = `${c.address?.street || ''} ${c.address?.city || ''} ${c.address?.state || ''} ${c.address?.zipCode || ''}`.trim();\n        if (visibleColumns.totalSpent) row.TotalSpent = c.totalSpent ?? 0;\n        if (visibleColumns.visits) row.Visits = (c as any).visits ?? (c as any).visitCount ?? 0;\n        if (visibleColumns.status) row.Status = c.isActive ? 'Active' : 'Inactive';\n        return row;\n      });\n      const ws = XLSX.utils.json_to_sheet(rows);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Customers');\n      const fileName = exportFormat === 'csv' ? 'customers-export.csv' : 'customers-export.xlsx';\n      XLSX.writeFile(wb, fileName, { bookType: exportFormat });\n      setIsExportDialogOpen(false);\n    } catch (error) {\n      console.error('Customer export wizard failed:', error);\n      toast.error('Failed to export customers');\n    }\n  };\n\n  const saveCurrentView = (name: string) => {\n    const v = { name, searchQuery, columns: visibleColumns };\n    const updated = [...savedViews.filter(x => x.name !== name), v];\n    setSavedViews(updated);\n    try { localStorage.setItem('customersSavedViews', JSON.stringify(updated)); } catch {}\n    toast.success(`Saved view \"${name}\"`);\n  };\n\n  const applySavedView = (name: string) => {\n    const v = savedViews.find(x => x.name === name);\n    if (!v) return;\n    setSearchQuery(v.searchQuery);\n    setVisibleColumns(v.columns);\n    toast.success(`Applied view \"${name}\"`);\n  };\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6 max-w-full overflow-x-hidden\">\n      {/* Header Section - Responsive */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Customers</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Manage your customer database and relationships</p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"hidden sm:flex items-center gap-2\">\n                <SlidersHorizontal className=\"w-4 h-4\" />\n                Columns\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              {Object.keys(visibleColumns).map(key => (\n                <DropdownMenuCheckboxItem key={key} checked={visibleColumns[key]} onCheckedChange={(v) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(v) }))}>\n                  {key.charAt(0).toUpperCase() + key.slice(1)}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">Views</Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              {savedViews.length === 0 && <div className=\"px-3 py-2 text-sm text-muted-foreground\">No saved views</div>}\n              {savedViews.map(v => (\n                <DropdownMenuCheckboxItem key={v.name} checked={false} onSelect={(e) => { e.preventDefault(); applySavedView(v.name); }}>\n                  {v.name}\n                </DropdownMenuCheckboxItem>\n              ))}\n              <div className=\"px-3 py-2\">\n                <div className=\"flex gap-2\">\n                  <Input placeholder=\"View name\" className=\"h-8\" onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      const name = (e.target as HTMLInputElement).value.trim();\n                      if (name) { saveCurrentView(name); (e.target as HTMLInputElement).value = ''; }\n                    }\n                  }} />\n                  <Button size=\"sm\" onClick={() => {\n                    const el = document.querySelector<HTMLInputElement>('input[placeholder=\\\"View name\\\"]');\n                    const name = el?.value.trim() || '';\n                    if (name) { saveCurrentView(name); if (el) el.value = ''; }\n                  }}>Save</Button>\n                </div>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button onClick={() => setIsExportDialogOpen(true)} className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n            <Download className=\"w-4 h-4 mr-2\" /> Export\n          </Button>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n            <Button onClick={() => { resetForm(); setEditingCustomer(null); }} size=\"sm\" className=\"w-full sm:w-auto\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Customer\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-4xl max-h-[80vh] overflow-y-auto p-4 sm:p-6\">\n            <DialogHeader>\n              <DialogTitle className=\"text-lg sm:text-xl\">{editingCustomer ? 'Edit Customer' : 'Add New Customer'}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-6\">\n                              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4 lg:gap-8\">\n                  {/* All form fields here, responsive grid for better mobile and desktop usability */}\n                <div>\n                  <Label htmlFor=\"name\">Full Name *</Label>\n                  <Input id=\"name\" value={formData.name} onChange={e => setFormData({...formData, name: e.target.value})} maxLength={50} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"address\">Address *</Label>\n                  <Input id=\"address\" value={formData.address} onChange={e => setFormData({...formData, address: e.target.value})} maxLength={200} />\n                </div>\n                <div>\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input id=\"city\" value={formData.city} onChange={e => setFormData({...formData, city: e.target.value})} maxLength={50} />\n                </div>\n                <div>\n                  <Label htmlFor=\"state\">State *</Label>\n                  <Input id=\"state\" value={formData.state} onChange={e => setFormData({...formData, state: e.target.value})} maxLength={50} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"country\">Country *</Label>\n                  <Input id=\"country\" value={formData.country} onChange={e => setFormData({...formData, country: e.target.value})} maxLength={50} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"pin\">PIN</Label>\n                  <Input id=\"pin\" value={formData.pin} onChange={e => { if (/^\\d{0,6}$/.test(e.target.value)) setFormData({...formData, pin: e.target.value}); }} maxLength={6} />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email ID</Label>\n                  <Input id=\"email\" type=\"email\" value={formData.email} onChange={e => setFormData({...formData, email: e.target.value})} maxLength={50} />\n                </div>\n                <div>\n                  <Label htmlFor=\"phoneNo\">Phone No</Label>\n                  <Input id=\"phoneNo\" value={formData.phoneNo} onChange={e => { if (/^\\d{0,12}$/.test(e.target.value)) setFormData({...formData, phoneNo: e.target.value}); }} maxLength={12} />\n                </div>\n                <div>\n                  <Label htmlFor=\"mobileNo\">Mobile No *</Label>\n                  <Input id=\"mobileNo\" value={formData.mobileNo} onChange={e => { if (/^\\d{0,10}$/.test(e.target.value)) setFormData({...formData, mobileNo: e.target.value}); }} maxLength={10} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"panNo\">PAN No.</Label>\n                  <Input id=\"panNo\" value={formData.panNo} onChange={e => setFormData({...formData, panNo: e.target.value})} maxLength={10} />\n                </div>\n                <div>\n                  <Label htmlFor=\"gstin\">GSTIN</Label>\n                  <Input id=\"gstin\" value={formData.gstin} onChange={e => setFormData({...formData, gstin: e.target.value})} maxLength={15} />\n                </div>\n                <div>\n                  <Label htmlFor=\"documentType\">Document Type</Label>\n                  <Input id=\"documentType\" value={formData.documentType} onChange={e => setFormData({...formData, documentType: e.target.value})} maxLength={50} />\n                </div>\n                <div>\n                  <Label htmlFor=\"documentNo\">Document No.</Label>\n                  <Input id=\"documentNo\" value={formData.documentNo} onChange={e => setFormData({...formData, documentNo: e.target.value})} maxLength={20} />\n                </div>\n                <div>\n                  <Label htmlFor=\"dob\">Date of Birth</Label>\n                  <Input id=\"dob\" value={formData.dob} onChange={e => setFormData({...formData, dob: e.target.value})} placeholder=\"dd/mm/yyyy\" maxLength={10} />\n                </div>\n                <div>\n                  <Label htmlFor=\"anniversary\">Anniversary Date</Label>\n                  <Input id=\"anniversary\" value={formData.anniversary} onChange={e => setFormData({...formData, anniversary: e.target.value})} placeholder=\"dd/mm/yyyy\" maxLength={10} />\n                </div>\n                <div>\n                  <Label htmlFor=\"openingBalance\">Opening Balance</Label>\n                  <Input id=\"openingBalance\" value={formData.openingBalance} onChange={e => { if (/^\\d{0,10}$/.test(e.target.value)) setFormData({...formData, openingBalance: e.target.value}); }} maxLength={10} />\n                </div>\n                <div>\n                  <Label htmlFor=\"creditAllowed\">Credit Allowed</Label>\n                  <select id=\"creditAllowed\" value={formData.creditAllowed} onChange={e => setFormData({...formData, creditAllowed: e.target.value})}>\n                    <option value=\"Y\">Y</option>\n                    <option value=\"N\">N</option>\n                  </select>\n                </div>\n                <div>\n                  <Label htmlFor=\"creditLimit\">Credit Limit</Label>\n                  <Input id=\"creditLimit\" value={formData.creditLimit} onChange={e => { if (/^\\d{0,10}$/.test(e.target.value)) setFormData({...formData, creditLimit: e.target.value}); }} maxLength={10} />\n                </div>\n                <div className=\"col-span-3\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea id=\"notes\" value={formData.notes} onChange={e => setFormData({...formData, notes: e.target.value})} maxLength={250} />\n                </div>\n              </div>\n              <div className=\"flex justify-end\">\n                <Button type=\"submit\">{editingCustomer ? 'Update' : 'Add'} Customer</Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"customers\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 h-auto\">\n          <TabsTrigger value=\"customers\" className=\"text-xs sm:text-sm py-2\">Customer List</TabsTrigger>\n          <TabsTrigger value=\"import\" className=\"text-xs sm:text-sm py-2\">\n            <Upload className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Import from Excel</span>\n            <span className=\"sm:hidden\">Import</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"import\" className=\"space-y-6\">\n          <ExcelImport \n            type=\"customers\" \n            onImportComplete={() => {\n              setCustomers(getCustomers());\n              toast.success('Customers imported successfully!');\n            }} \n          />\n        </TabsContent>\n\n        <TabsContent value=\"customers\" className=\"space-y-4 sm:space-y-6\">\n\n      {/* Stats Cards - Responsive */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Customers</CardTitle>\n            <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">{stats.totalCustomers}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Revenue</CardTitle>\n            <DollarSign className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">${stats.totalSpent.toFixed(2)}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Average Spent</CardTitle>\n            <Star className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">${stats.averageSpent.toFixed(2)}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search - Responsive */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          placeholder=\"Search customers...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10 text-sm sm:text-base\"\n        />\n      </div>\n\n      {/* Customers Grid - Responsive */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n        {filteredCustomers.map((customer) => (\n          <Card key={customer.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"flex-1\">\n                  <CardTitle className=\"text-base sm:text-lg\">{customer.name}</CardTitle>\n                  {customer.email && (\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">{customer.email}</p>\n                  )}\n                </div>\n                <Badge variant={customer.visits > 5 ? 'default' : 'secondary'} className=\"text-xs\">\n                  {customer.visits > 5 ? 'VIP' : 'Regular'}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-3 sm:gap-4 text-xs sm:text-sm\">\n                <div>\n                  <p className=\"text-muted-foreground\">Total Spent</p>\n                  <p className=\"font-semibold\">${customer.totalSpent.toFixed(2)}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Visits</p>\n                  <p className=\"font-semibold\">{customer.visits}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Points</p>\n                  <p className=\"font-semibold\">{customer.loyaltyPoints}</p>\n                </div>\n                <div>\n                  <p className=\"text-muted-foreground\">Last Visit</p>\n                  <p className=\"font-semibold\">\n                    {customer.lastVisit ? new Date(customer.lastVisit).toLocaleDateString() : 'Never'}\n                  </p>\n                </div>\n              </div>\n              \n              {customer.phone && (\n                <p className=\"text-xs sm:text-sm text-muted-foreground\">Phone: {customer.phone}</p>\n              )}\n              \n              {customer.address && (\n                <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                  {customer.address.street}, {customer.address.city}, {customer.address.state} {customer.address.zipCode}\n                </p>\n              )}\n              \n              {customer.notes && (\n                <p className=\"text-xs sm:text-sm text-muted-foreground italic\">\n                  &quot;{customer.notes}&quot;\n                </p>\n              )}\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleView(customer)}\n                  className=\"flex-1 text-xs sm:text-sm\"\n                >\n                  <Eye className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                  View\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleEdit(customer)}\n                  className=\"flex-1 text-xs sm:text-sm\"\n                >\n                  <Edit className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                  Edit\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleMessage(customer)}\n                  className=\"flex-1 text-xs sm:text-sm\"\n                >\n                  <MessageSquare className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                  Message\n                </Button>\n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" className=\"text-destructive hover:text-destructive\">\n                      <Trash2 className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent>\n                    <AlertDialogHeader>\n                      <AlertDialogTitle>Delete Customer</AlertDialogTitle>\n                      <AlertDialogDescription>\n                        Are you sure you want to delete &quot;{customer.name}&quot;? This action cannot be undone.\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel>Cancel</AlertDialogCancel>\n                      <AlertDialogAction onClick={() => handleDelete(customer.id)}>\n                        Delete\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      <div className=\"mt-3 sm:mt-4 border rounded bg-gray-50 px-4 py-3 text-sm flex flex-col sm:flex-row gap-2 sm:items-center sm:justify-between\">\n        <div>Showing <span className=\"font-semibold\">{filteredCustomers.length}</span> customers</div>\n        <div className=\"flex flex-wrap gap-4\">\n          <div>Total Spent: <span className=\"font-semibold\">${filteredCustomers.reduce((s, c) => s + c.totalSpent, 0).toFixed(2)}</span></div>\n          <div>Average Spent: <span className=\"font-semibold\">${(filteredCustomers.length ? filteredCustomers.reduce((s, c) => s + c.totalSpent, 0) / filteredCustomers.length : 0).toFixed(2)}</span></div>\n        </div>\n      </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* View Customer Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Customer Details</DialogTitle>\n          </DialogHeader>\n          {viewCustomer && (\n            <div className=\"space-y-2 text-sm\">\n              <div className=\"font-semibold text-base\">{viewCustomer.name}</div>\n              {viewCustomer.email && <div>Email: {viewCustomer.email}</div>}\n              {viewCustomer.phone && <div>Phone: {viewCustomer.phone}</div>}\n              {viewCustomer.address && (\n                <div>\n                  Address: {viewCustomer.address.street}, {viewCustomer.address.city}, {viewCustomer.address.state} {viewCustomer.address.zipCode}\n                </div>\n              )}\n              <div>Total Spent: ${viewCustomer.totalSpent.toFixed(2)}</div>\n              <div>Visits: {viewCustomer.visits}</div>\n              {viewCustomer.notes && <div className=\"italic\">“{viewCustomer.notes}”</div>}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Export Wizard */}\n      <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Export Customers</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <Checkbox id=\"custCurrentView\" checked={exportUseCurrentView} onCheckedChange={(v) => setExportUseCurrentView(Boolean(v))} />\n              <label htmlFor=\"custCurrentView\" className=\"text-sm\">Export current view (respects search)</label>\n            </div>\n            <div>\n              <div className=\"font-medium mb-2\">Columns</div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.keys(visibleColumns).filter(k => k !== 'actions').map((key) => (\n                  <label key={key} className=\"flex items-center gap-2 text-sm\">\n                    <Checkbox checked={visibleColumns[key]} onCheckedChange={(v) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(v) }))} />\n                    {key.charAt(0).toUpperCase() + key.slice(1)}\n                  </label>\n                ))}\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <Label>Format</Label>\n                <select className=\"w-full border rounded h-9 px-2\" value={exportFormat} onChange={(e) => setExportFormat(e.target.value as 'xlsx' | 'csv')}>\n                  <option value=\"xlsx\">Excel (.xlsx)</option>\n                  <option value=\"csv\">CSV (.csv)</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsExportDialogOpen(false)}>Cancel</Button>\n              <Button onClick={exportWithWizard}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Message Customer Dialog */}\n      <Dialog open={isMessageDialogOpen} onOpenChange={setIsMessageDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Send Message {viewCustomer ? `to ${viewCustomer.name}` : ''}</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={sendMessage} className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"msgSubject\">Subject</Label>\n              <Input id=\"msgSubject\" value={messageSubject} onChange={e => setMessageSubject(e.target.value)} required />\n            </div>\n            <div>\n              <Label htmlFor=\"msgBody\">Message</Label>\n              <Textarea id=\"msgBody\" value={messageBody} onChange={e => setMessageBody(e.target.value)} required rows={5} />\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsMessageDialogOpen(false)}>Cancel</Button>\n              <Button type=\"submit\">Send</Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":35106},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { getTransactions, getProducts, getCustomers } from '@/lib/storage';\nimport { Transaction, Product, InventoryAlert } from '@/lib/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport { getInvoices, getInvoiceStats } from '@/lib/invoice-utils';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { \n  DollarSign, \n  ShoppingCart, \n  Package, \n  Users, \n  TrendingUp, \n  TrendingDown,\n  AlertTriangle,\n  Calendar,\n  LogOut,\n  Sun,\n  Moon,\n  FileText\n} from 'lucide-react';\n\nexport default function Dashboard() {\n  const { logout, logoutEmployee, employee } = useAuth();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [invoices, setInvoices] = useState<any[]>([]);\n  const [inventoryAlerts, setInventoryAlerts] = useState<InventoryAlert[]>([]);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [todayStats, setTodayStats] = useState({\n    sales: 0,\n    transactions: 0,\n    customers: 0,\n    averageTransaction: 0\n  });\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      const allTransactions = await getTransactions();\n      const allProducts = await getProducts();\n      const allCustomers = await getCustomers();\n      const allInvoices = getInvoices();\n\n      // Ensure we have arrays\n      const transactionsArray = Array.isArray(allTransactions) ? allTransactions : [];\n      const productsArray = Array.isArray(allProducts) ? allProducts : [];\n      const customersArray = Array.isArray(allCustomers) ? allCustomers : [];\n      const invoicesArray = Array.isArray(allInvoices) ? allInvoices : [];\n\n      setTransactions(transactionsArray);\n      setProducts(productsArray);\n      setInvoices(invoicesArray);\n\n      // Calculate today's stats\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const todayTransactions = transactionsArray.filter(t => {\n        const transactionDate = new Date(t.timestamp);\n        transactionDate.setHours(0, 0, 0, 0);\n        return transactionDate.getTime() === today.getTime();\n      });\n\n      const todaySales = Array.isArray(todayTransactions) ? todayTransactions.reduce((sum, t) => sum + (t.total || 0), 0) : 0;\n      const uniqueCustomers = new Set(Array.isArray(todayTransactions) ? todayTransactions.map(t => t.customerId).filter(Boolean) : []).size;\n\n      setTodayStats({\n        sales: todaySales,\n        transactions: todayTransactions.length,\n        customers: uniqueCustomers,\n        averageTransaction: todayTransactions.length > 0 ? todaySales / todayTransactions.length : 0\n      });\n\n      // Check inventory alerts\n      const alerts: InventoryAlert[] = productsArray\n        .filter(p => p.stock <= p.minStock)\n        .map(p => ({\n          product: p,\n          currentStock: p.stock,\n          minStock: p.minStock,\n          type: p.stock === 0 ? 'out_of_stock' : 'low_stock'\n        }));\n\n      setInventoryAlerts(alerts);\n    } catch (error) {\n      console.error('Error loading dashboard data:', error);\n    }\n  };\n\n  const getRecentTransactions = () => {\n    return transactions\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 5);\n  };\n\n  const getWeeklyStats = () => {\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    \n    const weekTransactions = transactions.filter(t => new Date(t.timestamp) >= weekAgo);\n    const weekSales = weekTransactions.reduce((sum, t) => sum + t.total, 0);\n    \n    return {\n      sales: weekSales,\n      transactions: weekTransactions.length,\n      growth: 12.5 // Mock growth percentage\n    };\n  };\n\n  const weeklyStats = getWeeklyStats();\n\n  const handleLogout = () => {\n    if (employee) {\n      // If employee is logged in, logout employee only\n      logoutEmployee();\n    } else {\n      // If no employee, logout completely\n      logout();\n    }\n  };\n\n  const toggleDarkMode = () => {\n    setIsDarkMode(!isDarkMode);\n    // Toggle dark mode class on document\n    if (!isDarkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Dashboard</h1>\n          <p className=\"text-muted-foreground\">Welcome back! Here&apos;s what&apos;s happening today.</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Calendar className=\"w-4 h-4\" />\n            {new Date().toLocaleDateString('en-US', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            })}\n          </div>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={toggleDarkMode}\n                className=\"flex items-center gap-2\"\n              >\n                {isDarkMode ? <Sun className=\"w-4 h-4\" /> : <Moon className=\"w-4 h-4\" />}\n                {isDarkMode ? 'Light Mode' : 'Dark Mode'}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>Toggle theme</TooltipContent>\n          </Tooltip>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={handleLogout}\n                className=\"flex items-center gap-2\"\n              >\n                <LogOut className=\"w-4 h-4\" />\n                {employee ? 'Logout Employee' : 'Logout'}\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent>Logout from the current session</TooltipContent>\n          </Tooltip>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today&apos;s Sales</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{todayStats.sales.toFixed(2)}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              +12.5% from yesterday\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Transactions</CardTitle>\n            <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{todayStats.transactions}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              +8.2% from yesterday\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Customers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{todayStats.customers}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <TrendingUp className=\"w-3 h-3 mr-1\" />\n              +5.1% from yesterday\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Avg. Transaction</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{todayStats.averageTransaction.toFixed(2)}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <TrendingDown className=\"w-3 h-3 mr-1\" />\n              -2.3% from yesterday\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Invoices</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{getInvoiceStats(invoices).total}</div>\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <span className=\"text-green-600\">{getInvoiceStats(invoices).paid} paid</span>\n              <span className=\"mx-1\">•</span>\n              <span className=\"text-yellow-600\">{getInvoiceStats(invoices).pending} pending</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Transactions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Transactions</CardTitle>\n            <CardDescription>Latest sales activity</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {getRecentTransactions().map((transaction) => (\n                <div key={transaction.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <ShoppingCart className=\"w-5 h-5 text-primary\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{transaction.customerName || 'Guest'}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {new Date(transaction.timestamp).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">₹{transaction.total.toFixed(2)}</p>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {transaction.paymentMethod}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n              {getRecentTransactions().length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <ShoppingCart className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No recent transactions</p>\n                  <p className=\"text-sm\">Start making sales to see them here</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Inventory Alerts */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5\" />\n              Inventory Alerts\n            </CardTitle>\n            <CardDescription>Products requiring attention</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {inventoryAlerts.map((alert) => (\n                <div key={alert.product.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n                      <Package className=\"w-5 h-5 text-red-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">{alert.product.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Stock: {alert.currentStock} {alert.product.unit}\n                      </p>\n                    </div>\n                  </div>\n                  <Badge variant={alert.type === 'out_of_stock' ? 'destructive' : 'secondary'}>\n                    {alert.type === 'out_of_stock' ? 'Out of Stock' : 'Low Stock'}\n                  </Badge>\n                </div>\n              ))}\n              {inventoryAlerts.length === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Package className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                  <p>No inventory alerts</p>\n                  <p className=\"text-sm\">All products are well stocked!</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Weekly Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Overview</CardTitle>\n          <CardDescription>Performance summary for the last 7 days</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">₹{weeklyStats.sales.toFixed(2)}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Sales</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-blue-600\">{weeklyStats.transactions}</div>\n              <div className=\"text-sm text-muted-foreground\">Transactions</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-green-600\">+{weeklyStats.growth}%</div>\n              <div className=\"text-sm text-muted-foreground\">Growth</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14428},"client/src/pages/EmployeeDashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { \n  Users, \n  Phone, \n  Mail, \n  Calendar,\n  Plus,\n  Search,\n  Filter,\n  Download,\n  Eye,\n  Edit,\n  Trash2,\n  CheckCircle,\n  XCircle,\n  Clock,\n  DollarSign,\n  Activity,\n  BarChart3,\n  PieChart,\n  Settings,\n  Shield,\n  Database,\n  Server,\n  Building2,\n  UserCheck,\n  MessageSquare,\n  FileText,\n  Target,\n  TrendingUp,\n  AlertTriangle,\n  Star,\n  MapPin,\n  Briefcase\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface Customer {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  company: string;\n  status: 'lead' | 'prospect' | 'customer' | 'inactive';\n  source: string;\n  assignedTo: string;\n  lastContact: Date;\n  nextFollowUp: Date;\n  value: number;\n  notes: string;\n  tags: string[];\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  assignedTo: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled';\n  dueDate: Date;\n  customerId?: string;\n  type: 'call' | 'email' | 'meeting' | 'follow-up' | 'demo' | 'proposal';\n}\n\ninterface Deal {\n  id: string;\n  title: string;\n  customerId: string;\n  customerName: string;\n  value: number;\n  stage: 'lead' | 'qualification' | 'proposal' | 'negotiation' | 'closed-won' | 'closed-lost';\n  probability: number;\n  expectedCloseDate: Date;\n  assignedTo: string;\n  lastActivity: Date;\n}\n\ninterface Activity {\n  id: string;\n  type: 'call' | 'email' | 'meeting' | 'note' | 'task';\n  customerId: string;\n  customerName: string;\n  description: string;\n  date: Date;\n  assignedTo: string;\n  duration?: number;\n  outcome?: string;\n}\n\nexport default function EmployeeDashboard() {\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [deals, setDeals] = useState<Deal[]>([]);\n  const [activities, setActivities] = useState<Activity[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [isAddCustomerOpen, setIsAddCustomerOpen] = useState(false);\n  const [isAddTaskOpen, setIsAddTaskOpen] = useState(false);\n  const [isAddDealOpen, setIsAddDealOpen] = useState(false);\n\n  useEffect(() => {\n    loadMockData();\n  }, []);\n\n  const loadMockData = () => {\n    // Mock customers data\n    const mockCustomers: Customer[] = [\n      {\n        id: '1',\n        name: 'Rajesh Kumar',\n        email: 'rajesh@techsolutions.com',\n        phone: '+91 98765 43210',\n        company: 'Tech Solutions Pvt Ltd',\n        status: 'customer',\n        source: 'Website',\n        assignedTo: 'Priya Sharma',\n        lastContact: new Date(),\n        nextFollowUp: new Date(Date.now() + 86400000 * 7),\n        value: 50000,\n        notes: 'Interested in Enterprise plan, needs custom features',\n        tags: ['enterprise', 'high-value', 'technical']\n      },\n      {\n        id: '2',\n        name: 'Amit Patel',\n        email: 'amit@cafecentral.com',\n        phone: '+91 87654 32109',\n        company: 'Cafe Central',\n        status: 'prospect',\n        source: 'Referral',\n        assignedTo: 'Priya Sharma',\n        lastContact: new Date(Date.now() - 86400000 * 2),\n        nextFollowUp: new Date(Date.now() + 86400000 * 3),\n        value: 25000,\n        notes: 'Looking for POS system for multiple locations',\n        tags: ['restaurant', 'multi-location', 'pos']\n      },\n      {\n        id: '3',\n        name: 'Sneha Reddy',\n        email: 'sneha@bakerydelight.com',\n        phone: '+91 76543 21098',\n        company: 'Bakery Delight',\n        status: 'lead',\n        source: 'Cold Call',\n        assignedTo: 'Priya Sharma',\n        lastContact: new Date(Date.now() - 86400000 * 5),\n        nextFollowUp: new Date(Date.now() + 86400000 * 1),\n        value: 15000,\n        notes: 'New bakery opening, needs inventory management',\n        tags: ['bakery', 'new-business', 'inventory']\n      }\n    ];\n\n    // Mock tasks data\n    const mockTasks: Task[] = [\n      {\n        id: '1',\n        title: 'Follow up with Tech Solutions',\n        description: 'Discuss enterprise features and pricing',\n        assignedTo: 'Priya Sharma',\n        priority: 'high',\n        status: 'pending',\n        dueDate: new Date(Date.now() + 86400000 * 2),\n        customerId: '1',\n        type: 'call'\n      },\n      {\n        id: '2',\n        title: 'Send proposal to Cafe Central',\n        description: 'Prepare detailed proposal for multi-location setup',\n        assignedTo: 'Priya Sharma',\n        priority: 'medium',\n        status: 'in-progress',\n        dueDate: new Date(Date.now() + 86400000 * 5),\n        customerId: '2',\n        type: 'proposal'\n      },\n      {\n        id: '3',\n        title: 'Demo for Bakery Delight',\n        description: 'Show inventory management features',\n        assignedTo: 'Priya Sharma',\n        priority: 'high',\n        status: 'pending',\n        dueDate: new Date(Date.now() + 86400000 * 1),\n        customerId: '3',\n        type: 'demo'\n      }\n    ];\n\n    // Mock deals data\n    const mockDeals: Deal[] = [\n      {\n        id: '1',\n        title: 'Tech Solutions Enterprise Deal',\n        customerId: '1',\n        customerName: 'Tech Solutions Pvt Ltd',\n        value: 50000,\n        stage: 'negotiation',\n        probability: 75,\n        expectedCloseDate: new Date(Date.now() + 86400000 * 30),\n        assignedTo: 'Priya Sharma',\n        lastActivity: new Date()\n      },\n      {\n        id: '2',\n        title: 'Cafe Central POS System',\n        customerId: '2',\n        customerName: 'Cafe Central',\n        value: 25000,\n        stage: 'proposal',\n        probability: 60,\n        expectedCloseDate: new Date(Date.now() + 86400000 * 45),\n        assignedTo: 'Priya Sharma',\n        lastActivity: new Date(Date.now() - 86400000 * 2)\n      },\n      {\n        id: '3',\n        title: 'Bakery Delight Inventory System',\n        customerId: '3',\n        customerName: 'Bakery Delight',\n        value: 15000,\n        stage: 'qualification',\n        probability: 40,\n        expectedCloseDate: new Date(Date.now() + 86400000 * 60),\n        assignedTo: 'Priya Sharma',\n        lastActivity: new Date(Date.now() - 86400000 * 5)\n      }\n    ];\n\n    // Mock activities data\n    const mockActivities: Activity[] = [\n      {\n        id: '1',\n        type: 'call',\n        customerId: '1',\n        customerName: 'Tech Solutions Pvt Ltd',\n        description: 'Discussed enterprise features and pricing',\n        date: new Date(),\n        assignedTo: 'Priya Sharma',\n        duration: 30,\n        outcome: 'Positive response, interested in custom features'\n      },\n      {\n        id: '2',\n        type: 'email',\n        customerId: '2',\n        customerName: 'Cafe Central',\n        description: 'Sent initial proposal for POS system',\n        date: new Date(Date.now() - 86400000 * 1),\n        assignedTo: 'Priya Sharma',\n        outcome: 'Proposal sent, waiting for feedback'\n      },\n      {\n        id: '3',\n        type: 'meeting',\n        customerId: '3',\n        customerName: 'Bakery Delight',\n        description: 'Initial discovery meeting',\n        date: new Date(Date.now() - 86400000 * 3),\n        assignedTo: 'Priya Sharma',\n        duration: 45,\n        outcome: 'Good understanding of requirements'\n      }\n    ];\n\n    setCustomers(mockCustomers);\n    setTasks(mockTasks);\n    setDeals(mockDeals);\n    setActivities(mockActivities);\n  };\n\n  const filteredCustomers = customers.filter(customer => {\n    const matchesSearch = customer.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         customer.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         customer.company.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || customer.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'lead': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'prospect': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'customer': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'inactive': return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'high': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getStageColor = (stage: string) => {\n    switch (stage) {\n      case 'lead': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'qualification': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      case 'proposal': return 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300';\n      case 'negotiation': return 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300';\n      case 'closed-won': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'closed-lost': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Employee Dashboard</h1>\n          <p className=\"text-muted-foreground\">CRM & Customer Management System</p>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n            <CheckCircle className=\"w-4 h-4 mr-1\" />\n            Active\n          </Badge>\n          <Badge variant=\"outline\">\n            <UserCheck className=\"w-4 h-4 mr-1\" />\n            Priya Sharma\n          </Badge>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{customers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +2 this month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Deals</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{deals.filter(d => d.stage !== 'closed-won' && d.stage !== 'closed-lost').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              ₹{deals.reduce((sum, d) => sum + d.value, 0).toLocaleString()} pipeline\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Tasks</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{tasks.filter(t => t.status === 'pending').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {tasks.filter(t => t.priority === 'high' || t.priority === 'urgent').length} high priority\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">This Month Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">₹{deals.filter(d => d.stage === 'closed-won').reduce((sum, d) => sum + d.value, 0).toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +15.3% from last month\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"customers\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"customers\">Customers</TabsTrigger>\n          <TabsTrigger value=\"deals\">Deals</TabsTrigger>\n          <TabsTrigger value=\"tasks\">Tasks</TabsTrigger>\n          <TabsTrigger value=\"activities\">Activities</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Customers Tab */}\n        <TabsContent value=\"customers\" className=\"space-y-6\">\n          {/* Filters and Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 flex-1\">\n              <div className=\"relative flex-1 max-w-sm\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search customers...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"lead\">Leads</SelectItem>\n                  <SelectItem value=\"prospect\">Prospects</SelectItem>\n                  <SelectItem value=\"customer\">Customers</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Dialog open={isAddCustomerOpen} onOpenChange={setIsAddCustomerOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Customer\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Add New Customer</DialogTitle>\n                </DialogHeader>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Customer Name</Label>\n                    <Input id=\"name\" placeholder=\"Enter customer name\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" placeholder=\"Enter email\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input id=\"phone\" placeholder=\"Enter phone number\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company\">Company</Label>\n                    <Input id=\"company\" placeholder=\"Enter company name\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"status\">Status</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"lead\">Lead</SelectItem>\n                        <SelectItem value=\"prospect\">Prospect</SelectItem>\n                        <SelectItem value=\"customer\">Customer</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"source\">Source</Label>\n                    <Input id=\"source\" placeholder=\"Enter lead source\" />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddCustomerOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={() => {\n                    toast.success('Customer added successfully!');\n                    setIsAddCustomerOpen(false);\n                  }}>\n                    Add Customer\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Customers Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customers Overview</CardTitle>\n              <CardDescription>\n                Manage your customer relationships and track interactions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Value</TableHead>\n                    <TableHead>Last Contact</TableHead>\n                    <TableHead>Next Follow-up</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredCustomers.map((customer) => (\n                    <TableRow key={customer.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{customer.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{customer.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{customer.company}</TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(customer.status)}>\n                          {customer.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>₹{customer.value.toLocaleString()}</TableCell>\n                      <TableCell>\n                        {customer.lastContact.toLocaleDateString()}\n                        <div className=\"text-xs text-muted-foreground\">\n                          {customer.lastContact.toLocaleTimeString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {customer.nextFollowUp.toLocaleDateString()}\n                        <div className=\"text-xs text-muted-foreground\">\n                          {customer.nextFollowUp.toLocaleTimeString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <MessageSquare className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Deals Tab */}\n        <TabsContent value=\"deals\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Sales Pipeline</h2>\n            <Dialog open={isAddDealOpen} onOpenChange={setIsAddDealOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Deal\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Deal</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dealTitle\">Deal Title</Label>\n                    <Input id=\"dealTitle\" placeholder=\"Enter deal title\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"customer\">Customer</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select customer\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {customers.map(customer => (\n                          <SelectItem key={customer.id} value={customer.id}>\n                            {customer.name} - {customer.company}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"value\">Deal Value (₹)</Label>\n                    <Input id=\"value\" type=\"number\" placeholder=\"Enter deal value\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"stage\">Stage</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select stage\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"lead\">Lead</SelectItem>\n                        <SelectItem value=\"qualification\">Qualification</SelectItem>\n                        <SelectItem value=\"proposal\">Proposal</SelectItem>\n                        <SelectItem value=\"negotiation\">Negotiation</SelectItem>\n                        <SelectItem value=\"closed-won\">Closed Won</SelectItem>\n                        <SelectItem value=\"closed-lost\">Closed Lost</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddDealOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={() => {\n                    toast.success('Deal added successfully!');\n                    setIsAddDealOpen(false);\n                  }}>\n                    Add Deal\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Deal</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Value</TableHead>\n                    <TableHead>Stage</TableHead>\n                    <TableHead>Probability</TableHead>\n                    <TableHead>Expected Close</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {deals.map((deal) => (\n                    <TableRow key={deal.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{deal.title}</div>\n                          <div className=\"text-sm text-muted-foreground\">Assigned to {deal.assignedTo}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{deal.customerName}</TableCell>\n                      <TableCell>₹{deal.value.toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Badge className={getStageColor(deal.stage)}>\n                          {deal.stage}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{deal.probability}%</TableCell>\n                      <TableCell>{deal.expectedCloseDate.toLocaleDateString()}</TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Tasks Tab */}\n        <TabsContent value=\"tasks\" className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-xl font-semibold\">Task Management</h2>\n            <Dialog open={isAddTaskOpen} onOpenChange={setIsAddTaskOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Task\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New Task</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taskTitle\">Task Title</Label>\n                    <Input id=\"taskTitle\" placeholder=\"Enter task title\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taskDescription\">Description</Label>\n                    <Input id=\"taskDescription\" placeholder=\"Enter task description\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taskPriority\">Priority</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select priority\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"taskType\">Type</Label>\n                    <Select>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"call\">Call</SelectItem>\n                        <SelectItem value=\"email\">Email</SelectItem>\n                        <SelectItem value=\"meeting\">Meeting</SelectItem>\n                        <SelectItem value=\"follow-up\">Follow-up</SelectItem>\n                        <SelectItem value=\"demo\">Demo</SelectItem>\n                        <SelectItem value=\"proposal\">Proposal</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddTaskOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={() => {\n                    toast.success('Task added successfully!');\n                    setIsAddTaskOpen(false);\n                  }}>\n                    Add Task\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Task</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {tasks.map((task) => (\n                    <TableRow key={task.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{task.title}</div>\n                          <div className=\"text-sm text-muted-foreground\">{task.description}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{task.type}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getPriorityColor(task.priority)}>\n                          {task.priority}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusColor(task.status)}>\n                          {task.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{task.dueDate.toLocaleDateString()}</TableCell>\n                      <TableCell>\n                        {task.customerId ? customers.find(c => c.id === task.customerId)?.name : '-'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <CheckCircle className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Activities Tab */}\n        <TabsContent value=\"activities\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Activities</CardTitle>\n              <CardDescription>\n                Track all customer interactions and activities\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {activities.map((activity) => (\n                  <div key={activity.id} className=\"flex items-start gap-4 p-4 border rounded-lg\">\n                    <div className=\"flex-shrink-0\">\n                      {activity.type === 'call' && <Phone className=\"w-5 h-5 text-blue-600\" />}\n                      {activity.type === 'email' && <Mail className=\"w-5 h-5 text-green-600\" />}\n                      {activity.type === 'meeting' && <Calendar className=\"w-5 h-5 text-purple-600\" />}\n                      {activity.type === 'note' && <FileText className=\"w-5 h-5 text-orange-600\" />}\n                      {activity.type === 'task' && <CheckCircle className=\"w-5 h-5 text-gray-600\" />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"font-medium\">{activity.customerName}</h4>\n                        <span className=\"text-sm text-muted-foreground\">\n                          {activity.date.toLocaleDateString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\">{activity.description}</p>\n                      {activity.outcome && (\n                        <p className=\"text-sm mt-2 p-2 bg-gray-50 rounded\">\n                          <strong>Outcome:</strong> {activity.outcome}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Sales Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                  <BarChart3 className=\"w-16 h-16\" />\n                  <span className=\"ml-2\">Sales Chart</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                  <PieChart className=\"w-16 h-16\" />\n                  <span className=\"ml-2\">Customer Chart</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n} ","size_bytes":35579},"client/src/pages/EmployeeLogin.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../hooks/useAuth';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card';\nimport { Alert, AlertDescription } from '../components/ui/alert';\nimport { Loader2, User, ArrowLeft, Eye, EyeOff, AlertTriangle, Building2 } from 'lucide-react';\n\nexport default function EmployeeLogin() {\n  const [employeeId, setEmployeeId] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [loginAttempts, setLoginAttempts] = useState(0);\n  const [isLocked, setIsLocked] = useState(false);\n  const [lockoutTime, setLockoutTime] = useState<Date | null>(null);\n  \n  const { company, employee, loginEmployee, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Security: Check for lockout\n  useEffect(() => {\n    const savedLockout = localStorage.getItem('employee_login_lockout');\n    if (savedLockout) {\n      const lockoutData = JSON.parse(savedLockout);\n      const now = new Date();\n      const lockoutEnd = new Date(lockoutData.endTime);\n      \n      if (now < lockoutEnd) {\n        setIsLocked(true);\n        setLockoutTime(lockoutEnd);\n      } else {\n        localStorage.removeItem('employee_login_lockout');\n        setIsLocked(false);\n        setLoginAttempts(0);\n      }\n    }\n  }, []);\n\n  // Security: Redirect if no company is logged in\n  useEffect(() => {\n    if (!company) {\n      setLocation('/login');\n    }\n  }, [company, setLocation]);\n\n  // Security: Redirect if already logged in as employee\n  useEffect(() => {\n    if (employee) {\n      setLocation('/dashboard');\n    }\n  }, [employee, setLocation]);\n\n  // Security: Input validation\n  const validateEmployeeId = (employeeId: string): boolean => {\n    return employeeId.length >= 3 && /^[A-Z0-9]+$/.test(employeeId);\n  };\n\n  const validatePassword = (password: string): boolean => {\n    return password.length >= 6;\n  };\n\n  // Security: Rate limiting\n  const handleRateLimit = () => {\n    const newAttempts = loginAttempts + 1;\n    setLoginAttempts(newAttempts);\n    \n    if (newAttempts >= 5) {\n      const lockoutEnd = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n      setIsLocked(true);\n      setLockoutTime(lockoutEnd);\n      localStorage.setItem('employee_login_lockout', JSON.stringify({\n        endTime: lockoutEnd.toISOString(),\n        attempts: newAttempts\n      }));\n    }\n  };\n\n  const resetRateLimit = () => {\n    setLoginAttempts(0);\n    setIsLocked(false);\n    setLockoutTime(null);\n    localStorage.removeItem('employee_login_lockout');\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (isLocked) {\n      setError('Account temporarily locked. Please try again later.');\n      return;\n    }\n\n    // Security: Input validation\n    if (!validateEmployeeId(employeeId)) {\n      setError('Employee ID must be at least 3 characters and contain only uppercase letters and numbers');\n      return;\n    }\n\n    if (!validatePassword(password)) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    setError('');\n    setIsLoading(true);\n\n    try {\n      const success = await loginEmployee({ employeeId, password });\n      \n      if (success) {\n        resetRateLimit();\n        setLocation('/dashboard');\n      } else {\n        handleRateLimit();\n        setError('Invalid employee ID or password');\n      }\n    } catch (err) {\n      handleRateLimit();\n      setError('An error occurred during login. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleBackToCompanyLogin = () => {\n    logout();\n    setLocation('/login');\n  };\n\n  const getRemainingLockoutTime = (): string => {\n    if (!lockoutTime) return '';\n    \n    const now = new Date();\n    const diff = lockoutTime.getTime() - now.getTime();\n    \n    if (diff <= 0) {\n      resetRateLimit();\n      return '';\n    }\n    \n    const minutes = Math.floor(diff / 60000);\n    const seconds = Math.floor((diff % 60000) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-100 p-4\">\n      <Card className=\"w-full max-w-md shadow-xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-green-100\">\n            <User className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Employee Login</CardTitle>\n          <CardDescription>\n            {company ? (\n              <>\n                Welcome to <span className=\"font-semibold\">{company.name}</span>\n              </>\n            ) : (\n              'Please log in to continue'\n            )}\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {company && (\n            <div className=\"flex items-center gap-3 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n              <Building2 className=\"h-5 w-5 text-blue-600\" />\n              <div className=\"text-sm\">\n                <p className=\"font-semibold text-blue-900\">{company.name}</p>\n                <p className=\"text-blue-700\">{company.email}</p>\n              </div>\n            </div>\n          )}\n\n          {isLocked && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-800\">\n                Account temporarily locked due to too many failed attempts. \n                Please try again in {getRemainingLockoutTime()}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {error && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n              <AlertDescription className=\"text-red-800\">{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"employeeId\">Employee ID</Label>\n              <Input\n                id=\"employeeId\"\n                type=\"text\"\n                placeholder=\"Enter your employee ID\"\n                value={employeeId}\n                onChange={(e) => setEmployeeId(e.target.value.toUpperCase())}\n                disabled={isLoading || isLocked}\n                required\n                className=\"transition-all focus:ring-2 focus:ring-green-500\"\n                autoComplete=\"username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  disabled={isLoading || isLocked}\n                  required\n                  className=\"pr-10 transition-all focus:ring-2 focus:ring-green-500\"\n                  autoComplete=\"current-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                  disabled={isLoading || isLocked}\n                >\n                  {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                </button>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={isLoading || isLocked}\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                'Sign In'\n              )}\n            </Button>\n          </form>\n\n          <div className=\"text-center text-sm text-gray-600\">\n            <p>Demo Employee Credentials:</p>\n            <p className=\"font-mono text-xs\">EMP001 / emp123</p>\n            <p className=\"font-mono text-xs\">EMP002 / emp123</p>\n            <p className=\"font-mono text-xs\">EMP003 / emp123</p>\n          </div>\n\n          <div className=\"pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              onClick={handleBackToCompanyLogin}\n              className=\"w-full\"\n              disabled={isLoading || isLocked}\n            >\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Back to Company Login\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n} \n","size_bytes":9273},"client/src/pages/Employees.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Employee } from '@/lib/types';\nimport { getEmployees, addEmployee, updateEmployee, deleteEmployee, generateNextEmployeeId, getEmployeeIdSettings } from '@/lib/storage';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Plus, Edit, Trash2, Search, UserCheck, Shield, Clock, Download } from 'lucide-react';\nimport * as XLSX from 'xlsx';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function Employees() {\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isCustomRoleDialogOpen, setIsCustomRoleDialogOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);\n  const [formData, setFormData] = useState({\n    id: '',\n    pin: '',\n    name: '',\n    email: '',\n    phone: '',\n    role: 'cashier' as 'admin' | 'manager' | 'cashier' | 'custom',\n    customRoleName: '',\n    hourlyRate: '',\n    permissions: {\n      canProcessSales: false,\n      canManageProducts: false,\n      canManageCustomers: false,\n      canViewReports: false,\n      canManageEmployees: false,\n      canProcessRefunds: false,\n      canApplyDiscounts: false,\n      canVoidTransactions: false\n    }\n  });\n\n  const [customRoles, setCustomRoles] = useState<Array<{\n    name: string;\n    permissions: typeof formData.permissions;\n  }>>([]);\n\n  useEffect(() => {\n    loadEmployees();\n  }, []);\n\n  const loadEmployees = async () => {\n    try {\n      const employeesData = await getEmployees();\n      const employeesArray = Array.isArray(employeesData) ? employeesData : [];\n      setEmployees(employeesArray);\n    } catch (error) {\n      console.error('Error loading employees:', error);\n      setEmployees([]);\n    }\n  };\n\n  const resetForm = () => {\n    const init = async () => {\n      try {\n        const nextId = await generateNextEmployeeId();\n        const idPreview = nextId || `EMP001`;\n        setFormData(prev => ({\n          ...prev,\n          id: idPreview,\n          pin: '',\n          name: '',\n          email: '',\n          phone: '',\n          role: 'cashier',\n          customRoleName: '',\n          hourlyRate: '',\n          permissions: {\n            canProcessSales: false,\n            canManageProducts: false,\n            canManageCustomers: false,\n            canViewReports: false,\n            canManageEmployees: false,\n            canProcessRefunds: false,\n            canApplyDiscounts: false,\n            canVoidTransactions: false\n          }\n        }));\n      } catch (error) {\n        console.error('Error generating employee ID:', error);\n        setFormData({\n          id: 'EMP001',\n          pin: '',\n          name: '',\n          email: '',\n          phone: '',\n          role: 'cashier',\n          customRoleName: '',\n          hourlyRate: '',\n          permissions: {\n            canProcessSales: false,\n            canManageProducts: false,\n            canManageCustomers: false,\n            canViewReports: false,\n            canManageEmployees: false,\n            canProcessRefunds: false,\n            canApplyDiscounts: false,\n            canVoidTransactions: false\n          }\n        });\n      }\n    };\n    void init();\n  };\n\n  const handleRoleChange = (role: 'admin' | 'manager' | 'cashier' | 'custom') => {\n    const rolePermissions = {\n      admin: {\n        canProcessSales: true,\n        canManageProducts: true,\n        canManageCustomers: true,\n        canViewReports: true,\n        canManageEmployees: true,\n        canProcessRefunds: true,\n        canApplyDiscounts: true,\n        canVoidTransactions: true\n      },\n      manager: {\n        canProcessSales: true,\n        canManageProducts: true,\n        canManageCustomers: true,\n        canViewReports: true,\n        canManageEmployees: false,\n        canProcessRefunds: true,\n        canApplyDiscounts: true,\n        canVoidTransactions: true\n      },\n      cashier: {\n        canProcessSales: true,\n        canManageProducts: false,\n        canManageCustomers: true,\n        canViewReports: false,\n        canManageEmployees: false,\n        canProcessRefunds: false,\n        canApplyDiscounts: true,\n        canVoidTransactions: false\n      },\n      custom: {\n        canProcessSales: false,\n        canManageProducts: false,\n        canManageCustomers: false,\n        canViewReports: false,\n        canManageEmployees: false,\n        canProcessRefunds: false,\n        canApplyDiscounts: false,\n        canVoidTransactions: false\n      }\n    };\n\n    setFormData({\n      ...formData,\n      role,\n      permissions: rolePermissions[role]\n    });\n  };\n\n  const handleCustomRoleSelect = (roleName: string) => {\n    const customRole = customRoles.find(role => role.name === roleName);\n    if (customRole) {\n      setFormData({\n        ...formData,\n        role: 'custom',\n        customRoleName: roleName,\n        permissions: customRole.permissions\n      });\n    }\n  };\n\n  const handleCreateCustomRole = () => {\n    if (!formData.customRoleName.trim()) {\n      toast.error('Please enter a custom role name');\n      return;\n    }\n\n    const newCustomRole = {\n      name: formData.customRoleName,\n      permissions: formData.permissions\n    };\n\n    setCustomRoles(prev => [...prev, newCustomRole]);\n    toast.success(`Custom role \"${formData.customRoleName}\" created successfully`);\n    setIsCustomRoleDialogOpen(false);\n  };\n\n  const handleDeleteCustomRole = (roleName: string) => {\n    setCustomRoles(prev => prev.filter(role => role.name !== roleName));\n    toast.success(`Custom role \"${roleName}\" deleted successfully`);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.pin) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    if (!/^\\d{4}$/.test(formData.pin)) {\n      toast.error('PIN must be exactly 4 digits');\n      return;\n    }\n\n    if (formData.role === 'custom' && !formData.customRoleName.trim()) {\n      toast.error('Please enter a custom role name');\n      return;\n    }\n\n    const employee: Employee = {\n      id: formData.id,\n      name: formData.name,\n      email: formData.email,\n      phone: formData.phone,\n      role: formData.role === 'custom' ? formData.customRoleName : formData.role,\n      permissions: formData.permissions,\n      hourlyRate: parseFloat(formData.hourlyRate) || 0,\n      isActive: true,\n      pin: formData.pin,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    if (editingEmployee) {\n      updateEmployee(editingEmployee.id, employee);\n      toast.success('Employee updated successfully');\n    } else {\n      addEmployee(employee);\n      toast.success('Employee added successfully');\n    }\n\n    loadEmployees();\n    setIsAddDialogOpen(false);\n    setEditingEmployee(null);\n    resetForm();\n  };\n\n  const handleEdit = (employee: Employee) => {\n    setEditingEmployee(employee);\n    setFormData({\n      id: employee.id,\n      pin: employee.pin,\n      name: employee.name,\n      email: employee.email,\n      phone: employee.phone || '',\n      role: employee.role,\n      customRoleName: '', // Clear custom role name when editing a standard role\n      hourlyRate: employee.hourlyRate?.toString() || '',\n      permissions: employee.permissions\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteEmployee(id);\n    loadEmployees();\n    toast.success('Employee deleted successfully');\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin': return 'destructive';\n      case 'manager': return 'default';\n      case 'cashier': return 'secondary';\n      default: return 'outline'; // Custom roles will use outline variant\n    }\n  };\n\n  const filteredEmployees = employees.filter(employee =>\n    employee.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    employee.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    employee.role.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const exportEmployees = (format: 'xlsx' | 'csv' = 'xlsx') => {\n    try {\n      const rows = filteredEmployees.map(e => ({\n        ID: e.id,\n        EmployeeID: (e as any).employeeId || e.id,\n        Name: e.name,\n        Email: e.email || '',\n        Phone: e.phone || '',\n        Role: e.role || '',\n        HourlyRate: e.hourlyRate || 0,\n        Active: e.isActive ? 'Yes' : 'No'\n      }));\n      const ws = XLSX.utils.json_to_sheet(rows);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Employees');\n      const file = format === 'csv' ? 'employees.csv' : 'employees.xlsx';\n      XLSX.writeFile(wb, file, { bookType: format });\n    } catch (error) {\n      toast.error('Failed to export employees');\n    }\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Employees</h1>\n          <p className=\"text-muted-foreground\">Manage your staff and their permissions</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" onClick={() => exportEmployees('xlsx')}>\n            <Download className=\"w-4 h-4 mr-2\" /> Export Employees\n          </Button>\n          <Button variant=\"outline\" onClick={() => exportEmployees('csv')}>\n            <Download className=\"w-4 h-4 mr-2\" /> Export CSV\n          </Button>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Employee\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingEmployee ? 'Edit Employee' : 'Add New Employee'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"employee-id\">Employee ID</Label>\n                    <Input\n                      id=\"employee-id\"\n                      value={formData.id}\n                      onChange={(e) => setFormData({...formData, id: e.target.value.toUpperCase()})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"name\">Name *</Label>\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData({...formData, name: e.target.value})}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => setFormData({...formData, email: e.target.value})}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"pin\">4-digit PIN *</Label>\n                    <Input\n                      id=\"pin\"\n                      type=\"password\"\n                      value={formData.pin}\n                      onChange={(e) => setFormData({...formData, pin: e.target.value.replace(/[^0-9]/g, '')})}\n                      maxLength={4}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select value={formData.role} onValueChange={handleRoleChange}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                        <SelectItem value=\"manager\">Manager</SelectItem>\n                        <SelectItem value=\"cashier\">Cashier</SelectItem>\n                        <SelectItem value=\"custom\">Custom Role</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"hourlyRate\">Hourly Rate</Label>\n                    <Input\n                      id=\"hourlyRate\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={formData.hourlyRate}\n                      onChange={(e) => setFormData({...formData, hourlyRate: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                {formData.role === 'custom' && (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"customRoleName\">Custom Role Name *</Label>\n                      <Input\n                        id=\"customRoleName\"\n                        value={formData.customRoleName}\n                        onChange={(e) => setFormData({...formData, customRoleName: e.target.value})}\n                        required\n                      />\n                    </div>\n                    \n                    {/* Custom Role Management */}\n                    <div className=\"border rounded-lg p-4 bg-gray-50 dark:bg-gray-800\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <h3 className=\"font-semibold\">Custom Role Management</h3>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setIsCustomRoleDialogOpen(true)}\n                        >\n                          Manage Custom Roles\n                        </Button>\n                      </div>\n                      \n                      {customRoles.length > 0 && (\n                        <div className=\"space-y-2\">\n                          <Label>Saved Custom Roles:</Label>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {customRoles.map((role) => (\n                              <Badge\n                                key={role.name}\n                                variant={formData.customRoleName === role.name ? \"default\" : \"secondary\"}\n                                className=\"cursor-pointer\"\n                                onClick={() => handleCustomRoleSelect(role.name)}\n                              >\n                                {role.name}\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div>\n                  <Label className=\"text-base font-medium\">Permissions</Label>\n                  <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canProcessSales\"\n                        checked={formData.permissions.canProcessSales}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canProcessSales: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canProcessSales\">Process Sales</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canManageProducts\"\n                        checked={formData.permissions.canManageProducts}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canManageProducts: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canManageProducts\">Manage Products</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canManageCustomers\"\n                        checked={formData.permissions.canManageCustomers}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canManageCustomers: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canManageCustomers\">Manage Customers</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canViewReports\"\n                        checked={formData.permissions.canViewReports}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canViewReports: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canViewReports\">View Reports</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canManageEmployees\"\n                        checked={formData.permissions.canManageEmployees}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canManageEmployees: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canManageEmployees\">Manage Employees</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canProcessRefunds\"\n                        checked={formData.permissions.canProcessRefunds}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canProcessRefunds: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canProcessRefunds\">Process Refunds</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canApplyDiscounts\"\n                        checked={formData.permissions.canApplyDiscounts}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canApplyDiscounts: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canApplyDiscounts\">Apply Discounts</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"canVoidTransactions\"\n                        checked={formData.permissions.canVoidTransactions}\n                        onCheckedChange={(checked) => setFormData({\n                          ...formData,\n                          permissions: {...formData.permissions, canVoidTransactions: !!checked}\n                        })}\n                      />\n                      <Label htmlFor=\"canVoidTransactions\">Void Transactions</Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => {\n                    setIsAddDialogOpen(false);\n                    setEditingEmployee(null);\n                    resetForm();\n                  }}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">\n                    {editingEmployee ? 'Update Employee' : 'Add Employee'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Search */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"w-5 h-5\" />\n            Search Employees\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Input\n            placeholder=\"Search by name, email, or role...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Employees List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Employees</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {filteredEmployees.length} employee{filteredEmployees.length !== 1 ? 's' : ''} found\n          </p>\n        </CardHeader>\n        <CardContent>\n          {filteredEmployees.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <UserCheck className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n              <p>No employees found</p>\n            </div>\n          ) : (\n            <div className=\"grid gap-4\">\n              {filteredEmployees.map((employee) => (\n                <Card key={employee.id} className=\"p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <UserCheck className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold\">{employee.name}</h3>\n                        <p className=\"text-sm text-muted-foreground\">{employee.email}</p>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Badge variant={getRoleBadgeVariant(employee.role)}>\n                            {employee.role}\n                          </Badge>\n                          {employee.hourlyRate && (\n                            <Badge variant=\"outline\">\n                              ₹{employee.hourlyRate}/hr\n                            </Badge>\n                          )}\n                          <Badge variant={employee.isActive ? 'default' : 'secondary'}>\n                            {employee.isActive ? 'Active' : 'Inactive'}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(employee)}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\">\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Employee</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete {employee.name}? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction onClick={() => handleDelete(employee.id)}>\n                              Delete\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Custom Role Management Dialog */}\n      <Dialog open={isCustomRoleDialogOpen} onOpenChange={setIsCustomRoleDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Manage Custom Roles</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Create New Custom Role */}\n            <div className=\"border rounded-lg p-4\">\n              <h3 className=\"font-semibold mb-4\">Create New Custom Role</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"newRoleName\">Role Name</Label>\n                  <Input\n                    id=\"newRoleName\"\n                    placeholder=\"Enter custom role name\"\n                    value={formData.customRoleName}\n                    onChange={(e) => setFormData({...formData, customRoleName: e.target.value})}\n                  />\n                </div>\n                \n                <div>\n                  <Label className=\"text-sm font-medium\">Permissions</Label>\n                  <div className=\"grid grid-cols-2 gap-4 mt-2\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canProcessSales\"\n                          checked={formData.permissions.canProcessSales}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canProcessSales: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canProcessSales\" className=\"text-sm\">Process Sales</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canManageProducts\"\n                          checked={formData.permissions.canManageProducts}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canManageProducts: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canManageProducts\" className=\"text-sm\">Manage Products</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canManageCustomers\"\n                          checked={formData.permissions.canManageCustomers}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canManageCustomers: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canManageCustomers\" className=\"text-sm\">Manage Customers</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canViewReports\"\n                          checked={formData.permissions.canViewReports}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canViewReports: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canViewReports\" className=\"text-sm\">View Reports</Label>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canManageEmployees\"\n                          checked={formData.permissions.canManageEmployees}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canManageEmployees: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canManageEmployees\" className=\"text-sm\">Manage Employees</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canProcessRefunds\"\n                          checked={formData.permissions.canProcessRefunds}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canProcessRefunds: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canProcessRefunds\" className=\"text-sm\">Process Refunds</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canApplyDiscounts\"\n                          checked={formData.permissions.canApplyDiscounts}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canApplyDiscounts: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canApplyDiscounts\" className=\"text-sm\">Apply Discounts</Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id=\"canVoidTransactions\"\n                          checked={formData.permissions.canVoidTransactions}\n                          onCheckedChange={(checked) =>\n                            setFormData({\n                              ...formData,\n                              permissions: { ...formData.permissions, canVoidTransactions: checked as boolean }\n                            })\n                          }\n                        />\n                        <Label htmlFor=\"canVoidTransactions\" className=\"text-sm\">Void Transactions</Label>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button onClick={handleCreateCustomRole} className=\"w-full\">\n                  Create Custom Role\n                </Button>\n              </div>\n            </div>\n\n            {/* Existing Custom Roles */}\n            {customRoles.length > 0 && (\n              <div className=\"border rounded-lg p-4\">\n                <h3 className=\"font-semibold mb-4\">Existing Custom Roles</h3>\n                <div className=\"space-y-3\">\n                  {customRoles.map((role) => (\n                    <div key={role.name} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div>\n                        <h4 className=\"font-medium\">{role.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {Object.values(role.permissions).filter(Boolean).length} permissions enabled\n                        </p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleCustomRoleSelect(role.name)}\n                        >\n                          Use\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteCustomRole(role.name)}\n                        >\n                          Delete\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":34449},"client/src/pages/Index.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  ShoppingCart, \n  Package, \n  Users, \n  Receipt, \n  BarChart3, \n  Settings,\n  TrendingUp,\n  DollarSign,\n  Activity,\n  Zap\n} from 'lucide-react';\nexport default function Index() {\n  // Mock data for demonstration\n  const stats = [\n    { title: 'Today\\'s Sales', value: '₹12,345', icon: DollarSign, trend: '+12%', trendDirection: 'up' as const },\n    { title: 'Products Sold', value: '89', icon: Package, trend: '+8%', trendDirection: 'up' as const },\n    { title: 'Active Customers', value: '156', icon: Users, trend: '+24%', trendDirection: 'up' as const },\n    { title: 'Total Transactions', value: '23', icon: Receipt, trend: '+5%', trendDirection: 'up' as const },\n  ];\n\n  const quickActions = [\n    { title: 'New Sale', description: 'Start a new transaction', icon: ShoppingCart, href: '/sales', color: 'bg-blue-500' },\n    { title: 'Add Product', description: 'Add new inventory item', icon: Package, href: '/products', color: 'bg-green-500' },\n    { title: 'Add Customer', description: 'Register new customer', icon: Users, href: '/customers', color: 'bg-purple-500' },\n    { title: 'View Reports', description: 'Check sales analytics', icon: BarChart3, href: '/reports', color: 'bg-orange-500' },\n  ];\n\n  const recentActivity = [\n    { action: 'Sale completed', amount: '₹1,250', time: '2 min ago', customer: 'John Doe' },\n    { action: 'Product added', amount: '₹850', time: '15 min ago', customer: 'Jane Smith' },\n    { action: 'Refund processed', amount: '₹420', time: '1 hour ago', customer: 'Mike Johnson' },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-foreground\">Ace-Bill Dashboard</h1>\n        <p className=\"text-muted-foreground\">Manage your point of sale operations</p>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat) => (\n          <Card key={stat.title}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{stat.title}</CardTitle>\n              <stat.icon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stat.value}</div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge \n                  variant={stat.trendDirection === 'up' ? 'default' : 'destructive'}\n                  className=\"text-xs\"\n                >\n                  {stat.trend}\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">from last month</span>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Quick Actions */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Quick Actions</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n          {quickActions.map((action) => (\n            <Link key={action.title} to={action.href}>\n              <Card className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                <CardHeader className=\"pb-3\">\n                  <div className={`w-12 h-12 rounded-lg ${action.color} flex items-center justify-center mb-3`}>\n                    <action.icon className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">{action.title}</CardTitle>\n                  <CardDescription>{action.description}</CardDescription>\n                </CardHeader>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      </div>\n\n      {/* Recent Activity */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Activity className=\"w-5 h-5\" />\n              Recent Activity\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivity.map((item, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                  <div>\n                    <p className=\"font-medium\">{item.action}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.customer} • {item.time}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-semibold\">{item.amount}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5\" />\n              Sales Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">This Week</span>\n                <span className=\"text-lg font-bold\">₹45,678</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Last Week</span>\n                <span className=\"text-lg font-bold text-muted-foreground\">₹38,234</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Growth</span>\n                <Badge className=\"bg-green-100 text-green-800\">+19.5%</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5974},"client/src/pages/Invoices.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  Plus, \n  Search, \n  Filter, \n  Download, \n  Eye, \n  Edit, \n  Trash2, \n  FileText,\n  Calendar,\n  DollarSign,\n  User,\n  Building2\n} from 'lucide-react';\nimport { \n  Invoice, \n  InvoiceItem, \n  getInvoices, \n  saveInvoice, \n  deleteInvoice, \n  getInvoiceStats,\n  generateInvoiceNumber,\n  calculateInvoiceTotals,\n  getInvoiceSettings\n} from '@/lib/invoice-utils';\nimport InvoiceViewer from '@/components/invoice/InvoiceViewer';\n\n\n\nconst Invoices = () => {\n  const { toast } = useToast();\n  const { company } = useAuth();\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedTemplate, setSelectedTemplate] = useState(1);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [isViewerOpen, setIsViewerOpen] = useState(false);\n\n  // Form state for new invoice\n  const [newInvoice, setNewInvoice] = useState({\n    customer: {\n      name: '',\n      email: '',\n      phone: '',\n      address: ''\n    },\n    items: [{ id: '1', name: '', description: '', quantity: 1, unitPrice: 0, total: 0 }],\n    notes: '',\n    template: 1,\n    currency: 'INR',\n    taxRate: 18\n  });\n\n  useEffect(() => {\n    // Load invoices from localStorage\n    const savedInvoices = getInvoices();\n    setInvoices(savedInvoices);\n  }, []);\n\n  const calculateTotals = (items: InvoiceItem[], taxRate: number) => {\n    return calculateInvoiceTotals(items, taxRate);\n  };\n\n  const handleItemChange = (index: number, field: keyof InvoiceItem, value: any) => {\n    const updatedItems = [...newInvoice.items];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    \n    // Recalculate total for this item\n    if (field === 'quantity' || field === 'unitPrice') {\n      updatedItems[index].total = updatedItems[index].quantity * updatedItems[index].unitPrice;\n    }\n    \n    setNewInvoice({ ...newInvoice, items: updatedItems });\n  };\n\n  const addItem = () => {\n    const newItem = {\n      id: Date.now().toString(),\n      name: '',\n      description: '',\n      quantity: 1,\n      unitPrice: 0,\n      total: 0\n    };\n    setNewInvoice({\n      ...newInvoice,\n      items: [...newInvoice.items, newItem]\n    });\n  };\n\n  const removeItem = (index: number) => {\n    const updatedItems = newInvoice.items.filter((_, i) => i !== index);\n    setNewInvoice({ ...newInvoice, items: updatedItems });\n  };\n\n  const createInvoice = () => {\n    if (!newInvoice.customer.name) {\n      toast({\n        title: \"Error\",\n        description: \"Customer name is required\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const { subtotal, taxAmount, total } = calculateTotals(newInvoice.items, newInvoice.taxRate);\n    \n    const invoice: Invoice = {\n      id: Date.now().toString(),\n      number: generateInvoiceNumber(getInvoiceSettings().invoiceNumberPrefix),\n      date: new Date().toISOString().split('T')[0],\n      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      customer: newInvoice.customer,\n      items: newInvoice.items,\n      subtotal,\n      taxRate: newInvoice.taxRate,\n      taxAmount,\n      total,\n      status: 'draft',\n      notes: newInvoice.notes,\n      template: newInvoice.template,\n      currency: newInvoice.currency\n    };\n\n    const updatedInvoices = saveInvoice(invoice);\n    setInvoices(updatedInvoices);\n    \n    // Reset form\n    setNewInvoice({\n      customer: { name: '', email: '', phone: '', address: '' },\n      items: [{ id: '1', name: '', description: '', quantity: 1, unitPrice: 0, total: 0 }],\n      notes: '',\n      template: 1,\n      currency: 'INR',\n      taxRate: 18\n    });\n    \n    setIsCreateDialogOpen(false);\n    toast({\n      title: \"Success\",\n      description: \"Invoice created successfully\"\n    });\n  };\n\n  const handleDeleteInvoice = (id: string) => {\n    const updatedInvoices = deleteInvoice(id);\n    setInvoices(updatedInvoices);\n    toast({\n      title: \"Success\",\n      description: \"Invoice deleted successfully\"\n    });\n  };\n\n  const handleViewInvoice = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setIsViewerOpen(true);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid': return 'bg-green-100 text-green-800';\n      case 'sent': return 'bg-blue-100 text-blue-800';\n      case 'overdue': return 'bg-red-100 text-red-800';\n      case 'draft': return 'bg-gray-100 text-gray-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredInvoices = invoices.filter(invoice => {\n    const matchesSearch = invoice.number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         invoice.customer.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const stats = getInvoiceStats(invoices);\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Invoices</h1>\n          <p className=\"text-muted-foreground\">Manage your invoices and billing</p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Invoice\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Invoice</DialogTitle>\n            </DialogHeader>\n            \n            <Tabs defaultValue=\"details\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"details\">Invoice Details</TabsTrigger>\n                <TabsTrigger value=\"items\">Items</TabsTrigger>\n                <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"details\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Template</Label>\n                    <Select value={selectedTemplate.toString()} onValueChange={(value) => setSelectedTemplate(parseInt(value))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {[1, 2, 3, 4, 5, 6, 7, 8, 9].map(num => (\n                          <SelectItem key={num} value={num.toString()}>Template {num}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Currency</Label>\n                    <Select value={newInvoice.currency} onValueChange={(value) => setNewInvoice({...newInvoice, currency: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"INR\">INR (₹)</SelectItem>\n                        <SelectItem value=\"USD\">USD ($)</SelectItem>\n                        <SelectItem value=\"EUR\">EUR (€)</SelectItem>\n                        <SelectItem value=\"GBP\">GBP (£)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Customer Information</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label>Customer Name *</Label>\n                      <Input\n                        value={newInvoice.customer.name}\n                        onChange={(e) => setNewInvoice({\n                          ...newInvoice,\n                          customer: { ...newInvoice.customer, name: e.target.value }\n                        })}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Email</Label>\n                      <Input\n                        type=\"email\"\n                        value={newInvoice.customer.email}\n                        onChange={(e) => setNewInvoice({\n                          ...newInvoice,\n                          customer: { ...newInvoice.customer, email: e.target.value }\n                        })}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Phone</Label>\n                      <Input\n                        value={newInvoice.customer.phone}\n                        onChange={(e) => setNewInvoice({\n                          ...newInvoice,\n                          customer: { ...newInvoice.customer, phone: e.target.value }\n                        })}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Tax Rate (%)</Label>\n                      <Input\n                        type=\"number\"\n                        value={newInvoice.taxRate}\n                        onChange={(e) => setNewInvoice({...newInvoice, taxRate: parseFloat(e.target.value) || 0})}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label>Address</Label>\n                    <Textarea\n                      value={newInvoice.customer.address}\n                      onChange={(e) => setNewInvoice({\n                        ...newInvoice,\n                        customer: { ...newInvoice.customer, address: e.target.value }\n                      })}\n                      rows={2}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Notes</Label>\n                  <Textarea\n                    value={newInvoice.notes}\n                    onChange={(e) => setNewInvoice({...newInvoice, notes: e.target.value})}\n                    rows={3}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"items\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  {newInvoice.items.map((item, index) => (\n                    <div key={item.id} className=\"border rounded-lg p-4 space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <h4 className=\"font-medium\">Item {index + 1}</h4>\n                        {newInvoice.items.length > 1 && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => removeItem(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <Label>Name</Label>\n                          <Input\n                            value={item.name}\n                            onChange={(e) => handleItemChange(index, 'name', e.target.value)}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label>Description</Label>\n                          <Input\n                            value={item.description}\n                            onChange={(e) => handleItemChange(index, 'description', e.target.value)}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label>Quantity</Label>\n                          <Input\n                            type=\"number\"\n                            value={item.quantity}\n                            onChange={(e) => handleItemChange(index, 'quantity', parseInt(e.target.value) || 0)}\n                          />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label>Unit Price</Label>\n                          <Input\n                            type=\"number\"\n                            value={item.unitPrice}\n                            onChange={(e) => handleItemChange(index, 'unitPrice', parseFloat(e.target.value) || 0)}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"font-medium\">Total: ₹{item.total.toFixed(2)}</span>\n                      </div>\n                    </div>\n                  ))}\n                  <Button onClick={addItem} variant=\"outline\" className=\"w-full\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <div className=\"space-y-2 text-right\">\n                    <div>Subtotal: ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).subtotal.toFixed(2)}</div>\n                    <div>Tax ({newInvoice.taxRate}%): ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).taxAmount.toFixed(2)}</div>\n                    <div className=\"text-lg font-bold\">\n                      Total: ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).total.toFixed(2)}\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"preview\" className=\"space-y-4\">\n                <div className=\"border rounded-lg p-6 bg-gray-50\">\n                  <div className=\"text-center mb-6\">\n                    <h2 className=\"text-2xl font-bold\">INVOICE PREVIEW</h2>\n                    <p className=\"text-gray-600\">Template {selectedTemplate}</p>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-8 mb-6\">\n                    <div>\n                      <h3 className=\"font-bold mb-2\">From:</h3>\n                      <p className=\"text-sm\">{company?.name || 'Your Company'}</p>\n                      <p className=\"text-sm text-gray-600\">Company Address</p>\n                    </div>\n                    <div>\n                      <h3 className=\"font-bold mb-2\">To:</h3>\n                      <p className=\"text-sm\">{newInvoice.customer.name || 'Customer Name'}</p>\n                      <p className=\"text-sm text-gray-600\">{newInvoice.customer.address || 'Customer Address'}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"mb-6\">\n                    <h3 className=\"font-bold mb-2\">Items:</h3>\n                    <div className=\"space-y-2\">\n                      {newInvoice.items.map((item, index) => (\n                        <div key={index} className=\"flex justify-between text-sm\">\n                          <span>{item.name || `Item ${index + 1}`}</span>\n                          <span>₹{item.total.toFixed(2)}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-4 text-right\">\n                    <div className=\"space-y-1\">\n                      <div>Subtotal: ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).subtotal.toFixed(2)}</div>\n                      <div>Tax: ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).taxAmount.toFixed(2)}</div>\n                      <div className=\"text-lg font-bold\">\n                        Total: ₹{calculateTotals(newInvoice.items, newInvoice.taxRate).total.toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button onClick={createInvoice}>\n                Create Invoice\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <FileText className=\"h-4 w-4 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Invoices</p>\n                <p className=\"text-2xl font-bold\">{stats.total}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-4 w-4 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Paid</p>\n                <p className=\"text-2xl font-bold\">{stats.paid}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4 text-yellow-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Pending</p>\n                <p className=\"text-2xl font-bold\">{stats.pending}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <User className=\"h-4 w-4 text-red-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Overdue</p>\n                <p className=\"text-2xl font-bold\">{stats.overdue}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Building2 className=\"h-4 w-4 text-purple-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Total Amount</p>\n                <p className=\"text-2xl font-bold\">₹{stats.totalAmount.toFixed(2)}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search invoices...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"sent\">Sent</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Invoices Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Invoices</CardTitle>\n          <CardDescription>Manage and track your invoices</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Invoice #</TableHead>\n                <TableHead>Customer</TableHead>\n                <TableHead>Date</TableHead>\n                <TableHead>Due Date</TableHead>\n                <TableHead>Amount</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredInvoices.map((invoice) => (\n                <TableRow key={invoice.id}>\n                  <TableCell className=\"font-medium\">{invoice.number}</TableCell>\n                  <TableCell>{invoice.customer.name}</TableCell>\n                  <TableCell>{new Date(invoice.date).toLocaleDateString()}</TableCell>\n                  <TableCell>{new Date(invoice.dueDate).toLocaleDateString()}</TableCell>\n                  <TableCell>₹{invoice.total.toFixed(2)}</TableCell>\n                  <TableCell>\n                    <Badge className={getStatusColor(invoice.status)}>\n                      {invoice.status}\n                    </Badge>\n                  </TableCell>\n                                     <TableCell>\n                     <div className=\"flex space-x-2\">\n                       <Button \n                         variant=\"outline\" \n                         size=\"sm\"\n                         onClick={() => handleViewInvoice(invoice)}\n                       >\n                         <Eye className=\"h-4 w-4\" />\n                       </Button>\n                       <Button variant=\"outline\" size=\"sm\">\n                         <Edit className=\"h-4 w-4\" />\n                       </Button>\n                       <Button \n                         variant=\"outline\" \n                         size=\"sm\"\n                         onClick={() => handleDeleteInvoice(invoice.id)}\n                       >\n                         <Trash2 className=\"h-4 w-4\" />\n                       </Button>\n                     </div>\n                   </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n                 </CardContent>\n       </Card>\n\n       {/* Invoice Viewer */}\n       {selectedInvoice && (\n         <InvoiceViewer\n           invoice={selectedInvoice}\n           isOpen={isViewerOpen}\n           onClose={() => {\n             setIsViewerOpen(false);\n             setSelectedInvoice(null);\n           }}\n         />\n       )}\n     </div>\n   );\n };\n\nexport default Invoices;\n","size_bytes":23960},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const [location] = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location\n    );\n  }, [location]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":713},"client/src/pages/Products.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Product } from '@/lib/types';\nimport { getProducts, addProduct, updateProduct, deleteProduct } from '@/lib/storage';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\nimport { Plus, Edit, Trash2, Search, Package, AlertTriangle, Upload, Download, SlidersHorizontal } from 'lucide-react';\nimport * as XLSX from 'xlsx';\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { toast } from '@/hooks/use-toast';\nimport { ExcelImport } from '@/components/import/ExcelImport';\n\nexport default function Products() {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n  const [exportUseCurrentView, setExportUseCurrentView] = useState(true);\n  const [savedViews, setSavedViews] = useState<Array<{ name: string; searchQuery: string; selectedCategory: string; columns: Record<string, boolean> }>>([]);\n  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>({\n    name: true,\n    category: true,\n    price: true,\n    stock: true,\n    sku: true,\n    supplier: true,\n    status: true,\n    actions: true,\n  });\n  const [formData, setFormData] = useState({\n    name: '',\n    price: '',\n    cost: '',\n    sku: '',\n    barcode: '',\n    category: '',\n    stock: '',\n    minStock: '',\n    description: '',\n    supplier: '',\n    taxRate: '0.08',\n    type: 'Product',\n    group: '',\n    brand: '',\n    itemCode: '',\n    printName: '',\n    unit: '',\n    openingStockValue: '',\n    minSalePrice: '',\n    mrp: '',\n    hsn: '',\n    saleDiscount: '',\n    printDescription: 'N',\n    oneClickSale: 'N',\n    enableTracking: 'N',\n    printSerial: 'N',\n    notForSale: 'N',\n    productType: 'General'\n  });\n\n  useEffect(() => {\n    loadProducts();\n  }, []);\n\n  useEffect(() => {\n    try {\n      const storedViews = localStorage.getItem('productsSavedViews');\n      if (storedViews) setSavedViews(JSON.parse(storedViews));\n      const storedCols = localStorage.getItem('productsVisibleColumns');\n      if (storedCols) setVisibleColumns(JSON.parse(storedCols));\n    } catch {}\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('productsVisibleColumns', JSON.stringify(visibleColumns));\n  }, [visibleColumns]);\n\n  const loadProducts = async () => {\n    try {\n      const productsData = await getProducts();\n      const productsArray = Array.isArray(productsData) ? productsData : [];\n      setProducts(productsArray);\n    } catch (error) {\n      console.error('Error loading products:', error);\n      setProducts([]);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      price: '',\n      cost: '',\n      sku: '',\n      barcode: '',\n      category: '',\n      stock: '',\n      minStock: '',\n      description: '',\n      supplier: '',\n      taxRate: '0.08',\n      type: 'Product',\n      group: '',\n      brand: '',\n      itemCode: '',\n      printName: '',\n      unit: '',\n      openingStockValue: '',\n      minSalePrice: '',\n      mrp: '',\n      hsn: '',\n      saleDiscount: '',\n      printDescription: 'N',\n      oneClickSale: 'N',\n      enableTracking: 'N',\n      printSerial: 'N',\n      notForSale: 'N',\n      productType: 'General'\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.price || !formData.category) {\n      toast.error('Please fill in all required fields');\n      return;\n    }\n\n    const productData: Omit<Product, 'id' | 'createdAt' | 'updatedAt'> = {\n      name: formData.name,\n      price: parseFloat(formData.price),\n      cost: parseFloat(formData.cost) || 0,\n      sku: formData.sku,\n      barcode: formData.barcode,\n      category: formData.category,\n      stock: parseInt(formData.stock) || 0,\n      minStock: parseInt(formData.minStock) || 0,\n      description: formData.description,\n      supplier: formData.supplier,\n      taxRate: parseFloat(formData.taxRate) || 0,\n      isActive: true,\n      type: formData.type,\n      group: formData.group,\n      brand: formData.brand,\n      itemCode: formData.itemCode,\n      printName: formData.printName,\n      unit: formData.unit,\n      openingStockValue: parseFloat(formData.openingStockValue) || 0,\n      minSalePrice: parseFloat(formData.minSalePrice) || 0,\n      mrp: parseFloat(formData.mrp) || 0,\n      hsn: formData.hsn,\n      saleDiscount: parseFloat(formData.saleDiscount) || 0,\n      printDescription: formData.printDescription,\n      oneClickSale: formData.oneClickSale,\n      enableTracking: formData.enableTracking,\n      printSerial: formData.printSerial,\n      notForSale: formData.notForSale,\n      productType: formData.productType\n    };\n\n    if (editingProduct) {\n      updateProduct(editingProduct.id, productData);\n      toast.success('Product updated successfully');\n      setEditingProduct(null);\n    } else {\n      const newProduct: Product = {\n        id: Date.now().toString(),\n        ...productData,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      addProduct(newProduct);\n      toast.success('Product added successfully');\n    }\n\n    loadProducts();\n    resetForm();\n    setIsAddDialogOpen(false);\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    setFormData({\n      name: product.name,\n      price: product.price.toString(),\n      cost: product.cost.toString(),\n      sku: product.sku || '',\n      barcode: product.barcode || '',\n      category: product.category,\n      stock: product.stock.toString(),\n      minStock: product.minStock.toString(),\n      description: product.description || '',\n      supplier: product.supplier || '',\n      taxRate: product.taxRate.toString(),\n      type: product.type || 'Product',\n      group: product.group || '',\n      brand: product.brand || '',\n      itemCode: product.itemCode || '',\n      printName: product.printName || '',\n      unit: product.unit || '',\n      openingStockValue: product.openingStockValue?.toString() || '',\n      minSalePrice: product.minSalePrice?.toString() || '',\n      mrp: product.mrp?.toString() || '',\n      hsn: product.hsn || '',\n      saleDiscount: product.saleDiscount?.toString() || '',\n      printDescription: product.printDescription || 'N',\n      oneClickSale: product.oneClickSale || 'N',\n      enableTracking: product.enableTracking || 'N',\n      printSerial: product.printSerial || 'N',\n      notForSale: product.notForSale || 'N',\n      productType: product.productType || 'General'\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    deleteProduct(id);\n    loadProducts();\n    toast.success('Product deleted successfully');\n  };\n\n  const getCategories = () => {\n    if (!Array.isArray(products)) return [];\n    const categories = new Set(products.map(p => p.category));\n    return Array.from(categories);\n  };\n\n  const filteredProducts = Array.isArray(products) ? products.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.sku?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         product.barcode?.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  }) : [];\n\n  const lowStockProducts = Array.isArray(products) ? products.filter(p => p.stock <= p.minStock) : [];\n\n  const [exportFormat, setExportFormat] = useState<'xlsx' | 'csv'>('xlsx');\n\n  const exportProductsToExcel = () => {\n    try {\n      const rows = (Array.isArray(products) ? products : []).map(p => ({\n        ID: p.id,\n        Name: p.name,\n        Category: p.category,\n        Price: p.price,\n        Cost: p.cost,\n        Stock: p.stock,\n        MinStock: p.minStock,\n        SKU: p.sku || '',\n        Barcode: p.barcode || '',\n        Supplier: p.supplier || '',\n        TaxRate: p.taxRate || 0\n      }));\n      const worksheet = XLSX.utils.json_to_sheet(rows);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, 'Products');\n      const fileName = exportFormat === 'csv' ? 'products.csv' : 'products.xlsx';\n      XLSX.writeFile(workbook, fileName, { bookType: exportFormat });\n    } catch (error) {\n      console.error('Export products failed:', error);\n      toast.error('Failed to export products');\n    }\n  };\n\n  const exportWithWizard = () => {\n    try {\n      const source = exportUseCurrentView ? filteredProducts : (Array.isArray(products) ? products : []);\n      const rows = source.map(p => {\n        const row: Record<string, any> = {};\n        if (visibleColumns.name) row.Name = p.name;\n        if (visibleColumns.category) row.Category = p.category;\n        if (visibleColumns.price) row.Price = p.price;\n        if (visibleColumns.stock) row.Stock = p.stock;\n        if (visibleColumns.sku) row.SKU = p.sku || '';\n        if (visibleColumns.supplier) row.Supplier = p.supplier || '';\n        if (visibleColumns.status) row.Status = p.stock <= p.minStock ? 'Low Stock' : 'In Stock';\n        return row;\n      });\n      const ws = XLSX.utils.json_to_sheet(rows);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Products');\n      XLSX.writeFile(wb, 'products-export.xlsx');\n      setIsExportDialogOpen(false);\n    } catch (error) {\n      console.error('Product export wizard failed:', error);\n      toast.error('Failed to export products');\n    }\n  };\n\n  const saveCurrentView = (name: string) => {\n    const v = { name, searchQuery, selectedCategory, columns: visibleColumns };\n    const updated = [...savedViews.filter(x => x.name !== name), v];\n    setSavedViews(updated);\n    try { localStorage.setItem('productsSavedViews', JSON.stringify(updated)); } catch {}\n    toast.success(`Saved view \"${name}\"`);\n  };\n\n  const applySavedView = (name: string) => {\n    const v = savedViews.find(x => x.name === name);\n    if (!v) return;\n    setSearchQuery(v.searchQuery);\n    setSelectedCategory(v.selectedCategory);\n    setVisibleColumns(v.columns);\n    toast.success(`Applied view \"${name}\"`);\n  };\n\n  const UOM_OPTIONS = [\n    'UNT', 'TON', 'TBS', 'SQY', 'SQM', 'SQF', 'SET', 'ROL', 'QTL', 'PCS', 'PAC', 'NOS', 'MTR', 'MLT', 'KLR', 'KGS', 'GMS', 'DOZ', 'CTN', 'CMS', 'CCM', 'CBM', 'CAN', 'BUN', 'BTL', 'BOX', 'BKL', 'BDL', 'BAL', 'BAG'\n  ];\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6 max-w-full overflow-x-hidden\">\n      {/* Header Section - Responsive */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Products</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Manage your inventory and product catalog</p>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"hidden sm:flex items-center gap-2\">\n                <SlidersHorizontal className=\"w-4 h-4\" />\n                Columns\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              {Object.keys(visibleColumns).map(key => (\n                <DropdownMenuCheckboxItem key={key} checked={visibleColumns[key]} onCheckedChange={(v) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(v) }))}>\n                  {key.charAt(0).toUpperCase() + key.slice(1)}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">Views</Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              {savedViews.length === 0 && <div className=\"px-3 py-2 text-sm text-muted-foreground\">No saved views</div>}\n              {savedViews.map(v => (\n                <DropdownMenuCheckboxItem key={v.name} checked={false} onSelect={(e) => { e.preventDefault(); applySavedView(v.name); }}>\n                  {v.name}\n                </DropdownMenuCheckboxItem>\n              ))}\n              <div className=\"px-3 py-2\">\n                <div className=\"flex gap-2\">\n                  <Input placeholder=\"View name\" className=\"h-8\" onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      const name = (e.target as HTMLInputElement).value.trim();\n                      if (name) { saveCurrentView(name); (e.target as HTMLInputElement).value = ''; }\n                    }\n                  }} />\n                  <Button size=\"sm\" onClick={() => {\n                    const el = document.querySelector<HTMLInputElement>('input[placeholder=\\\"View name\\\"]');\n                    const name = el?.value.trim() || '';\n                    if (name) { saveCurrentView(name); if (el) el.value = ''; }\n                  }}>Save</Button>\n                </div>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button onClick={() => setIsExportDialogOpen(true)} className=\"bg-blue-600 hover:bg-blue-700 text-white\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n          <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>\n            <DialogContent className=\"sm:max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Export Products</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Checkbox id=\"prodCurrentView2\" checked={exportUseCurrentView} onCheckedChange={(v) => setExportUseCurrentView(Boolean(v))} />\n                  <label htmlFor=\"prodCurrentView2\" className=\"text-sm\">Export current view (respects filters)</label>\n                </div>\n                <div>\n                  <div className=\"font-medium mb-2\">Columns</div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {Object.keys(visibleColumns).filter(k => k !== 'actions').map((key) => (\n                      <label key={key} className=\"flex items-center gap-2 text-sm\">\n                        <Checkbox checked={visibleColumns[key]} onCheckedChange={(v) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(v) }))} />\n                        {key.charAt(0).toUpperCase() + key.slice(1)}\n                      </label>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label>Format</Label>\n                    <select className=\"w-full border rounded h-9 px-2\" value={exportFormat} onChange={(e) => setExportFormat(e.target.value as 'xlsx' | 'csv')}>\n                      <option value=\"xlsx\">Excel (.xlsx)</option>\n                      <option value=\"csv\">CSV (.csv)</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsExportDialogOpen(false)}>Cancel</Button>\n                  <Button onClick={exportWithWizard}>\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => { resetForm(); setEditingProduct(null); }} size=\"sm\" className=\"w-full sm:w-auto\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Product\n            </Button>\n          </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-4xl max-h-[80vh] overflow-y-auto p-4 sm:p-6\">\n              <DialogHeader>\n                <DialogTitle className=\"text-lg sm:text-xl\">{editingProduct ? 'Edit Product' : 'Add New Product'}</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4 sm:space-y-6\">\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4 lg:gap-8\">\n                  {/* Product Details */}\n                  <div className=\"space-y-4 border rounded p-4\">\n                    <div className=\"font-bold text-lg mb-2\">Product Details</div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><Label htmlFor=\"group\">Group *</Label><Input id=\"group\" value={formData.group} onChange={e => setFormData({...formData, group: e.target.value})} required /></div>\n                      <div><Label htmlFor=\"brand\">Brand *</Label><Input id=\"brand\" value={formData.brand} onChange={e => setFormData({...formData, brand: e.target.value})} required /></div>\n                      <div><Label htmlFor=\"itemCode\">Item Code</Label><Input id=\"itemCode\" value={formData.itemCode} onChange={e => setFormData({...formData, itemCode: e.target.value})} /></div>\n                      <div><Label htmlFor=\"name\">Product Name *</Label><Input id=\"name\" value={formData.name} onChange={e => setFormData({...formData, name: e.target.value})} required /></div>\n                      <div><Label htmlFor=\"printName\">Print Name</Label><Input id=\"printName\" value={formData.printName} onChange={e => setFormData({...formData, printName: e.target.value})} /></div>\n                </div>\n                </div>\n                  {/* GST Details */}\n                  <div className=\"space-y-4 border rounded p-4\">\n                    <div className=\"font-bold text-lg mb-2\">GST Details</div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><Label htmlFor=\"hsn\">HSN / SAC Code</Label><Input id=\"hsn\" value={formData.hsn} onChange={e => setFormData({...formData, hsn: e.target.value})} /></div>\n                      <div><Label>GST Rates *</Label>\n                        <div className=\"flex gap-2\">\n                          <Input placeholder=\"CGST\" className=\"w-20\" value={formData.taxRate} onChange={e => setFormData({...formData, taxRate: e.target.value})} required />\n                          <span className=\"self-center\">%</span>\n                          <Input placeholder=\"SGST\" className=\"w-20\" />\n                          <span className=\"self-center\">%</span>\n                          <Input placeholder=\"IGST\" className=\"w-20\" />\n                          <span className=\"self-center\">%</span>\n                </div>\n                </div>\n                </div>\n                </div>\n                  {/* Stock and Unit Details */}\n                  <div className=\"space-y-4 border rounded p-4\">\n                    <div className=\"font-bold text-lg mb-2\">Stock and Unit Details</div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><Label htmlFor=\"unit\">UoM *</Label>\n                        <Select\n                          value={UOM_OPTIONS.includes(formData.unit) ? formData.unit : UOM_OPTIONS[0]}\n                          onValueChange={e => setFormData({...formData, unit: e})}\n                          required\n                        >\n                          <SelectTrigger className=\"w-full\">\n                            <SelectValue placeholder=\"Select UoM\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {UOM_OPTIONS.map(opt => (\n                              <SelectItem key={opt} value={opt}>{opt}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                </div>\n                      <div><Label htmlFor=\"stock\">Opening Stock</Label><Input id=\"stock\" value={formData.stock} onChange={e => setFormData({...formData, stock: e.target.value})} /></div>\n                      <div><Label htmlFor=\"openingStockValue\">Opening Stock Value</Label><Input id=\"openingStockValue\" value={formData.openingStockValue} onChange={e => setFormData({...formData, openingStockValue: e.target.value})} /></div>\n                </div>\n                </div>\n                  {/* Price Details */}\n                  <div className=\"space-y-4 border rounded p-4\">\n                    <div className=\"font-bold text-lg mb-2\">Price Details</div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><Label htmlFor=\"cost\">Purchase Price *</Label><Input id=\"cost\" value={formData.cost} onChange={e => setFormData({...formData, cost: e.target.value})} required /></div>\n                      <div><Label htmlFor=\"price\">Sale Price *</Label><Input id=\"price\" value={formData.price} onChange={e => setFormData({...formData, price: e.target.value})} required /></div>\n                      <div><Label htmlFor=\"minSalePrice\">Min. Sale Price</Label><Input id=\"minSalePrice\" value={formData.minSalePrice} onChange={e => setFormData({...formData, minSalePrice: e.target.value})} /></div>\n                      <div><Label htmlFor=\"mrp\">M.R.P.</Label><Input id=\"mrp\" value={formData.mrp} onChange={e => setFormData({...formData, mrp: e.target.value})} /></div>\n                </div>\n                </div>\n                  {/* Other Details */}\n                  <div className=\"space-y-4 border rounded p-4\">\n                    <div className=\"font-bold text-lg mb-2\">Other Details</div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div><Label htmlFor=\"saleDiscount\">Sale Discount</Label><Input id=\"saleDiscount\" value={formData.saleDiscount} onChange={e => setFormData({...formData, saleDiscount: e.target.value})} /></div>\n                      <div><Label htmlFor=\"minStock\">Reorder Level</Label><Input id=\"minStock\" value={formData.minStock} onChange={e => setFormData({...formData, minStock: e.target.value})} /></div>\n                      <div><Label htmlFor=\"productType\">Product Type</Label><Input id=\"productType\" value={formData.productType} onChange={e => setFormData({...formData, productType: e.target.value})} /></div>\n                      <div><Label htmlFor=\"sku\">Serial No.</Label><Input id=\"sku\" value={formData.sku} onChange={e => setFormData({...formData, sku: e.target.value})} /></div>\n                </div>\n                </div>\n                  {/* Product Description */}\n                  <div className=\"space-y-4 border rounded p-4 col-span-2\">\n                    <div className=\"font-bold text-lg mb-2\">Product Description</div>\n                  <Textarea id=\"description\" value={formData.description} onChange={e => setFormData({...formData, description: e.target.value})} maxLength={250} />\n                </div>\n                  {/* Product Settings */}\n                  <div className=\"space-y-4 border rounded p-4 col-span-2\">\n                    <div className=\"font-bold text-lg mb-2\">Product Settings</div>\n                    <div className=\"flex gap-4 flex-wrap\">\n                      <label className=\"flex items-center gap-2\"><input type=\"checkbox\" checked={formData.printDescription === 'Y'} onChange={e => setFormData({...formData, printDescription: e.target.checked ? 'Y' : 'N'})} /> Print Description</label>\n                      <label className=\"flex items-center gap-2\"><input type=\"checkbox\" checked={formData.printSerial === 'Y'} onChange={e => setFormData({...formData, printSerial: e.target.checked ? 'Y' : 'N'})} /> Print Serial No</label>\n                      <label className=\"flex items-center gap-2\"><input type=\"checkbox\" checked={formData.oneClickSale === 'Y'} onChange={e => setFormData({...formData, oneClickSale: e.target.checked ? 'Y' : 'N'})} /> One Click Sale</label>\n                      <label className=\"flex items-center gap-2\"><input type=\"checkbox\" checked={formData.enableTracking === 'Y'} onChange={e => setFormData({...formData, enableTracking: e.target.checked ? 'Y' : 'N'})} /> Enable Tracking</label>\n                      <label className=\"flex items-center gap-2\"><input type=\"checkbox\" checked={formData.notForSale === 'Y'} onChange={e => setFormData({...formData, notForSale: e.target.checked ? 'Y' : 'N'})} /> Not For Sale</label>\n                </div>\n                </div>\n                </div>\n                <div className=\"flex justify-end mt-4\">\n                  <Button type=\"submit\">{editingProduct ? 'Update' : 'Add'} Product</Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"products\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 h-auto\">\n          <TabsTrigger value=\"products\" className=\"text-xs sm:text-sm py-2\">Product List</TabsTrigger>\n          <TabsTrigger value=\"import\" className=\"text-xs sm:text-sm py-2\">\n            <Upload className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n            <span className=\"hidden sm:inline\">Import from Excel</span>\n            <span className=\"sm:hidden\">Import</span>\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"import\" className=\"space-y-6\">\n          <ExcelImport \n            type=\"products\" \n            onImportComplete={() => {\n              setProducts(getProducts());\n              toast.success('Products imported successfully!');\n            }} \n          />\n        </TabsContent>\n\n        <TabsContent value=\"products\" className=\"space-y-4 sm:space-y-6\">\n          {/* Stats Cards - Responsive */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Products</CardTitle>\n                <Package className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">{products.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-xs sm:text-sm font-medium\">Low Stock Items</CardTitle>\n                <AlertTriangle className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-yellow-600\">{lowStockProducts.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Value</CardTitle>\n                <Package className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">\n                  ₹{Array.isArray(products) ? products.reduce((sum, p) => sum + ((p.price || 0) * (p.stock || 0)), 0).toFixed(2) : '0.00'}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters - Responsive */}\n          <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 text-sm sm:text-base\"\n              />\n            </div>\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Filter by category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {getCategories().map(category => (\n                  <SelectItem key={category} value={category}>{category}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Products Grid - Responsive */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n            {filteredProducts.map((product) => (\n              <Card key={product.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-base sm:text-lg\">{product.name}</CardTitle>\n                      <p className=\"text-xs sm:text-sm text-muted-foreground\">{product.category}</p>\n                    </div>\n                    <Badge variant={product.stock <= product.minStock ? 'destructive' : 'secondary'} className=\"text-xs\">\n                      {product.stock <= product.minStock ? 'Low Stock' : 'In Stock'}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg sm:text-xl lg:text-2xl font-bold text-primary\">\n                      ₹{product.price.toFixed(2)}\n                    </span>\n                    <span className=\"text-xs sm:text-sm text-muted-foreground\">\n                      Stock: {product.stock}\n                    </span>\n                  </div>\n                  \n                  {product.sku && (\n                    <p className=\"text-xs sm:text-sm text-muted-foreground\">SKU: {product.sku}</p>\n                  )}\n                  \n                  {product.description && (\n                    <p className=\"text-xs sm:text-sm text-muted-foreground line-clamp-2\">\n                      {product.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(product)}\n                      className=\"flex-1 text-xs sm:text-sm\"\n                    >\n                      <Edit className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" className=\"text-destructive hover:text-destructive\">\n                          <Trash2 className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Delete Product</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            Are you sure you want to delete &quot;{product.name}&quot;? This action cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction onClick={() => handleDelete(product.id)}>\n                            Delete\n                          </AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":33380},"client/src/pages/QuickPOS.tsx":{"content":"import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { Product, Transaction, CartItem } from '@/lib/types';\nimport { useCart } from '@/hooks/useCart';\nimport { useDataSync } from '@/hooks/useDataSync';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { \n  Search, \n  ShoppingCart, \n  Minus, \n  Plus, \n  Trash2, \n  CreditCard, \n  DollarSign, \n  Keyboard,\n  Printer,\n  Calculator,\n  X,\n  Package,\n  ArrowLeft,\n  LogOut,\n  User,\n  Calendar,\n  Clock\n} from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { useLocation } from 'wouter';\nimport { useSettings } from '@/hooks/useSettings';\nimport { useAuth } from '@/hooks/useAuth';\nimport { thermalPrinter, ReceiptData } from '@/lib/thermalPrinter';\nimport PaymentDialog from '@/components/PaymentDialog';\n\nexport default function QuickPOS() {\n  const { company, employee } = useAuth();\n  const { \n    products, \n    customers, \n    saveTransaction, \n    saveCustomer, \n    updateCustomer,\n    updateProduct,\n    isLoading: isDataLoading \n  } = useDataSync();\n  \n  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card' | 'wallet'>('cash');\n  const [customerName, setCustomerName] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerGST, setCustomerGST] = useState('');\n  const [currentCustomer, setCurrentCustomer] = useState<any>(null);\n  const [isCustomerLoading, setIsCustomerLoading] = useState(false);\n  const [cashAmount, setCashAmount] = useState('');\n  const [cardTransactionId, setCardTransactionId] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showKeyboardShortcuts, setShowKeyboardShortcuts] = useState(false);\n  const [taxIncluded, setTaxIncluded] = useState(false);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  \n  // Add state for the quantity dialog\n  const [isQtyDialogOpen, setIsQtyDialogOpen] = useState(false);\n  const [qtyDialogProduct, setQtyDialogProduct] = useState<Product | null>(null);\n  const [qtyDialogQty, setQtyDialogQty] = useState('1');\n  const [qtyDialogError, setQtyDialogError] = useState('');\n  \n  // Add sub-unit logic for the quantity dialog\n  const [mainQty, setMainQty] = useState('');\n  const [subQty, setSubQty] = useState('');\n  \n  const cart = useCart();\n  const [, setLocation] = useLocation();\n  const searchRef = useRef<HTMLInputElement>(null);\n  const exitRequestedRef = useRef(false);\n  const [needsFullscreenPrompt, setNeedsFullscreenPrompt] = useState(false);\n  const { companySettings, printSettings } = useSettings();\n  const { logout } = useAuth();\n\n  // Category management\n  const [selectedCategory, setSelectedCategory] = useState('All');\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every second\n  useEffect(() => {\n    const interval = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Initialize filtered products when products change\n  useEffect(() => {\n    if (Array.isArray(products)) {\n      setFilteredProducts(products);\n    }\n  }, [products]);\n\n  // Fullscreen helper that falls back to a user prompt\n  const ensureFullscreen = useCallback(async () => {\n    if (!document.fullscreenEnabled) return;\n    if (document.fullscreenElement) return;\n    try {\n      await document.documentElement.requestFullscreen();\n      setNeedsFullscreenPrompt(false);\n    } catch (err) {\n      setNeedsFullscreenPrompt(true);\n    }\n  }, []);\n\n  // Function to determine if a unit is decimal-based\n  const DECIMAL_UNITS = ['KGS', 'GMS', 'LTR', 'MLT', 'TON', 'SQM', 'SQF', 'MTR', 'CMS', 'CCM', 'CBM'];\n  const isDecimalUnit = (unit: string) => DECIMAL_UNITS.includes((unit || '').toUpperCase());\n\n  // Quick add handler must be defined before effects that depend on it\n  const handleQuickAdd = useCallback((product: Product) => {\n    if (product.stock > 0) {\n      cart.addItem(product);\n      toast.success(`${product.name} added to cart`);\n    } else {\n      toast.error(`${product.name} is out of stock`);\n    }\n  }, [cart]);\n\n  // Handle product selection with quantity dialog\n  const handleProductSelect = useCallback((product: Product) => {\n    if (product.stock <= 0) {\n      toast.error(`${product.name} is out of stock`);\n      return;\n    }\n\n    if (product.unit && isDecimalUnit(product.unit)) {\n      setQtyDialogProduct(product);\n      setQtyDialogQty('1');\n      setMainQty('');\n      setSubQty('');\n      setQtyDialogError('');\n      setIsQtyDialogOpen(true);\n    } else {\n      handleQuickAdd(product);\n    }\n  }, [handleQuickAdd]);\n\n  // Handle quantity dialog confirmation\n  const handleQtyConfirm = useCallback(() => {\n    if (!qtyDialogProduct) return;\n\n    let finalQty = 1;\n    if (qtyDialogProduct.unit && isDecimalUnit(qtyDialogProduct.unit)) {\n      const main = parseFloat(mainQty) || 0;\n      const sub = parseFloat(subQty) || 0;\n      finalQty = main + (sub / 100);\n      \n      if (finalQty <= 0) {\n        setQtyDialogError('Please enter a valid quantity');\n        return;\n      }\n    } else {\n      finalQty = parseInt(qtyDialogQty) || 1;\n      if (finalQty <= 0) {\n        setQtyDialogError('Please enter a valid quantity');\n        return;\n      }\n    }\n\n    cart.addItem(qtyDialogProduct, finalQty);\n    toast.success(`${qtyDialogProduct.name} added to cart`);\n    setIsQtyDialogOpen(false);\n  }, [qtyDialogProduct, qtyDialogQty, mainQty, subQty, cart]);\n\n  // Customer search by phone\n  const handleCustomerPhoneChange = useCallback(async (phone: string) => {\n    setCustomerPhone(phone);\n    \n    if (phone.length >= 10 && /^\\d+$/.test(phone)) {\n      setIsCustomerLoading(true);\n      try {\n        // Search for existing customer by phone using customers from data sync\n        const existingCustomer = customers.find(c => c.phone === phone);\n        \n        if (existingCustomer) {\n          setCurrentCustomer(existingCustomer);\n          setCustomerName(existingCustomer.name || '');\n          setCustomerGST(existingCustomer.gst || '');\n          toast.success(`Customer found: ${existingCustomer.name}`);\n        } else {\n          setCurrentCustomer(null);\n          setCustomerName('');\n          setCustomerGST('');\n        }\n      } catch (error) {\n        console.error('Error searching for customer:', error);\n        toast.error('Error searching for customer');\n      } finally {\n        setIsCustomerLoading(false);\n      }\n    } else {\n      setCurrentCustomer(null);\n      setCustomerName('');\n      setCustomerGST('');\n    }\n  }, [customers]);\n\n  // Auto-create or update customer when transaction is completed\n  const handleCustomerSave = useCallback(async (phone: string, name: string, gst: string = '') => {\n    if (!phone || !name || !company?.id) return;\n\n    try {\n      // Use customers from data sync hook instead of calling getCustomers\n      const existingCustomer = customers.find(c => c.phone === phone);\n      \n      if (existingCustomer) {\n        // Update existing customer\n        const updatedCustomer = {\n          ...existingCustomer,\n          name: name,\n          gst: gst, // Use gst to match the Customer interface\n          visitCount: (existingCustomer.visitCount || 0) + 1,\n          lastVisit: new Date()\n        };\n        \n        await updateCustomer(existingCustomer.id, updatedCustomer);\n        setCurrentCustomer(updatedCustomer);\n        toast.success('Customer updated successfully');\n      } else {\n        // Create new customer\n        const newCustomer = {\n          id: `customer_${Date.now()}`,\n          companyId: company.id,\n          name: name,\n          phone: phone,\n          gst: gst, // Use gst to match the Customer interface\n          email: '',\n          address: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'India',\n          isActive: true,\n          visitCount: 1,\n          loyaltyPoints: 0,\n          totalSpent: 0,\n          lastVisit: new Date(),\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        \n        await saveCustomer(newCustomer);\n        setCurrentCustomer(newCustomer);\n        toast.success('New customer created successfully');\n      }\n    } catch (error) {\n      console.error('Error saving customer:', error);\n      toast.error('Error saving customer details');\n    }\n  }, [company?.id, customers, saveCustomer, updateCustomer]);\n\n  // Initialize data and fullscreen\n  useEffect(() => {\n    ensureFullscreen();\n    \n    const handleFullscreenChange = () => {\n      if (!document.fullscreenElement && !exitRequestedRef.current) {\n        ensureFullscreen();\n      }\n    };\n    \n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => document.removeEventListener('fullscreenchange', handleFullscreenChange);\n  }, [ensureFullscreen]);\n\n  // Load products\n  useEffect(() => {\n    // No need to call initializeSampleData here as it's handled by useDataSync\n  }, []);\n\n  // Filter products based on search and category\n  useEffect(() => {\n    let filtered = products;\n    \n    // Filter by category\n    if (selectedCategory !== 'All') {\n      filtered = filtered.filter(product => product.category === selectedCategory);\n    }\n    \n    // Filter by search query\n    if (searchQuery.trim()) {\n      const query = searchQuery.toLowerCase();\n      filtered = filtered.filter(product => \n        product.name.toLowerCase().includes(query) ||\n        product.sku?.toLowerCase().includes(query) ||\n        product.barcode?.toLowerCase().includes(query)\n      );\n    }\n    \n    setFilteredProducts(filtered);\n  }, [products, searchQuery, selectedCategory]);\n\n  // Focus search on mount and after transaction\n  useEffect(() => {\n    if (searchRef.current) {\n      searchRef.current.focus();\n    }\n  }, []);\n\n  // Handle keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        exitRequestedRef.current = true;\n        navigate('/dashboard');\n      }\n      // Add Ctrl+D shortcut for dashboard\n      if (e.ctrlKey && e.key === 'd') {\n        e.preventDefault();\n        navigate('/dashboard');\n      }\n    };\n    \n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [navigate]);\n\n  // Handle transaction completion\n  const handleTransactionComplete = useCallback(async (transaction: Transaction) => {\n    try {\n      console.log('Saving transaction:', transaction);\n      \n      // Validate transaction data before saving\n      if (!transaction.companyId) {\n        throw new Error('Company ID is required');\n      }\n      if (!transaction.items || transaction.items.length === 0) {\n        throw new Error('Transaction must have at least one item');\n      }\n      if (transaction.total <= 0) {\n        throw new Error('Transaction total must be greater than 0');\n      }\n      \n      const savedTransaction = await saveTransaction(transaction);\n      console.log('Transaction saved successfully:', savedTransaction);\n      \n      // Auto-save/update customer information and link transaction to customer\n      if (customerPhone && customerName) {\n        await handleCustomerSave(customerPhone, customerName, customerGST);\n        \n        // Update customer's transaction history and spending\n        if (currentCustomer) {\n          const updatedCustomer = {\n            ...currentCustomer,\n            totalSpent: (currentCustomer.totalSpent || 0) + transaction.total,\n            visitCount: (currentCustomer.visitCount || 0) + 1,\n            lastVisit: new Date()\n          };\n          await updateCustomer(currentCustomer.id, updatedCustomer);\n        }\n      }\n      \n      // Prepare receipt data for thermal printer\n      const receiptData: ReceiptData = {\n        companyName: companySettings?.name || 'ACE Business',\n        companyAddress: companySettings?.address || '',\n        companyPhone: companySettings?.phone || '',\n        companyTaxId: companySettings?.taxId || '',\n        receiptNumber: transaction.id,\n        date: new Date(transaction.timestamp).toLocaleString(),\n        cashierName: employee?.name || 'Unknown',\n        customerName: transaction.customerName || 'Walk-in Customer',\n        items: transaction.items.map(item => ({\n          name: item.name,\n          quantity: item.quantity,\n          price: item.price,\n          total: item.total\n        })),\n        subtotal: transaction.subtotal,\n        tax: transaction.tax,\n        total: transaction.total,\n        paymentMethod: transaction.paymentMethod,\n        paymentDetails: transaction.paymentDetails\n      };\n\n      // Print receipt using thermal printer service\n      const printSuccess = await thermalPrinter.printReceipt(receiptData);\n      \n      if (printSuccess) {\n        toast.success('Transaction completed and receipt printed successfully!');\n      } else {\n        toast.success('Transaction completed successfully!');\n        toast.warning('Receipt printing failed - check printer connection');\n      }\n      \n      // Dispatch event to notify other components\n      window.dispatchEvent(new CustomEvent('transactionUpdated'));\n      \n      // Clear cart and form\n      cart.clearCart();\n      setCustomerName('');\n      setCustomerPhone('');\n      setCustomerGST('');\n      setCurrentCustomer(null);\n      setCashAmount('');\n      setCardTransactionId('');\n      \n      // Re-request fullscreen and focus search\n      setTimeout(() => {\n        ensureFullscreen();\n        if (searchRef.current) {\n          searchRef.current.focus();\n        }\n      }, 100);\n      \n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      toast.error(`Failed to save transaction: ${errorMessage}`);\n      \n      // Log additional debugging information\n      console.log('Transaction data that failed to save:', {\n        id: transaction.id,\n        companyId: transaction.companyId,\n        itemsCount: transaction.items?.length,\n        total: transaction.total,\n        hasEmployee: !!transaction.employeeId,\n        hasCustomer: !!transaction.customerName\n      });\n    }\n  }, [cart, ensureFullscreen, companySettings, employee, customerPhone, customerName, customerGST, handleCustomerSave, currentCustomer, saveTransaction]);\n\n\n\n  // Calculate totals\n  const subtotal = useMemo(() => {\n    return cart.items.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);\n  }, [cart.items]);\n\n  const tax = useMemo(() => {\n    return subtotal * 0.18; // 18% GST\n  }, [subtotal]);\n\n  const total = useMemo(() => {\n    return taxIncluded ? subtotal : subtotal + tax;\n  }, [subtotal, tax, taxIncluded]);\n\n  // Get unique categories\n  const categories = useMemo(() => {\n    const cats = ['All', ...new Set(products.map(p => p.category).filter(Boolean))];\n    return cats;\n  }, [products]);\n\n  // Handle payment dialog open\n  const handlePaymentClick = useCallback(() => {\n    if (cart.items.length === 0) {\n      toast.error('Cart is empty');\n      return;\n    }\n\n    if (!customerName.trim()) {\n      toast.error('Please enter customer name');\n      return;\n    }\n\n    setIsPaymentDialogOpen(true);\n  }, [cart.items.length, customerName]);\n\n  // Handle payment completion from dialog\n  const handlePaymentComplete = useCallback(async (paymentData: { parts: { method: 'cash' | 'card' | 'wallet'; amount: number; txnId?: string; lastDigits?: string }[] }) => {\n    setIsProcessing(true);\n    setIsPaymentDialogOpen(false);\n\n    try {\n      // Create or update customer\n      let customer = customers.find(c => c.phone === customerPhone);\n\n      if (!customer && customerPhone) {\n        customer = await saveCustomer({\n          id: Date.now().toString(),\n          name: customerName,\n          phone: customerPhone,\n          email: '',\n          address: '',\n          companyId: company?.id || '',\n          gst: customerGST,\n          loyaltyPoints: 0,\n          totalSpent: 0,\n          visits: 0,\n          visitCount: 0,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        });\n      } else if (customer) {\n        await updateCustomer(customer.id, {\n          ...customer,\n          name: customerName,\n          gst: customerGST,\n          totalSpent: (customer.totalSpent || 0) + total,\n          visits: (customer.visits || 0) + 1,\n          visitCount: (customer.visitCount || 0) + 1,\n          updatedAt: new Date()\n        });\n      }\n\n      // Update product stock\n      for (const item of cart.items) {\n        const product = products.find(p => p.id === item.product.id);\n        if (product) {\n          await updateProduct(product.id, {\n            ...product,\n            stock: Math.max(0, product.stock - item.quantity)\n          });\n        }\n      }\n\n      // Build split payment details\n      const parts = paymentData.parts || [];\n      const cashAmount = parts.filter(p => p.method === 'cash').reduce((s, p) => s + (p.amount || 0), 0);\n      const cardAmount = parts.filter(p => p.method === 'card').reduce((s, p) => s + (p.amount || 0), 0);\n      const walletAmount = parts.filter(p => p.method === 'wallet').reduce((s, p) => s + (p.amount || 0), 0);\n\n      // Create transaction\n      const transaction: Transaction = {\n        id: Date.now().toString(),\n        items: cart.items.map(item => ({\n          productId: item.product.id,\n          name: item.product.name,\n          price: item.product.price,\n          quantity: item.quantity,\n          total: item.product.price * item.quantity,\n          mrp: item.product.mrp || 0\n        })),\n        subtotal,\n        tax,\n        discount: 0,\n        total,\n        paymentMethod: cashAmount > 0 && (cardAmount > 0 || walletAmount > 0) ? 'split' : (parts[0]?.method || 'cash'),\n        status: 'completed',\n        customerName,\n        timestamp: new Date(),\n        companyId: company?.id || '',\n        employeeId: employee?.id || '',\n        employeeName: employee?.name || '',\n        notes: '',\n        receipt: '',\n        paymentDetails: {\n          cashAmount,\n          cardAmount,\n          walletAmount,\n          parts: parts.map(p => ({ method: p.method, amount: p.amount, txnId: p.txnId, lastDigits: p.lastDigits }))\n        }\n      };\n\n      await handleTransactionComplete(transaction);\n\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast.error('Payment failed');\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [cart, customerName, customerPhone, customerGST, total, products, company, employee, handleTransactionComplete, saveCustomer, updateCustomer, customers]);\n\n  // Handle logout\n  const handleLogout = useCallback(() => {\n    logout();\n    navigate('/login');\n  }, [logout, navigate]);\n\n  return (\n    <div className=\"h-screen flex flex-col bg-gray-50\">\n      {/* Fullscreen Prompt Overlay */}\n      {needsFullscreenPrompt && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-8 rounded-xl text-center shadow-2xl max-w-md w-full mx-4\">\n            <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-lg mb-6\">\n              <h3 className=\"text-xl font-bold\">Fullscreen Required</h3>\n            </div>\n            <p className=\"text-gray-600 mb-6 text-lg\">Please press F11 or click the fullscreen button to continue with POS operations.</p>\n            <p className=\"text-gray-500 mb-4 text-sm\">💡 Tip: Press ESC or Ctrl+D anytime to return to Dashboard</p>\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              <Button \n                onClick={ensureFullscreen}\n                className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold py-3 px-6 shadow-lg hover:shadow-xl transition-all duration-200\"\n              >\n                Enter Fullscreen\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => navigate('/dashboard')}\n                className=\"border-2 border-gray-300 hover:border-blue-500 hover:bg-blue-50 text-gray-700 font-semibold py-3 px-6 transition-all duration-200\"\n              >\n                Go to Dashboard\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Header - Streamlined with Logo, Search, and Session Info */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white px-6 py-4 flex items-center justify-between shadow-lg\">\n        {/* Logo */}\n        <div className=\"flex items-center\">\n          <div className=\"bg-white bg-opacity-20 rounded-lg p-2 mr-3\">\n            <Package className=\"h-6 w-6 text-white\" />\n          </div>\n          <h1 className=\"text-2xl font-bold\">ACE-POS</h1>\n        </div>\n\n        {/* Universal Search Bar */}\n        <div className=\"flex-1 max-w-2xl mx-8\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              ref={searchRef}\n              type=\"text\"\n              placeholder=\"Search by Item Name, Code, or Tag...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 pr-4 py-3 text-lg bg-white text-gray-800 border-0 rounded-lg shadow-sm focus:ring-2 focus:ring-white focus:ring-opacity-50\"\n            />\n          </div>\n        </div>\n\n        {/* Session Info */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2 text-sm bg-white bg-opacity-20 rounded-lg px-3 py-1\">\n            <User className=\"h-4 w-4\" />\n            <span className=\"font-medium\">{employee?.name || 'Cashier'}</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm bg-white bg-opacity-20 rounded-lg px-3 py-1\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{currentTime.toLocaleDateString()}</span>\n          </div>\n          <div className=\"flex items-center space-x-2 text-sm bg-white bg-opacity-20 rounded-lg px-3 py-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>{currentTime.toLocaleTimeString()}</span>\n          </div>\n          <div className=\"flex items-center space-x-2 bg-white bg-opacity-20 rounded-lg px-3 py-1\">\n            <Label htmlFor=\"tax-included\" className=\"text-sm font-medium cursor-pointer\">Tax Inc.</Label>\n            <Switch\n              id=\"tax-included\"\n              checked={taxIncluded}\n              onCheckedChange={setTaxIncluded}\n              className=\"data-[state=checked]:bg-white data-[state=unchecked]:bg-white bg-opacity-30\"\n            />\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => navigate('/dashboard')}\n            className=\"flex items-center space-x-1 bg-white text-blue-600 hover:bg-gray-100 border-white\"\n            title=\"Go to Dashboard (ESC or Ctrl+D)\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n            <span>Dashboard</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"flex items-center space-x-1 bg-white text-red-600 hover:bg-red-50 border-white\"\n          >\n            <LogOut className=\"h-4 w-4\" />\n            <span>Logout</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Category Tabs - Horizontal */}\n      <div className=\"bg-white border-b border-gray-200 px-6 py-3 shadow-sm\">\n        <div className=\"flex space-x-3 overflow-x-auto\">\n          {categories.map((category) => (\n            <Button\n              key={category}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(category)}\n              className={`whitespace-nowrap font-medium transition-all duration-200 ${\n                selectedCategory === category \n                  ? 'bg-blue-600 text-white shadow-md' \n                  : 'hover:bg-blue-50 hover:text-blue-600 border-blue-200'\n              }`}\n            >\n              {category}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Content - Two Panel Layout */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Left Panel - Product Selection (70%) */}\n        <div className=\"flex-1 bg-white p-4 overflow-y-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4\">\n            {filteredProducts.map((product) => (\n              <Card\n                key={product.id}\n                className=\"cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-400 hover:scale-105\"\n                onClick={() => handleProductSelect(product)}\n              >\n                <CardContent className=\"p-3 text-center\">\n                  <div className=\"h-20 bg-gradient-to-br from-blue-50 to-gray-100 rounded-lg mb-3 flex items-center justify-center\">\n                    <Package className=\"h-10 w-10 text-blue-500\" />\n                  </div>\n                  <h3 className=\"font-semibold text-sm mb-1 line-clamp-2 text-gray-800\">{product.name}</h3>\n                  <p className=\"text-xs text-gray-500 mb-2\">{product.sku || product.barcode}</p>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-lg font-bold text-green-600\">₹{product.price.toFixed(2)}</span>\n                    <Badge variant={product.stock > 0 ? \"default\" : \"destructive\"} className=\"text-xs\">\n                      {product.stock > 0 ? `${product.stock}` : 'Out'}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          \n          {filteredProducts.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Package className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n              <p>No products found</p>\n            </div>\n          )}\n        </div>\n\n        {/* Right Panel - Live Bill/Cart (30%) */}\n        <div className=\"w-96 bg-gray-50 border-l border-gray-200 flex flex-col\">\n          {/* Customer Info */}\n          <div className=\"bg-white p-4 border-b border-gray-200\">\n            <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n              Customer Information\n              {isCustomerLoading && (\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n              )}\n              {currentCustomer && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  Existing Customer\n                </Badge>\n              )}\n            </h3>\n            <div className=\"space-y-3\">\n              <Input\n                placeholder=\"Customer Name\"\n                value={customerName}\n                onChange={(e) => setCustomerName(e.target.value)}\n                className=\"text-sm\"\n                disabled={isCustomerLoading}\n              />\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Mobile Number\"\n                  value={customerPhone}\n                  onChange={(e) => handleCustomerPhoneChange(e.target.value)}\n                  className=\"text-sm\"\n                  disabled={isCustomerLoading}\n                />\n                {currentCustomer && (\n                  <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                    <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700 border-green-200\">\n                      Found\n                    </Badge>\n                  </div>\n                )}\n              </div>\n              <Input\n                placeholder=\"GST Number (Optional)\"\n                value={customerGST}\n                onChange={(e) => setCustomerGST(e.target.value)}\n                className=\"text-sm\"\n                disabled={isCustomerLoading}\n              />\n              {currentCustomer && (\n                <div className=\"text-xs text-gray-600 bg-blue-50 p-2 rounded border border-blue-200\">\n                  <div><strong>Visit Count:</strong> {currentCustomer.visitCount || 0}</div>\n                  <div><strong>Last Visit:</strong> {currentCustomer.lastVisit ? new Date(currentCustomer.lastVisit).toLocaleDateString() : 'Never'}</div>\n                  {currentCustomer.loyaltyPoints > 0 && (\n                    <div><strong>Loyalty Points:</strong> {currentCustomer.loyaltyPoints}</div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Cart Items */}\n          <div className=\"flex-1 overflow-y-auto p-4\">\n            <h3 className=\"font-semibold mb-3\">Cart Items</h3>\n            {cart.items.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                <p>No items in cart</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {cart.items.map((item, index) => (\n                  <div key={index} className=\"bg-white p-3 rounded-lg border shadow-sm hover:shadow-md transition-shadow\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-sm text-gray-800\">{item.product.name}</h4>\n                        <p className=\"text-xs text-gray-500\">₹{item.product.price.toFixed(2)} each</p>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => cart.removeItem(item.product.id)}\n                        className=\"h-6 w-6 p-0 text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <div className=\"flex items-center space-x-2 bg-gray-50 rounded-lg px-2 py-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => cart.updateQuantity(item.product.id, Math.max(0, item.quantity - 1))}\n                          className=\"h-6 w-6 p-0 hover:bg-red-50 hover:text-red-600\"\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"text-sm font-bold w-8 text-center text-gray-800\">{item.quantity}</span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => cart.updateQuantity(item.product.id, item.quantity + 1)}\n                          className=\"h-6 w-6 p-0 hover:bg-green-50 hover:text-green-600\"\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <span className=\"font-bold text-green-600\">₹{(item.product.price * item.quantity).toFixed(2)}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Totals and Payment */}\n          <div className=\"bg-white p-4 border-t border-gray-200\">\n            <div className=\"space-y-3 mb-4\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Subtotal:</span>\n                <span className=\"font-medium\">₹{subtotal.toFixed(2)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Tax (18%):</span>\n                <span className=\"font-medium\">₹{tax.toFixed(2)}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between text-xl font-bold text-green-600\">\n                <span>TOTAL:</span>\n                <span>₹{total.toFixed(2)}</span>\n              </div>\n            </div>\n\n            {/* Payment Method */}\n            <div className=\"mb-4\">\n              <Label className=\"text-sm font-medium mb-3 block text-gray-700\">Payment Method</Label>\n              <RadioGroup value={paymentMethod} onValueChange={(value: 'cash' | 'card' | 'wallet') => setPaymentMethod(value)}>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"flex items-center space-x-2 p-2 rounded-lg border-2 hover:border-blue-300 transition-colors\">\n                    <RadioGroupItem value=\"cash\" id=\"cash\" />\n                    <Label htmlFor=\"cash\" className=\"text-sm font-medium cursor-pointer\">Cash</Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2 p-2 rounded-lg border-2 hover:border-blue-300 transition-colors\">\n                    <RadioGroupItem value=\"card\" id=\"card\" />\n                    <Label htmlFor=\"card\" className=\"text-sm font-medium cursor-pointer\">Card</Label>\n                  </div>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Pay Button */}\n            <Button\n              onClick={handlePaymentClick}\n              disabled={cart.items.length === 0 || isProcessing}\n              className=\"w-full py-4 text-lg font-bold bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl transition-all duration-200\"\n            >\n              {isProcessing ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                  <span>Processing...</span>\n                </div>\n              ) : (\n                `PAY ₹${total.toFixed(2)}`\n              )}\n            </Button>\n\n\n          </div>\n        </div>\n      </div>\n\n      {/* Quantity Dialog */}\n      <Dialog open={isQtyDialogOpen} onOpenChange={setIsQtyDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Enter Quantity</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {qtyDialogProduct && (\n              <div className=\"text-center\">\n                <h3 className=\"font-semibold\">{qtyDialogProduct.name}</h3>\n                <p className=\"text-sm text-gray-500\">Unit: {qtyDialogProduct.unit}</p>\n              </div>\n            )}\n            \n            {qtyDialogProduct?.unit && isDecimalUnit(qtyDialogProduct.unit) ? (\n              <div className=\"space-y-3\">\n                <div>\n                  <Label>Main Unit</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    value={mainQty}\n                    onChange={(e) => setMainQty(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label>Sub Unit (cents)</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0\"\n                    value={subQty}\n                    onChange={(e) => setSubQty(e.target.value)}\n                  />\n                </div>\n              </div>\n            ) : (\n              <div>\n                <Label>Quantity</Label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"1\"\n                  value={qtyDialogQty}\n                  onChange={(e) => setQtyDialogQty(e.target.value)}\n                />\n              </div>\n            )}\n            \n            {qtyDialogError && (\n              <p className=\"text-red-500 text-sm\">{qtyDialogError}</p>\n            )}\n            \n            <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" onClick={() => setIsQtyDialogOpen(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={handleQtyConfirm} className=\"flex-1\">\n                Add to Cart\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n\n\n      {/* Payment Dialog */}\n      <PaymentDialog\n        isOpen={isPaymentDialogOpen}\n        onClose={() => setIsPaymentDialogOpen(false)}\n        onPaymentComplete={handlePaymentComplete}\n        billAmount={total}\n        customerName={customerName}\n      />\n    </div>\n  );\n}","size_bytes":37489},"client/src/pages/Reports.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { Transaction, Product, Employee, Customer } from '@/lib/types';\nimport { getTransactions, getProducts, getEmployees, getCustomers } from '@/lib/storage';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\nimport { TrendingUp, DollarSign, Package, Users, Calendar, Download, FileSpreadsheet } from 'lucide-react';\nimport { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth, isWithinInterval, eachDayOfInterval, getHours } from 'date-fns';\nimport * as XLSX from 'xlsx';\nimport { printDriver } from '@/lib/printDrivers';\n\nexport default function Reports() {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [products, setProducts] = useState<Product[]>([]);\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [customers, setCustomers] = useState<Customer[]>([]);\n  const [dateFilter, setDateFilter] = useState<'today' | 'week' | 'month' | 'all'>('month');\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const transactionsData = await getTransactions();\n        const productsData = await getProducts();\n        const employeesData = await getEmployees();\n        const customersData = await getCustomers();\n        \n        setTransactions(Array.isArray(transactionsData) ? transactionsData : []);\n        setProducts(Array.isArray(productsData) ? productsData : []);\n        setEmployees(Array.isArray(employeesData) ? employeesData : []);\n        setCustomers(Array.isArray(customersData) ? customersData : []);\n      } catch (error) {\n        console.error('Error loading reports data:', error);\n        setTransactions([]);\n        setProducts([]);\n        setEmployees([]);\n        setCustomers([]);\n      }\n    };\n    \n    loadData();\n  }, []);\n\n  const filteredTransactions = useMemo(() => {\n    if (dateFilter === 'all') return Array.isArray(transactions) ? transactions : [];\n\n    const now = new Date();\n    let startDate: Date;\n    let endDate: Date;\n\n    switch (dateFilter) {\n      case 'today':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n        endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n        break;\n      case 'week':\n        startDate = startOfWeek(now);\n        endDate = endOfWeek(now);\n        break;\n      case 'month':\n        startDate = startOfMonth(now);\n        endDate = endOfMonth(now);\n        break;\n      default:\n        return Array.isArray(transactions) ? transactions : [];\n    }\n\n    return Array.isArray(transactions) ? transactions.filter(transaction => {\n      const transactionDate = new Date(transaction.timestamp);\n      return isWithinInterval(transactionDate, { start: startDate, end: endDate });\n    }) : [];\n  }, [transactions, dateFilter]);\n\n  // Sales Overview\n  const salesOverview = useMemo(() => {\n    if (!Array.isArray(filteredTransactions) || filteredTransactions.length === 0) {\n      return { totalSales: 0, totalTransactions: 0, averageTransaction: 0, totalProfit: 0 };\n    }\n\n    try {\n      const totalSales = filteredTransactions.reduce((sum, t) => sum + (t.total || 0), 0);\n      const totalTransactions = filteredTransactions.length;\n      const averageTransaction = totalTransactions > 0 ? totalSales / totalTransactions : 0;\n      \n      const totalCost = filteredTransactions.reduce((sum, transaction) => {\n        if (!Array.isArray(transaction.items)) return sum;\n        return sum + (transaction.items.reduce((itemSum, item) => {\n          const product = Array.isArray(products) ? products.find(p => p.id === item.productId) : null;\n          return itemSum + ((product?.cost || 0) * (item.quantity || 0));\n        }, 0) || 0);\n      }, 0);\n      \n      const totalProfit = totalSales - totalCost;\n\n      return { totalSales, totalTransactions, averageTransaction, totalProfit };\n    } catch (error) {\n      console.error('Error calculating sales overview:', error);\n      return { totalSales: 0, totalTransactions: 0, averageTransaction: 0, totalProfit: 0 };\n    }\n  }, [filteredTransactions, products]);\n\n  // Item-wise Sales\n  const itemWiseSales = useMemo(() => {\n    if (!Array.isArray(filteredTransactions)) return [];\n    \n    const itemMap = new Map<string, { product: Product; quantity: number; revenue: number; profit: number }>();\n    \n    try {\n      filteredTransactions.forEach(transaction => {\n        if (!Array.isArray(transaction.items)) return;\n        \n        transaction.items.forEach(item => {\n          const product = Array.isArray(products) ? products.find(p => p.id === item.productId) : null;\n          if (!product) return;\n\n          const key = product.id;\n          const existing = itemMap.get(key);\n          const revenue = (item.price || 0) * (item.quantity || 0);\n          const cost = (product.cost || 0) * (item.quantity || 0);\n          const profit = revenue - cost;\n          \n          if (existing) {\n            existing.quantity += (item.quantity || 0);\n            existing.revenue += revenue;\n            existing.profit += profit;\n          } else {\n            itemMap.set(key, {\n              product,\n              quantity: item.quantity || 0,\n              revenue,\n              profit\n            });\n          }\n        });\n      });\n      \n      return Array.from(itemMap.values()).sort((a, b) => b.revenue - a.revenue);\n    } catch (error) {\n      console.error('Error calculating item-wise sales:', error);\n      return [];\n    }\n  }, [filteredTransactions, products]);\n\n  // Employee-wise Sales\n  const employeeWiseSales = useMemo(() => {\n    if (!Array.isArray(filteredTransactions)) return [];\n    \n    const employeeMap = new Map<string, { name: string; transactions: number; revenue: number }>();\n    \n    try {\n      filteredTransactions.forEach(transaction => {\n        const employeeName = transaction.employeeName || 'System';\n        const existing = employeeMap.get(employeeName);\n        \n        if (existing) {\n          existing.transactions += 1;\n          existing.revenue += (transaction.total || 0);\n        } else {\n          employeeMap.set(employeeName, {\n            name: employeeName,\n            transactions: 1,\n            revenue: transaction.total || 0\n          });\n        }\n      });\n      \n      return Array.from(employeeMap.values()).sort((a, b) => b.revenue - a.revenue);\n    } catch (error) {\n      console.error('Error calculating employee-wise sales:', error);\n      return [];\n    }\n  }, [filteredTransactions]);\n\n  // Daily Sales (for charts)\n  const dailySales = useMemo(() => {\n    if (!Array.isArray(filteredTransactions)) return [];\n    \n    try {\n      if (dateFilter === 'today') {\n        // Hourly breakdown for today\n        const hourlyData = Array.from({ length: 24 }, (_, hour) => ({\n          time: `${hour}:00`,\n          sales: 0,\n          transactions: 0\n        }));\n        \n        filteredTransactions.forEach(transaction => {\n          const hour = getHours(new Date(transaction.timestamp));\n          hourlyData[hour].sales += (transaction.total || 0);\n          hourlyData[hour].transactions += 1;\n        });\n        \n        return hourlyData.filter(data => data.sales > 0 || data.transactions > 0);\n      } else {\n        // Daily breakdown\n        const now = new Date();\n        const startDate = dateFilter === 'week' ? startOfWeek(now) : \n                         dateFilter === 'month' ? startOfMonth(now) : \n                         new Date(now.getFullYear(), 0, 1);\n        const endDate = now;\n        \n        const dateRange = eachDayOfInterval({ start: startDate, end: endDate });\n        const dailyData = dateRange.map(date => ({\n          date: format(date, 'MMM dd'),\n          sales: 0,\n          transactions: 0\n        }));\n        \n        filteredTransactions.forEach(transaction => {\n          const transactionDate = new Date(transaction.timestamp);\n          const dayIndex = dateRange.findIndex(date => \n            format(date, 'yyyy-MM-dd') === format(transactionDate, 'yyyy-MM-dd')\n          );\n          \n          if (dayIndex !== -1) {\n            dailyData[dayIndex].sales += (transaction.total || 0);\n            dailyData[dayIndex].transactions += 1;\n          }\n        });\n        \n        return dailyData.filter(data => data.sales > 0 || data.transactions > 0);\n      }\n    } catch (error) {\n      console.error('Error calculating daily sales:', error);\n      return [];\n    }\n  }, [filteredTransactions, dateFilter]);\n\n  // Payment method breakdown\n  const paymentBreakdown = useMemo(() => {\n    const breakdown = { cash: 0, card: 0 };\n    filteredTransactions.forEach(transaction => {\n      breakdown[transaction.paymentMethod] += transaction.total;\n    });\n    \n    return [\n      { name: 'Cash', value: breakdown.cash, color: '#8884d8' },\n      { name: 'Card', value: breakdown.card, color: '#82ca9d' }\n    ].filter(item => item.value > 0);\n  }, [filteredTransactions]);\n\n  const exportToExcel = () => {\n    const workbook = XLSX.utils.book_new();\n    \n    // Overview Sheet\n    const overviewData = [\n      ['Sales Report Overview'],\n      ['Generated:', format(new Date(), 'dd/MM/yyyy HH:mm:ss')],\n      ['Period:', dateFilter.toUpperCase()],\n      [''],\n      ['Metric', 'Value'],\n      ['Total Sales', `₹${salesOverview.totalSales.toFixed(2)}`],\n      ['Total Transactions', salesOverview.totalTransactions.toString()],\n      ['Average Transaction', `₹${salesOverview.averageTransaction.toFixed(2)}`],\n      ['Total Profit', `₹${salesOverview.totalProfit.toFixed(2)}`],\n      [''],\n      ['Top Products', 'Quantity Sold', 'Revenue', 'Profit'],\n      ...itemWiseSales.slice(0, 10).map(item => [\n        item.product.name,\n        item.quantity.toString(),\n        `₹${item.revenue.toFixed(2)}`,\n        `₹${item.profit.toFixed(2)}`\n      ])\n    ];\n    const overviewSheet = XLSX.utils.aoa_to_sheet(overviewData);\n    XLSX.utils.book_append_sheet(workbook, overviewSheet, 'Overview');\n    \n    // All Transactions Sheet\n    const transactionsData = [\n      ['Transaction ID', 'Date', 'Time', 'Customer', 'Employee', 'Items Count', 'Subtotal', 'Tax', 'Total', 'Payment Method', 'Status']\n    ];\n    filteredTransactions.forEach(transaction => {\n      const employee = employees.find(e => e.id === transaction.employeeId);\n      transactionsData.push([\n        transaction.id,\n        format(new Date(transaction.timestamp), 'dd/MM/yyyy'),\n        format(new Date(transaction.timestamp), 'HH:mm'),\n        transaction.customerName || 'Walk-in Customer',\n        employee?.name || 'Unknown',\n        transaction.items.length.toString(),\n        `₹${transaction.subtotal.toFixed(2)}`,\n        `₹${transaction.tax.toFixed(2)}`,\n        `₹${transaction.total.toFixed(2)}`,\n        transaction.paymentMethod,\n        transaction.status\n      ]);\n    });\n    const transactionsSheet = XLSX.utils.aoa_to_sheet(transactionsData);\n    XLSX.utils.book_append_sheet(workbook, transactionsSheet, 'All Transactions');\n    \n    // Product-wise Sales Sheet\n    const itemsData = [\n      ['Product Name', 'SKU', 'Category', 'Quantity Sold', 'Unit Price', 'Revenue', 'Cost', 'Profit', 'Profit Margin %']\n    ];\n    itemWiseSales.forEach(item => {\n      const totalCost = item.quantity * item.product.cost;\n      itemsData.push([\n        item.product.name,\n        item.product.sku,\n        item.product.category,\n        item.quantity.toString(),\n        `₹${item.product.price.toFixed(2)}`,\n        `₹${item.revenue.toFixed(2)}`,\n        `₹${totalCost.toFixed(2)}`,\n        `₹${item.profit.toFixed(2)}`,\n        `${((item.profit / item.revenue) * 100).toFixed(2)}%`\n      ]);\n    });\n    const itemsSheet = XLSX.utils.aoa_to_sheet(itemsData);\n    XLSX.utils.book_append_sheet(workbook, itemsSheet, 'Product Sales');\n    \n    // Customer-wise Sales Sheet\n    const customerSalesData = [\n      ['Customer Name', 'Email', 'Phone', 'Total Purchases', 'Total Amount', 'Average Order', 'Last Purchase', 'Loyalty Points']\n    ];\n    \n    const customerSales = customers.map(customer => {\n      const customerTransactions = filteredTransactions.filter(t => t.customerId === customer.id);\n      const totalAmount = customerTransactions.reduce((sum, t) => sum + t.total, 0);\n      const lastPurchase = customerTransactions.length > 0 \n        ? customerTransactions.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())[0].timestamp\n        : null;\n      \n      return {\n        customer,\n        transactions: customerTransactions.length,\n        totalAmount,\n        averageOrder: customerTransactions.length > 0 ? totalAmount / customerTransactions.length : 0,\n        lastPurchase\n      };\n    }).filter(cs => cs.transactions > 0)\n      .sort((a, b) => b.totalAmount - a.totalAmount);\n\n    customerSales.forEach(cs => {\n      customerSalesData.push([\n        cs.customer.name,\n        cs.customer.email,\n        cs.customer.phone,\n        cs.transactions.toString(),\n        `₹${cs.totalAmount.toFixed(2)}`,\n        `₹${cs.averageOrder.toFixed(2)}`,\n        cs.lastPurchase ? format(cs.lastPurchase, 'dd/MM/yyyy') : 'N/A',\n        cs.customer.loyaltyPoints?.toString() || '0'\n      ]);\n    });\n    const customerSheet = XLSX.utils.aoa_to_sheet(customerSalesData);\n    XLSX.utils.book_append_sheet(workbook, customerSheet, 'Customer Sales');\n    \n    // Employee Performance Sheet\n    const employeeData = [\n      ['Employee Name', 'Role', 'Transactions', 'Total Revenue', 'Average Transaction', 'Items Sold', 'Commission Rate']\n    ];\n    employeeWiseSales.forEach(employeePerf => {\n      const employee = employees.find(e => e.name === employeePerf.name);\n      const employeeTransactions = filteredTransactions.filter(t => t.employeeId === employee?.id);\n      const itemsSold = employeeTransactions.reduce((sum, t) => \n        sum + t.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0);\n      \n      employeeData.push([\n        employeePerf.name,\n        employee?.role || 'Unknown',\n        employeePerf.transactions.toString(),\n        `₹${employeePerf.revenue.toFixed(2)}`,\n        `₹${(employeePerf.revenue / employeePerf.transactions).toFixed(2)}`,\n        itemsSold.toString(),\n        `₹${employee?.hourlyRate?.toFixed(2) || '0.00'}/hr`\n      ]);\n    });\n    const employeeSheet = XLSX.utils.aoa_to_sheet(employeeData);\n    XLSX.utils.book_append_sheet(workbook, employeeSheet, 'Employee Performance');\n    \n    // Daily Sales Sheet\n    const salesData = [\n      dateFilter === 'today' ? ['Time', 'Sales', 'Transactions', 'Items Sold'] : ['Date', 'Sales', 'Transactions', 'Items Sold']\n    ];\n    dailySales.forEach(sale => {\n      const periodTransactions = dateFilter === 'today' \n        ? filteredTransactions.filter(t => format(t.timestamp, 'HH:mm') === sale.time)\n        : filteredTransactions.filter(t => format(t.timestamp, 'dd/MM') === sale.date);\n      \n      const itemsSold = periodTransactions.reduce((sum, t) => \n        sum + t.items.reduce((itemSum, item) => itemSum + item.quantity, 0), 0);\n      \n      salesData.push([\n        dateFilter === 'today' ? sale.time : sale.date,\n        `₹${sale.sales.toFixed(2)}`,\n        sale.transactions.toString(),\n        itemsSold.toString()\n      ]);\n    });\n    const salesSheet = XLSX.utils.aoa_to_sheet(salesData);\n    XLSX.utils.book_append_sheet(workbook, salesSheet, 'Daily Sales');\n    \n    // Save the file\n    XLSX.writeFile(workbook, `sales_report_${dateFilter}_${format(new Date(), 'yyyy-MM-dd')}.xlsx`);\n  };\n\n  const exportReport = () => {\n    exportToExcel();\n  };\n\n  const printReport = async () => {\n    const reportContent = `\n      Sales Report - ${dateFilter.toUpperCase()}\n      Generated: ${format(new Date(), 'dd/MM/yyyy HH:mm:ss')}\n      \n      Overview:\n      - Total Sales: ₹${salesOverview.totalSales.toFixed(2)}\n      - Total Transactions: ${salesOverview.totalTransactions}\n      - Average Transaction: ₹${salesOverview.averageTransaction.toFixed(2)}\n      - Total Profit: ₹${salesOverview.totalProfit.toFixed(2)}\n      \n      Top Products:\n      ${itemWiseSales.slice(0, 5).map((item, index) => \n        `${index + 1}. ${item.product.name} - ${item.quantity} sold - ₹${item.revenue.toFixed(2)}`\n      ).join('\\n')}\n      \n      Employee Performance:\n      ${employeeWiseSales.slice(0, 5).map((emp, index) => \n        `${index + 1}. ${emp.name} - ${emp.transactions} transactions - ₹${emp.revenue.toFixed(2)}`\n      ).join('\\n')}\n    `;\n    \n    await printDriver.printText(reportContent);\n  };\n\n  return (\n    <div className=\"p-3 sm:p-4 md:p-6 space-y-4 sm:space-y-6 max-w-full overflow-x-hidden\">\n      {/* Header Section - Responsive */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-2xl sm:text-3xl font-bold\">Reports & Analytics</h1>\n          <p className=\"text-sm sm:text-base text-muted-foreground\">Comprehensive sales and performance insights</p>\n        </div>\n        <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-2\">\n          <Button onClick={exportReport} variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline\">Export Excel</span>\n            <span className=\"sm:hidden\">Export</span>\n          </Button>\n          <Button onClick={printReport} variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\n            <FileSpreadsheet className=\"w-4 h-4 mr-2\" />\n            <span className=\"hidden sm:inline\">Print Report</span>\n            <span className=\"sm:hidden\">Print</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Date Filter - Responsive */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n            <Calendar className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n            Filter by Date Range\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Select value={dateFilter} onValueChange={(value) => setDateFilter(value as 'today' | 'week' | 'month' | 'all')}>\n            <SelectTrigger className=\"w-full sm:w-48\">\n              <SelectValue placeholder=\"Select date range\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">Today</SelectItem>\n              <SelectItem value=\"week\">This Week</SelectItem>\n              <SelectItem value=\"month\">This Month</SelectItem>\n              <SelectItem value=\"all\">All Time</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Overview Cards - Responsive Grid */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 lg:gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Sales</CardTitle>\n            <DollarSign className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">\n              {salesOverview.totalSales > 0 ? `₹${salesOverview.totalSales.toFixed(2)}` : 'N/A'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesOverview.totalTransactions} transactions\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Average Transaction</CardTitle>\n            <TrendingUp className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">\n              {salesOverview.averageTransaction > 0 ? `₹${salesOverview.averageTransaction.toFixed(2)}` : 'N/A'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              per transaction\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Total Profit</CardTitle>\n            <Package className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">\n              {salesOverview.totalProfit ? `₹${salesOverview.totalProfit.toFixed(2)}` : 'N/A'}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {salesOverview.totalSales > 0 ? `${((salesOverview.totalProfit / salesOverview.totalSales) * 100).toFixed(1)}% margin` : 'N/A'}\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-xs sm:text-sm font-medium\">Top Products</CardTitle>\n            <Users className=\"h-3 w-3 sm:h-4 sm:w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold\">{itemWiseSales.length || 'N/A'}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              products sold\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Reports - Responsive Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 h-auto\">\n          <TabsTrigger value=\"overview\" className=\"text-xs sm:text-sm py-2\">Overview</TabsTrigger>\n          <TabsTrigger value=\"items\" className=\"text-xs sm:text-sm py-2\">Item Sales</TabsTrigger>\n          <TabsTrigger value=\"employees\" className=\"text-xs sm:text-sm py-2\">Employees</TabsTrigger>\n          <TabsTrigger value=\"trends\" className=\"text-xs sm:text-sm py-2\">Trends</TabsTrigger>\n          <TabsTrigger value=\"payments\" className=\"text-xs sm:text-sm py-2\">Payments</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base sm:text-lg\">Top Selling Products</CardTitle>\n                <CardDescription className=\"text-sm\">Best performing products by revenue</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                        <TableHead className=\"text-xs sm:text-sm\">Product</TableHead>\n                        <TableHead className=\"text-xs sm:text-sm\">Qty</TableHead>\n                        <TableHead className=\"text-xs sm:text-sm\">Revenue</TableHead>\n                        <TableHead className=\"text-xs sm:text-sm\">Profit</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {itemWiseSales.length === 0 ? (\n                      <TableRow><TableCell colSpan={4} className=\"text-center\">N/A</TableCell></TableRow>\n                    ) : (\n                      itemWiseSales.slice(0, 5).map((item) => (\n                        <TableRow key={item.product.id}>\n                            <TableCell className=\"font-medium text-xs sm:text-sm\">\n                              <div className=\"max-w-[120px] sm:max-w-none truncate\" title={item.product.name}>\n                                {item.product.name}\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"text-xs sm:text-sm\">{item.quantity}</TableCell>\n                            <TableCell className=\"text-xs sm:text-sm\">₹{item.revenue.toFixed(2)}</TableCell>\n                            <TableCell className={`text-xs sm:text-sm ${item.profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                            ₹{item.profit.toFixed(2)}\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-base sm:text-lg\">Payment Methods</CardTitle>\n                <CardDescription className=\"text-sm\">Sales breakdown by payment type</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250} className=\"sm:h-[300px]\">\n                  <PieChart>\n                    <Pie\n                      data={paymentBreakdown}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                      outerRadius={60}\n                      className=\"sm:outerRadius-80\"\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {paymentBreakdown.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [`₹${Number(value).toFixed(2)}`, 'Amount']} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"items\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Item-wise Sales Report</CardTitle>\n              <CardDescription className=\"text-sm\">Performance of individual products</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                      <TableHead className=\"text-xs sm:text-sm\">Product</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm hidden sm:table-cell\">Category</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm\">Qty</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm\">Revenue</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm\">Profit</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm hidden md:table-cell\">Margin</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {itemWiseSales.map((item) => (\n                    <TableRow key={item.product.id}>\n                        <TableCell className=\"font-medium text-xs sm:text-sm\">\n                          <div className=\"max-w-[100px] sm:max-w-none truncate\" title={item.product.name}>\n                            {item.product.name}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground sm:hidden\">\n                            {item.product.category}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-xs sm:text-sm hidden sm:table-cell\">{item.product.category}</TableCell>\n                        <TableCell className=\"text-xs sm:text-sm\">{item.quantity}</TableCell>\n                        <TableCell className=\"text-xs sm:text-sm\">₹{item.revenue.toFixed(2)}</TableCell>\n                        <TableCell className={`text-xs sm:text-sm ${item.profit > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                        ₹{item.profit.toFixed(2)}\n                      </TableCell>\n                        <TableCell className=\"hidden md:table-cell\">\n                          <Badge variant={item.profit > 0 ? 'default' : 'destructive'} className=\"text-xs\">\n                          {((item.profit / item.revenue) * 100).toFixed(1)}%\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"employees\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Employee Performance</CardTitle>\n              <CardDescription className=\"text-sm\">Sales performance by employee</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                      <TableHead className=\"text-xs sm:text-sm\">Employee</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm\">Transactions</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm\">Revenue</TableHead>\n                      <TableHead className=\"text-xs sm:text-sm hidden sm:table-cell\">Avg Transaction</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {employeeWiseSales.map((employee) => (\n                    <TableRow key={employee.name}>\n                        <TableCell className=\"font-medium text-xs sm:text-sm\">\n                          <div className=\"max-w-[100px] sm:max-w-none truncate\" title={employee.name}>\n                            {employee.name}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-xs sm:text-sm\">{employee.transactions}</TableCell>\n                        <TableCell className=\"text-xs sm:text-sm\">₹{employee.revenue.toFixed(2)}</TableCell>\n                        <TableCell className=\"text-xs sm:text-sm hidden sm:table-cell\">\n                          ₹{(employee.revenue / employee.transactions).toFixed(2)}\n                        </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trends\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Sales Trends</CardTitle>\n              <CardDescription className=\"text-sm\">Revenue and transaction trends over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div style={{ height: '400px' }}>\n                {dailySales.length === 0 ? (\n                  <div className=\"flex items-center justify-center h-full text-muted-foreground\">N/A</div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={dailySales}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey={dateFilter === 'today' ? 'time' : 'date'} \n                        tick={{ fontSize: 10 }}\n                      />\n                      <YAxis tick={{ fontSize: 10 }} />\n                      <Tooltip formatter={(value) => [`₹${Number(value).toFixed(2)}`, 'Sales']} />\n                      <Bar dataKey=\"sales\" fill=\"#8884d8\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\">\n            <Card>\n              <CardHeader>\n              <CardTitle className=\"text-base sm:text-lg\">Payment Method Analysis</CardTitle>\n              <CardDescription className=\"text-sm\">Detailed breakdown of payment methods</CardDescription>\n              </CardHeader>\n              <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                <div>\n                  <h3 className=\"text-base sm:text-lg font-semibold mb-4\">Payment Distribution</h3>\n                  <div style={{ height: '300px' }}>\n                    {paymentBreakdown.length === 0 ? (\n                      <div className=\"flex items-center justify-center h-full text-muted-foreground\">N/A</div>\n                    ) : (\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={paymentBreakdown}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            labelLine={false}\n                            label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                            outerRadius={80}\n                            fill=\"#8884d8\"\n                            dataKey=\"value\"\n                          >\n                            {paymentBreakdown.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={entry.color} />\n                            ))}\n                          </Pie>\n                          <Tooltip formatter={(value) => [`₹${Number(value).toFixed(2)}`, 'Amount']} />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-base sm:text-lg font-semibold mb-4\">Payment Summary</h3>\n                  <div className=\"space-y-3 sm:space-y-4\">\n                    {paymentBreakdown.length === 0 ? (\n                      <div className=\"text-center text-muted-foreground\">N/A</div>\n                    ) : (\n                      paymentBreakdown.map((method) => (\n                        <div key={method.name} className=\"flex justify-between items-center p-3 bg-muted rounded-lg\">\n                          <div>\n                            <p className=\"font-medium text-sm sm:text-base\">{method.name}</p>\n                            <p className=\"text-xs sm:text-sm text-muted-foreground\">\n                              {salesOverview.totalSales > 0 ? `${((method.value / salesOverview.totalSales) * 100).toFixed(1)}% of total sales` : 'N/A'}\n                            </p>\n                        </div>\n                        <div className=\"text-right\">\n                            <p className=\"font-semibold text-sm sm:text-base\">₹{method.value.toFixed(2)}</p>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                    </div>\n                </div>\n                </div>\n              </CardContent>\n            </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":35600},"client/src/pages/Sales.tsx":{"content":"import React from 'react';\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { Product, Transaction, Customer } from '@/lib/types';\nimport { useCart } from '@/hooks/useCart';\nimport { useDataSync } from '@/hooks/useDataSync';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Search, ShoppingCart, Zap, X, CreditCard, DollarSign, Keyboard, Printer, Calculator } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Sales() {\n  const { company, employee } = useAuth();\n  const { \n    products, \n    customers, \n    saveTransaction, \n    saveCustomer, \n    updateCustomer,\n    isLoading: isDataLoading \n  } = useDataSync();\n  \n  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [barcodeQuery, setBarcodeQuery] = useState('');\n  const [skuQuery, setSkuQuery] = useState('');\n  const [isCheckoutOpen, setIsCheckoutOpen] = useState(false);\n  const cart = useCart();\n  const [isMoUDialogOpen, setIsMoUDialogOpen] = useState(false);\n  const [selectedMoU, setSelectedMoU] = useState('');\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [mouValue, setMouValue] = useState('');\n  const [qtyInputs, setQtyInputs] = useState<{ [productId: string]: string }>({});\n  const [inputErrors, setInputErrors] = useState<{ [productId: string]: string }>({});\n  const inputRefs = useRef<{ [productId: string]: HTMLInputElement | null }>({});\n\n  // Customer management state\n  const [customerName, setCustomerName] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [customerGST, setCustomerGST] = useState('');\n  const [currentCustomer, setCurrentCustomer] = useState<Customer | null>(null);\n  const [isCustomerLoading, setIsCustomerLoading] = useState(false);\n\n  // Add state for search type and invoice type\n  const [searchType, setSearchType] = useState<'serial' | 'code' | 'name'>('name');\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [invoiceType, setInvoiceType] = useState<'bill' | 'tax'>('bill');\n\n  // Update time every second\n  useEffect(() => {\n    const interval = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Get unique categories from products\n  const categories = useMemo(() => {\n    if (!Array.isArray(products) || products.length === 0) {\n      return ['All'];\n    }\n    try {\n      return ['All', ...Array.from(new Set(products.map(p => p.category)))];\n    } catch (error) {\n      console.error('Error getting categories:', error);\n      return ['All'];\n    }\n  }, [products]);\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  // ESC key handler for closing MoU Dialog\n  const handleEsc = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') setIsMoUDialogOpen(false);\n  }, []);\n  useEffect(() => {\n    if (isMoUDialogOpen) {\n      window.addEventListener('keydown', handleEsc);\n      return () => window.removeEventListener('keydown', handleEsc);\n    }\n  }, [isMoUDialogOpen, handleEsc]);\n\n  // Initialize filtered products when products change\n  useEffect(() => {\n    if (Array.isArray(products)) {\n      setFilteredProducts(products);\n    }\n  }, [products]);\n\n  // Enhanced search with barcode support\n  useEffect(() => {\n    const query = searchQuery.toLowerCase().trim();\n    if (!query) {\n      setFilteredProducts(Array.isArray(products) ? products : []);\n      return;\n    }\n    // Enhanced keyword/fuzzy search\n    const words = query.split(/\\s+/).filter(Boolean);\n    const filtered = Array.isArray(products) ? products.filter(product => {\n      const fields = [\n        product.name,\n        product.sku,\n        product.barcode,\n        product.category,\n        product.description\n      ].map(field => (field || '').toLowerCase());\n      \n      return words.every(word => \n        fields.some(field => field.includes(word))\n      );\n    }) : [];\n    setFilteredProducts(filtered);\n  }, [searchQuery, products]);\n\n  // Add a function to determine if a unit is decimal-based\n  const DECIMAL_UNITS = ['KGS', 'GMS', 'LTR', 'MLT', 'TON', 'SQM', 'SQF', 'MTR', 'CMS', 'CCM', 'CBM'];\n  const isDecimalUnit = (unit: string) => DECIMAL_UNITS.includes((unit || '').toUpperCase());\n\n  // Add state for the quantity dialog\n  const [isQtyDialogOpen, setIsQtyDialogOpen] = useState(false);\n  const [qtyDialogProduct, setQtyDialogProduct] = useState<Product | null>(null);\n  const [qtyDialogQty, setQtyDialogQty] = useState('1');\n  const [qtyDialogError, setQtyDialogError] = useState('');\n\n  // Update handleProductSelect to accept product and qty\n  const handleProductSelect = (product: Product, qty: number) => {\n    setQtyDialogProduct(product);\n    setQtyDialogQty(qty.toString());\n    setQtyDialogError('');\n    setIsQtyDialogOpen(true);\n  };\n\n  // Add handler for confirming quantity and adding to cart\n  const handleQtyDialogConfirm = () => {\n    if (!qtyDialogProduct) return;\n    const unit = qtyDialogProduct.unit || 'PCS';\n    const isDecimal = isDecimalUnit(unit);\n    const qty = isDecimal ? parseFloat(qtyDialogQty) : parseInt(qtyDialogQty);\n    if (!qty || qty <= 0) {\n      setQtyDialogError('Enter a valid quantity');\n      return;\n    }\n    cart.addItem({ ...qtyDialogProduct, unit }, qty);\n    setIsQtyDialogOpen(false);\n  };\n\n  const handleCheckout = () => {\n    if (cart.items.length === 0) {\n      toast.error('Cart is empty');\n      return;\n    }\n    setIsCheckoutOpen(true);\n  };\n\n  // Customer management functions\n  const handleCustomerPhoneChange = useCallback(async (phone: string) => {\n    setCustomerPhone(phone);\n    \n    // Only search if phone number is valid (at least 10 digits)\n    if (phone.length >= 10 && /^\\d+$/.test(phone)) {\n      setIsCustomerLoading(true);\n      try {\n        // Search for existing customer by phone using the customers from data sync\n        const existingCustomer = customers.find(c => c.phone === phone);\n        \n        if (existingCustomer) {\n          // Customer found - populate fields\n          setCurrentCustomer(existingCustomer);\n          setCustomerName(existingCustomer.name || '');\n          setCustomerGST(existingCustomer.gstin || '');\n          toast.success(`Customer found: ${existingCustomer.name}`);\n        } else {\n          // No customer found - clear current customer\n          setCurrentCustomer(null);\n          // Clear the name if no customer found\n          setCustomerName('');\n          setCustomerGST('');\n        }\n      } catch (error) {\n        console.error('Error searching for customer:', error);\n        toast.error('Error searching for customer');\n      } finally {\n        setIsCustomerLoading(false);\n      }\n    } else {\n      // Clear customer data if phone is invalid\n      setCurrentCustomer(null);\n      setCustomerName('');\n      setCustomerGST('');\n    }\n  }, [customers]);\n\n  // Auto-create or update customer when transaction is completed\n  const handleCustomerSave = useCallback(async (phone: string, name: string, gst: string = '') => {\n    if (!phone || !name || !company?.id) return;\n\n    try {\n      // Use customers from data sync hook instead of calling getCustomers\n      const existingCustomer = customers.find(c => c.phone === phone);\n      \n      if (existingCustomer) {\n        // Update existing customer\n        const updatedCustomer = {\n          ...existingCustomer,\n          name: name,\n          gstin: gst, // Use gstin instead of gst to match the database schema\n          visitCount: (existingCustomer.visitCount || 0) + 1,\n          lastVisit: new Date()\n        };\n        \n        await updateCustomer(existingCustomer.id, updatedCustomer);\n        setCurrentCustomer(updatedCustomer);\n        toast.success('Customer updated successfully');\n      } else {\n        // Create new customer\n        const newCustomer = {\n          id: `customer_${Date.now()}`,\n          companyId: company.id,\n          name: name,\n          phone: phone,\n          gstin: gst, // Use gstin instead of gst to match the database schema\n          email: '',\n          address: '',\n          city: '',\n          state: '',\n          zipCode: '',\n          country: 'India',\n          isActive: true,\n          visitCount: 1,\n          loyaltyPoints: 0,\n          totalSpent: 0,\n          lastVisit: new Date(),\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        \n        await saveCustomer(newCustomer);\n        setCurrentCustomer(newCustomer);\n        toast.success('New customer created successfully');\n      }\n    } catch (error) {\n      console.error('Error saving customer:', error);\n      toast.error('Error saving customer details');\n    }\n  }, [company?.id, customers, updateCustomer, saveCustomer]);\n\n  const handleTransactionComplete = async (transaction: Transaction) => {\n    try {\n      console.log('Saving transaction from Sales:', transaction);\n      const savedTransaction = await saveTransaction(transaction);\n      console.log('Transaction saved successfully from Sales:', savedTransaction);\n      \n      // Auto-save/update customer information and link transaction to customer\n      if (customerPhone && customerName) {\n        await handleCustomerSave(customerPhone, customerName, customerGST);\n        \n        // Update customer's transaction history and spending\n        if (currentCustomer) {\n          const updatedCustomer = {\n            ...currentCustomer,\n            totalSpent: (currentCustomer.totalSpent || 0) + transaction.total,\n            visitCount: (currentCustomer.visitCount || 0) + 1,\n            lastVisit: new Date()\n          };\n          await updateCustomer(currentCustomer.id, updatedCustomer);\n        }\n      }\n      \n      cart.clearCart();\n      \n      // Dispatch event to notify other components\n      window.dispatchEvent(new CustomEvent('transactionUpdated'));\n      \n      toast.success('Transaction completed successfully!');\n      \n      // Note: Product stock updates are handled automatically by the data sync system\n      // when the transaction is saved to the server\n      \n      // Clear customer form\n      setCustomerName('');\n      setCustomerPhone('');\n      setCustomerGST('');\n      setCurrentCustomer(null);\n      \n      // Stay on the Sales page for continued billing\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      toast.error('Failed to save transaction');\n    }\n  };\n\n  const handleRemoveCartItem = (idx: number) => {\n    cart.removeItemByIndex(idx);\n  };\n\n  const availableStock = selectedProduct ? selectedProduct.stock : 0;\n\n  // Filter products by selected category\n  const displayedProducts = selectedCategory === 'All' \n    ? filteredProducts \n    : filteredProducts.filter(product => product.category === selectedCategory);\n\n  return (\n    <div className=\"h-screen bg-gray-50 dark:bg-gray-900 flex flex-col\">\n      {/* Header - Compact */}\n      <header className=\"bg-blue-800 text-white p-2 flex-shrink-0\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-2\">\n          <div className=\"flex flex-col md:flex-row md:items-center gap-2\">\n            <div className=\"flex items-center gap-3\">\n              <ShoppingCart className=\"w-7 h-7\" />\n              <h1 className=\"text-2xl font-bold tracking-wide\">Ace-Bill</h1>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <label className=\"flex items-center gap-1 cursor-pointer\">\n                <input type=\"radio\" checked={searchType === 'serial'} onChange={() => setSearchType('serial')} />\n                <span className={`text-xs dark:text-gray-300 ${searchType === 'serial' ? 'text-blue-200 font-bold' : ''}`}>Serial No.</span>\n              </label>\n              <label className=\"flex items-center gap-1 cursor-pointer\">\n                <input type=\"radio\" checked={searchType === 'code'} onChange={() => setSearchType('code')} />\n                <span className={`text-xs dark:text-gray-300 ${searchType === 'code' ? 'text-blue-200 font-bold' : ''}`}>Item Code</span>\n              </label>\n              <label className=\"flex items-center gap-1 cursor-pointer\">\n                <input type=\"radio\" checked={searchType === 'name'} onChange={() => setSearchType('name')} />\n                <span className={`text-xs dark:text-gray-300 ${searchType === 'name' ? 'text-blue-200 font-bold' : ''}`}>Item Name</span>\n              </label>\n            </div>\n            <div className=\"flex items-center w-full max-w-md\">\n              <input\n                className=\"border rounded-l px-2 py-1 w-full text-sm focus:outline-none focus:ring-2 focus:ring-blue-400 dark:bg-gray-700 dark:text-white dark:border-gray-600\"\n                placeholder={`Search by ${searchType === 'serial' ? 'Serial No.' : searchType === 'code' ? 'Item Code' : 'Item Name'}...`}\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n              />\n              <button className=\"bg-blue-700 text-white px-2 py-1 rounded-r\">\n                <Search className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n          {/* Bill/Tax Invoice Toggle and Date/Time - Compact */}\n          <div className=\"flex flex-col items-end min-w-[180px]\">\n            <div className=\"flex gap-1 mb-1\">\n              <button\n                className={`px-2 py-1 rounded-t text-xs ${invoiceType === 'bill' ? 'bg-blue-700 text-white' : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'}`}\n                onClick={() => setInvoiceType('bill')}\n              >\n                Bill\n              </button>\n              <button\n                className={`px-2 py-1 rounded-t text-xs ${invoiceType === 'tax' ? 'bg-blue-700 text-white' : 'bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300'}`}\n                onClick={() => setInvoiceType('tax')}\n              >\n                Tax Invoice\n              </button>\n            </div>\n            <div className=\"text-right\">\n              <span className=\"text-xs text-gray-300\">{currentTime.toLocaleDateString(undefined, { day: '2-digit', month: 'long', year: 'numeric' })}</span>\n              <div className=\"text-sm font-mono font-bold\">{currentTime.toLocaleTimeString()}</div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content - Responsive */}\n      <div className=\"flex-1 flex flex-col lg:flex-row min-h-0 min-w-0 overflow-hidden\">\n        {/* Category Sidebar - Compact */}\n        <div className=\"bg-blue-800 text-white w-full lg:w-48 flex flex-col py-2 px-2 flex-shrink-0 min-h-0 lg:min-h-0\">\n          <div className=\"font-bold text-base mb-2 tracking-widest text-center\">CATEGORY</div>\n          <div className=\"grid grid-cols-2 lg:grid-cols-1 gap-1 lg:gap-0\">\n            {categories.map(category => (\n              <button\n                key={category}\n                className={`w-full text-left px-2 py-2 mb-1 rounded transition font-semibold text-sm ${selectedCategory === category ? 'bg-white text-blue-800' : 'hover:bg-blue-700'}`}\n                onClick={() => setSelectedCategory(category)}\n              >\n                {category}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Product Grid - Compact */}\n        <div className=\"flex-1 bg-gray-50 dark:bg-gray-900 p-2 overflow-auto min-w-0 min-h-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full bg-white dark:bg-gray-800 rounded shadow text-left\">\n              <thead>\n                <tr className=\"bg-blue-100 dark:bg-blue-900 text-blue-900 dark:text-blue-100\">\n                  <th className=\"px-2 py-2 text-xs font-semibold\">Item Name</th>\n                  <th className=\"px-2 py-2 text-xs font-semibold hidden sm:table-cell\">Tag</th>\n                  <th className=\"px-2 py-2 text-xs font-semibold\">Sale Price</th>\n                  <th className=\"px-2 py-2 text-xs font-semibold hidden md:table-cell\">MRP</th>\n                </tr>\n              </thead>\n              <tbody>\n                {displayedProducts.length === 0 ? (\n                  <tr><td colSpan={4} className=\"text-center text-gray-400 py-8\">No products found.</td></tr>\n                ) : (\n                  displayedProducts.map(product => (\n                    <tr\n                      key={product.id}\n                      className=\"hover:bg-blue-50 dark:hover:bg-blue-900 cursor-pointer border-b dark:border-gray-700\"\n                      onClick={() => handleProductSelect(product, 1)}\n                    >\n                      <td className=\"px-2 py-2 font-semibold text-xs dark:text-white\">\n                        <div className=\"max-w-[200px] truncate\" title={product.name}>\n                          {product.name}\n                        </div>\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400 sm:hidden\">{product.sku || '-'}</div>\n                      </td>\n                      <td className=\"px-2 py-2 text-xs hidden sm:table-cell dark:text-white\">{product.sku || '-'}</td>\n                      <td className=\"px-2 py-2 text-xs dark:text-white\">₹{product.price.toFixed(2)}</td>\n                      <td className=\"px-2 py-2 text-xs hidden md:table-cell dark:text-white\">-</td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* Cart/Invoice Panel - Compact */}\n        <div className=\"w-full lg:w-80 bg-white dark:bg-gray-800 border-t lg:border-l dark:border-gray-700 flex flex-col h-64 lg:h-full flex-shrink-0 min-h-0\">\n          <div className=\"p-2 border-b dark:border-gray-700\">\n            <div className=\"flex flex-col sm:flex-row gap-2 mb-2\">\n              <input\n                className=\"border rounded px-2 py-1 flex-1 text-xs dark:bg-gray-700 dark:text-white dark:border-gray-600\"\n                placeholder=\"Mobile No.\"\n                value={barcodeQuery}\n                onChange={e => setBarcodeQuery(e.target.value)}\n              />\n              <input\n                className=\"border rounded px-2 py-1 flex-1 text-xs dark:bg-gray-700 dark:text-white dark:border-gray-600\"\n                placeholder=\"Client Name\"\n                value={skuQuery}\n                onChange={e => setSkuQuery(e.target.value)}\n              />\n            </div>\n          </div>\n          {/* Cart Table */}\n          <div className=\"flex-1 overflow-y-auto p-2 sm:p-4\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-xs sm:text-sm dark:text-white\">\n                <thead>\n                  <tr className=\"border-b dark:border-gray-700\">\n                    <th className=\"text-left dark:text-white\">Item Name</th>\n                    <th className=\"text-center dark:text-white\">Qty</th>\n                    <th className=\"text-right dark:text-white\">Rate</th>\n                    <th className=\"text-right dark:text-white\">Amount</th>\n                    <th className=\"text-center dark:text-white\"></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {cart.items.length === 0 ? (\n                    <tr><td colSpan={5} className=\"text-center text-gray-400 dark:text-gray-500 py-8\">No items</td></tr>\n                  ) : cart.items.map((item, idx) => (\n                    <tr key={item.product.id} className=\"border-b dark:border-gray-700\">\n                      <td className=\"max-w-[80px] sm:max-w-none truncate dark:text-white\" title={item.product.name}>{item.product.name}</td>\n                      <td className=\"text-center dark:text-white\">{item.quantity}</td>\n                      <td className=\"text-right dark:text-white\">₹{item.product.price.toFixed(2)}</td>\n                      <td className=\"text-right dark:text-white\">₹{(item.product.price * item.quantity).toFixed(2)}</td>\n                      <td className=\"text-center\">\n                        <button onClick={() => handleRemoveCartItem(idx)} className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\"><X className=\"w-4 h-4 sm:w-5 sm:h-5\" /></button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          {/* Bill Summary & Payment */}\n          <div className=\"p-2 sm:p-4 border-t dark:border-gray-700 space-y-2\">\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n              <span>Savings</span><span>0.00</span>\n            </div>\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400\">\n              <span>Round Off</span><span>0.00</span>\n            </div>\n            <div className=\"flex justify-between text-sm sm:text-lg font-bold dark:text-white\">\n              <span>Total</span><span>₹{cart.getTotal().toFixed(2)}</span>\n            </div>\n            <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 mt-2\">\n              <label className=\"flex items-center gap-1 cursor-pointer text-xs sm:text-sm dark:text-white\">\n                <input type=\"radio\" name=\"payment\" defaultChecked /> Cash\n              </label>\n              <label className=\"flex items-center gap-1 cursor-pointer text-xs sm:text-sm dark:text-white\">\n                <input type=\"radio\" name=\"payment\" /> Card\n              </label>\n              <label className=\"flex items-center gap-1 cursor-pointer text-xs sm:text-sm dark:text-white\">\n                <input type=\"radio\" name=\"payment\" /> Wallet\n              </label>\n            </div>\n            <button \n              className=\"w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 sm:py-3 rounded text-sm sm:text-lg mt-2\" \n              onClick={handleCheckout}\n              disabled={cart.items.length === 0}\n            >\n              Generate Bill\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Quantity Dialog - Responsive */}\n      {isQtyDialogOpen && qtyDialogProduct && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 sm:p-8 w-full max-w-md shadow-lg relative\">\n            <button className=\"absolute top-2 right-2 text-gray-400 hover:text-red-600 text-2xl\" onClick={() => setIsQtyDialogOpen(false)}>&times;</button>\n            <h2 className=\"text-lg sm:text-xl font-bold mb-2 dark:text-white\">{qtyDialogProduct.name}</h2>\n            <div className=\"mb-2 text-sm text-gray-600 dark:text-gray-300\">\n              <span className=\"font-semibold\">Unit:</span> PCS\n            </div>\n            {qtyDialogProduct.description && (\n              <div className=\"mb-2 text-xs text-gray-500 dark:text-gray-400\">{qtyDialogProduct.description}</div>\n            )}\n            <input\n              type=\"number\"\n              className=\"border rounded px-3 sm:px-4 py-2 w-full mb-4 text-sm sm:text-base dark:bg-gray-700 dark:text-white dark:border-gray-600\"\n              value={qtyDialogQty}\n              onChange={e => setQtyDialogQty(e.target.value)}\n              min=\"1\"\n              step=\"1\"\n              autoFocus\n              onKeyDown={e => { if (e.key === 'Enter') handleQtyDialogConfirm(); }}\n            />\n            {qtyDialogError && (\n              <div className=\"text-red-600 dark:text-red-400 mb-2 text-sm\">\n                Enter a valid whole number quantity (e.g., 2)\n              </div>\n            )}\n            <div className=\"flex gap-2 sm:gap-4\">\n              <button className=\"flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 rounded text-sm sm:text-base dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\" onClick={() => setIsQtyDialogOpen(false)}>Cancel</button>\n              <button className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded text-sm sm:text-base\" onClick={handleQtyDialogConfirm}>Add to Cart</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Checkout Dialog - Responsive */}\n      {isCheckoutOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 sm:p-8 w-full max-w-md shadow-lg max-h-[90vh] overflow-y-auto\">\n            <h2 className=\"text-lg sm:text-xl font-bold mb-4 dark:text-white\">Complete Transaction</h2>\n            <div className=\"space-y-4\">\n              {/* Customer Information */}\n              <div className=\"space-y-3\">\n                <h3 className=\"font-semibold text-sm dark:text-white\">Customer Information</h3>\n                <Input\n                  placeholder=\"Customer Name\"\n                  value={customerName}\n                  onChange={(e) => setCustomerName(e.target.value)}\n                  className=\"text-sm\"\n                  disabled={isCustomerLoading}\n                />\n                <div className=\"relative\">\n                  <Input\n                    placeholder=\"Mobile Number\"\n                    value={customerPhone}\n                    onChange={(e) => handleCustomerPhoneChange(e.target.value)}\n                    className=\"text-sm\"\n                    disabled={isCustomerLoading}\n                  />\n                  {currentCustomer && (\n                    <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                      <Badge variant=\"outline\" className=\"text-xs bg-green-50 text-green-700 border-green-200\">\n                        Found\n                      </Badge>\n                    </div>\n                  )}\n                </div>\n                <Input\n                  placeholder=\"GST Number (Optional)\"\n                  value={customerGST}\n                  onChange={(e) => setCustomerGST(e.target.value)}\n                  className=\"text-sm\"\n                  disabled={isCustomerLoading}\n                />\n                {currentCustomer && (\n                  <div className=\"text-xs text-gray-600 bg-blue-50 p-2 rounded border border-blue-200 dark:bg-gray-700 dark:text-gray-300\">\n                    <div><strong>Visit Count:</strong> {currentCustomer.visitCount || 0}</div>\n                    <div><strong>Last Visit:</strong> {currentCustomer.lastVisit ? new Date(currentCustomer.lastVisit).toLocaleDateString() : 'Never'}</div>\n                    {currentCustomer.loyaltyPoints > 0 && (\n                      <div><strong>Loyalty Points:</strong> {currentCustomer.loyaltyPoints}</div>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Transaction Summary */}\n              <div className=\"border-t pt-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm sm:text-base dark:text-white\">Total Amount:</span>\n                  <span className=\"font-bold text-sm sm:text-base dark:text-white\">₹{cart.getTotal().toFixed(2)}</span>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2 sm:gap-4\">\n                <button \n                  className=\"flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 font-bold py-2 rounded text-sm sm:text-base dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500\" \n                  onClick={() => setIsCheckoutOpen(false)}\n                >\n                  Cancel\n                </button>\n                <button \n                  className=\"flex-1 bg-green-600 hover:bg-green-700 text-white font-bold py-2 rounded text-sm sm:text-base\" \n                  onClick={() => {\n                    // Create transaction and complete\n                    const transaction: Transaction = {\n                      id: `TXN-${Date.now()}`,\n                      companyId: company?.id || '',\n                      employeeId: employee?.id,\n                      employeeName: employee?.name,\n                      customerName: customerName || undefined,\n                      customerPhone: customerPhone || undefined,\n                      items: cart.items.map(item => ({\n                        productId: item.product.id,\n                        name: item.product.name,\n                        price: item.product.price,\n                        quantity: item.quantity,\n                        total: item.product.price * item.quantity\n                      })),\n                      subtotal: cart.getTotal(),\n                      tax: 0,\n                      discount: 0,\n                      total: cart.getTotal(),\n                      paymentMethod: 'cash',\n                      timestamp: new Date(),\n                      status: 'completed'\n                    };\n                    handleTransactionComplete(transaction);\n                    setIsCheckoutOpen(false);\n                  }}\n                  disabled={!customerName.trim()}\n                >\n                  Complete\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":29354},"client/src/pages/Settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, Receipt, Printer, Bell, Info, FileText, Download } from \"lucide-react\";\nimport * as XLSX from 'xlsx';\nimport { getEmployeeIdSettings, setEmployeeIdSettings } from \"@/lib/storage\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\ninterface CompanySettings {\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  pinCode: string;\n  country: string;\n  email: string;\n  phone: string;\n  taxId: string; // PAN No.\n  gstin: string;\n  taxationMethod: string;\n  currency: string;\n  logo?: string;\n}\n\ninterface PrintTemplateSettings {\n  header: string;\n  footer: string;\n  showLogo: boolean;\n  showTaxBreakdown: boolean;\n  showCustomerInfo: boolean;\n  paperSize: 'a4' | 'thermal';\n  fontSize: number;\n  includeBarcode: boolean;\n}\n\ninterface NotificationSettings {\n  lowStockAlerts: boolean;\n  dailyReports: boolean;\n  transactionAlerts: boolean;\n  emailNotifications: boolean;\n}\n\ninterface GeneralSettings {\n  currency: string;\n  timezone: string;\n  dateFormat: string;\n  autoBackup: boolean;\n  sessionTimeout: number;\n}\n\ninterface InvoiceTemplateSettings {\n  defaultTemplate: number;\n  defaultCurrency: string;\n  defaultTaxRate: number;\n  defaultNotes: string;\n  showLogo: boolean;\n  showTaxBreakdown: boolean;\n  showCustomerInfo: boolean;\n  autoGenerateInvoiceNumber: boolean;\n  invoiceNumberPrefix: string;\n  includeTerms: boolean;\n  termsText: string;\n  includePaymentInstructions: boolean;\n  paymentInstructions: string;\n}\n\nconst Settings = () => {\n  const { toast } = useToast();\n  const { adminAuth, employee } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  const [companySettings, setCompanySettings] = useState<CompanySettings>({\n    name: \"Ace-Bill\",\n    address: \"123 Business Street, City, State 12345\",\n    city: \"\",\n    state: \"Tamil Nadu\",\n    pinCode: \"\",\n    country: \"India\",\n    email: \"contact@acebill.com\",\n    phone: \"\",\n    taxId: \"TAX123456789\",\n    gstin: \"\",\n    taxationMethod: \"Not Applicable\",\n    currency: \"Indian Rupee\",\n    logo: undefined\n  });\n\n  const [printSettings, setPrintSettings] = useState<PrintTemplateSettings>({\n    header: \"Thank you for your business!\",\n    footer: \"Please keep this receipt for your records.\",\n    showLogo: true,\n    showTaxBreakdown: true,\n    showCustomerInfo: true,\n    paperSize: 'thermal',\n    fontSize: 12,\n    includeBarcode: true\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({\n    lowStockAlerts: true,\n    dailyReports: false,\n    transactionAlerts: true,\n    emailNotifications: false\n  });\n\n  const [generalSettings, setGeneralSettings] = useState<GeneralSettings>({\n    currency: \"INR\",\n    timezone: \"Asia/Kolkata\",\n    dateFormat: \"DD/MM/YYYY\",\n    autoBackup: true,\n    sessionTimeout: 60\n  });\n\n  const [invoiceSettings, setInvoiceSettings] = useState<InvoiceTemplateSettings>({\n    defaultTemplate: 1,\n    defaultCurrency: \"INR\",\n    defaultTaxRate: 18,\n    defaultNotes: \"Thank you for your business!\",\n    showLogo: true,\n    showTaxBreakdown: true,\n    showCustomerInfo: true,\n    autoGenerateInvoiceNumber: true,\n    invoiceNumberPrefix: \"INV\",\n    includeTerms: false,\n    termsText: \"Payment is due within 30 days. Late payments may incur additional charges.\",\n    includePaymentInstructions: false,\n    paymentInstructions: \"Please make payment to the account details provided above.\"\n  });\n\n  const [companyErrors, setCompanyErrors] = useState<string[]>([]);\n  const [isSavingCompany, setIsSavingCompany] = useState(false);\n  const [empIdPrefix, setEmpIdPrefix] = useState(\"EMP\");\n  const [empIdDigits, setEmpIdDigits] = useState(3);\n  const [empIdNext, setEmpIdNext] = useState(1);\n\n  useEffect(() => {\n    // Guard: super admin/company platform admin should not access company settings\n    if (adminAuth.isAuthenticated) {\n      navigate('/admin/settings', { replace: true });\n      return;\n    }\n    // Only company owners and admin employees can access settings\n    if (employee && (employee.position?.toLowerCase() !== 'admin')) {\n      navigate('/unauthorized', { replace: true });\n      return;\n    }\n    // Load settings from localStorage\n    const savedCompany = localStorage.getItem('company_settings');\n    const savedPrint = localStorage.getItem('print_settings');\n    const savedNotifications = localStorage.getItem('notification_settings');\n    const savedGeneral = localStorage.getItem('general_settings');\n    const savedInvoice = localStorage.getItem('invoice_settings');\n\n    if (savedCompany) setCompanySettings(JSON.parse(savedCompany));\n    if (savedPrint) setPrintSettings(JSON.parse(savedPrint));\n    if (savedNotifications) setNotificationSettings(JSON.parse(savedNotifications));\n    if (savedGeneral) setGeneralSettings(JSON.parse(savedGeneral));\n    if (savedInvoice) setInvoiceSettings(JSON.parse(savedInvoice));\n\n    // Load employee ID settings from backend/local\n    (async () => {\n      const s = await getEmployeeIdSettings();\n      setEmpIdPrefix(s.prefix);\n      setEmpIdDigits(s.digits);\n      setEmpIdNext(s.next);\n    })();\n  }, []);\n\n  const saveCompanySettings = () => {\n    setIsSavingCompany(true);\n    try {\n      // Debug: log the city value\n      console.log('City value:', companySettings.city);\n      // Validation\n      const errors = [];\n      if (!(companySettings.name || '').trim()) errors.push(\"Company Name is required\");\n      if (!(companySettings.city || '').trim()) errors.push(\"City is required\");\n      if (!(companySettings.state || '').trim()) errors.push(\"State is required\");\n      if (!(companySettings.phone || '').trim()) errors.push(\"Phone is required\");\n      setCompanyErrors(errors);\n      if (errors.length > 0) {\n        toast({\n          title: \"Please fill all required fields\",\n          description: errors.join(\", \"),\n          variant: \"destructive\"\n        });\n        setIsSavingCompany(false);\n        return;\n      }\n      localStorage.setItem('company_settings', JSON.stringify(companySettings));\n      window.dispatchEvent(new CustomEvent('settingsUpdated'));\n      toast({\n        title: \"Saved successfully!\",\n        description: \"Your company information has been updated.\",\n        variant: \"default\"\n      });\n    } catch (err) {\n      toast({\n        title: \"Failed to save settings\",\n        description: err instanceof Error ? err.message : String(err),\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsSavingCompany(false);\n    }\n  };\n\n  const savePrintSettings = () => {\n    localStorage.setItem('print_settings', JSON.stringify(printSettings));\n    // Dispatch custom event to notify other components\n    window.dispatchEvent(new CustomEvent('settingsUpdated'));\n    toast({\n      title: \"Print template saved\",\n      description: \"Your receipt template has been updated successfully.\",\n    });\n  };\n\n  const saveNotificationSettings = () => {\n    localStorage.setItem('notification_settings', JSON.stringify(notificationSettings));\n    toast({\n      title: \"Notification settings saved\",\n      description: \"Your notification preferences have been updated.\",\n    });\n  };\n\n  const saveGeneralSettings = () => {\n    localStorage.setItem('general_settings', JSON.stringify(generalSettings));\n    toast({\n      title: \"General settings saved\",\n      description: \"Your general preferences have been updated.\",\n    });\n  };\n\n  const saveInvoiceSettings = () => {\n    localStorage.setItem('invoice_settings', JSON.stringify(invoiceSettings));\n    window.dispatchEvent(new CustomEvent('settingsUpdated'));\n    toast({\n      title: \"Invoice settings saved\",\n      description: \"Your invoice template preferences have been updated.\",\n    });\n  };\n\n  // 1. Add state and handler for logo upload and delete\n  const handleLogoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setCompanySettings((prev) => ({ ...prev, logo: reader.result as string }));\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleLogoDelete = () => {\n    setCompanySettings((prev) => ({ ...prev, logo: undefined }));\n  };\n\n  const handleBackupAllSettings = () => {\n    try {\n      const data = {\n        company: companySettings,\n        print: printSettings,\n        notifications: notificationSettings,\n        general: generalSettings,\n        invoice: invoiceSettings,\n      };\n      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'settings-backup.json';\n      a.click();\n      URL.revokeObjectURL(url);\n      toast({ title: 'Backup created', description: 'All settings exported as settings-backup.json' });\n    } catch (e) {\n      toast({ title: 'Backup failed', description: 'Could not export settings', variant: 'destructive' });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center space-x-2\">\n        <Building2 className=\"h-8 w-8\" />\n        <div>\n          <h1 className=\"text-3xl font-bold\">Settings</h1>\n          <p className=\"text-muted-foreground\">Manage your business settings and preferences</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"company\">Company</TabsTrigger>\n          <TabsTrigger value=\"print\">Print Template</TabsTrigger>\n          <TabsTrigger value=\"invoice\">Invoice Templates</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n        </TabsList>\n\n        <div className=\"flex justify-end\">\n          <Button variant=\"outline\" onClick={handleBackupAllSettings}>\n            <Download className=\"h-4 w-4 mr-2\" /> Backup Settings\n          </Button>\n        </div>\n\n        <TabsContent value=\"company\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                Company Information\n              </CardTitle>\n              <CardDescription>\n                Update your business details that appear on receipts and reports\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Section: Company Details */}\n              <h3 className=\"font-semibold text-lg mb-2\">Company Details</h3>\n              <div className=\"grid grid-cols-2 gap-8\">\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-name\">Company Name <span className=\"text-red-500\">*</span></Label>\n                    <Input\n                      id=\"company-name\"\n                      value={companySettings.name}\n                      onChange={(e) => setCompanySettings({...companySettings, name: e.target.value})}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-address\">Address</Label>\n                    <Textarea\n                      id=\"company-address\"\n                      value={companySettings.address}\n                      onChange={(e) => setCompanySettings({...companySettings, address: e.target.value})}\n                      rows={2}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company-city\">City <span className=\"text-red-500\">*</span></Label>\n                      <Input\n                        id=\"company-city\"\n                        value={companySettings.city}\n                        onChange={(e) => setCompanySettings({...companySettings, city: e.target.value})}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company-state\">State <span className=\"text-red-500\">*</span></Label>\n                      <select\n                        id=\"company-state\"\n                        className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                        value={companySettings.state}\n                        onChange={(e) => setCompanySettings({...companySettings, state: e.target.value})}\n                        required\n                      >\n                        <option value=\"Tamil Nadu\">Tamil Nadu</option>\n                        <option value=\"Kerala\">Kerala</option>\n                        <option value=\"Karnataka\">Karnataka</option>\n                        <option value=\"Andhra Pradesh\">Andhra Pradesh</option>\n                        <option value=\"Telangana\">Telangana</option>\n                        <option value=\"Maharashtra\">Maharashtra</option>\n                        <option value=\"Other\">Other</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company-pincode\">Pin Code</Label>\n                      <Input\n                        id=\"company-pincode\"\n                        value={companySettings.pinCode}\n                        onChange={(e) => setCompanySettings({...companySettings, pinCode: e.target.value})}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"company-country\">Country</Label>\n                      <Input\n                        id=\"company-country\"\n                        value={companySettings.country}\n                        disabled\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-email\">Email</Label>\n                    <Input\n                      id=\"company-email\"\n                      type=\"email\"\n                      value={companySettings.email}\n                      onChange={(e) => setCompanySettings({...companySettings, email: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-phone\">Phone <span className=\"text-red-500\">*</span></Label>\n                    <Input\n                      id=\"company-phone\"\n                      value={companySettings.phone}\n                      onChange={(e) => setCompanySettings({...companySettings, phone: e.target.value})}\n                      required\n                    />\n                  </div>\n                </div>\n                {/* Section: Other Details & Logo */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg mb-2\">Other Details</h3>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-pan\">PAN No. <Info className=\"inline w-4 h-4 ml-1\" /><span className=\"sr-only\">Permanent Account Number for tax purposes.</span></Label>\n                    <Input\n                      id=\"company-pan\"\n                      value={companySettings.taxId}\n                      onChange={(e) => setCompanySettings({...companySettings, taxId: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-gstin\">GSTIN <Info className=\"inline w-4 h-4 ml-1\" /><span className=\"sr-only\">Goods and Services Tax Identification Number.</span></Label>\n                    <Input\n                      id=\"company-gstin\"\n                      value={companySettings.gstin}\n                      onChange={(e) => setCompanySettings({...companySettings, gstin: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-taxation\">Taxation Method <Info className=\"inline w-4 h-4 ml-1\" /><span className=\"sr-only\">Choose the applicable taxation method for your business.</span></Label>\n                    <select\n                      id=\"company-taxation\"\n                      className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                      value={companySettings.taxationMethod}\n                      onChange={(e) => setCompanySettings({...companySettings, taxationMethod: e.target.value})}\n                    >\n                      <option value=\"Not Applicable\">Not Applicable</option>\n                      <option value=\"Regular\">Regular</option>\n                      <option value=\"Composition\">Composition</option>\n                    </select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"company-currency\">Currency</Label>\n                    <select\n                      id=\"company-currency\"\n                      className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                      value={companySettings.currency}\n                      onChange={(e) => setCompanySettings({...companySettings, currency: e.target.value})}\n                    >\n                      <option value=\"Indian Rupee\">Indian Rupee (₹)</option>\n                    </select>\n                  </div>\n                  {/* Section: Company Logo */}\n                  <h3 className=\"font-semibold text-lg mb-2\">Company Logo</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex flex-col items-center border rounded-md p-4 bg-muted/50\">\n                      {companySettings.logo ? (\n                        <>\n                          <img src={companySettings.logo} alt=\"Company Logo\" className=\"w-32 h-32 object-contain mb-2 border bg-white\" />\n                          <div className=\"flex gap-2\">\n                            <Button type=\"button\" variant=\"outline\" onClick={handleLogoDelete} className=\"text-red-500 border-red-300 hover:bg-red-50\">\n                              <span role=\"img\" aria-label=\"Delete\">🗑️</span> Delete\n                            </Button>\n                          </div>\n                        </>\n                      ) : (\n                        <>\n                          <label htmlFor=\"logo-upload\" className=\"cursor-pointer flex flex-col items-center gap-2\">\n                            <span role=\"img\" aria-label=\"Upload\">⬆️</span>\n                            <span>Upload Logo</span>\n                            <input\n                              id=\"logo-upload\"\n                              type=\"file\"\n                              accept=\"image/*\"\n                              className=\"hidden\"\n                              onChange={handleLogoUpload}\n                            />\n                          </label>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-end mt-4\">\n                <Button onClick={saveCompanySettings} className=\"w-32\" disabled={isSavingCompany}>\n                  <span role=\"img\" aria-label=\"Save\">💾</span> {isSavingCompany ? 'Saving...' : 'Save'}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Employee Settings */}\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Employee ID Settings</CardTitle>\n              <CardDescription>Customize how new Employee IDs are generated.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"emp-prefix\">Prefix</Label>\n                  <Input id=\"emp-prefix\" value={empIdPrefix} onChange={(e) => setEmpIdPrefix(e.target.value.toUpperCase())} />\n                </div>\n                <div>\n                  <Label htmlFor=\"emp-digits\">Digits</Label>\n                  <Input id=\"emp-digits\" type=\"number\" min={2} max={6} value={empIdDigits} onChange={(e) => setEmpIdDigits(Math.max(2, Math.min(6, parseInt(e.target.value||\"3\"))))} />\n                </div>\n                <div>\n                  <Label htmlFor=\"emp-next\">Next Number</Label>\n                  <Input id=\"emp-next\" type=\"number\" min={1} value={empIdNext} onChange={(e) => setEmpIdNext(Math.max(1, parseInt(e.target.value||\"1\")))} />\n                </div>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Preview: {empIdPrefix}{String(empIdNext).padStart(empIdDigits, '0')}</div>\n              <Button onClick={async () => {\n                await setEmployeeIdSettings({ prefix: empIdPrefix, digits: empIdDigits, next: empIdNext });\n                toast({ title: \"Employee ID settings saved\" });\n              }}>Save Employee ID Settings</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"print\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Receipt className=\"h-5 w-5\" />\n                Print Template Settings\n              </CardTitle>\n              <CardDescription>\n                Customize how your receipts and invoices look when printed\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"header-text\">Header Text</Label>\n                  <Input\n                    id=\"header-text\"\n                    value={printSettings.header}\n                    onChange={(e) => setPrintSettings({...printSettings, header: e.target.value})}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"footer-text\">Footer Text</Label>\n                  <Input\n                    id=\"footer-text\"\n                    value={printSettings.footer}\n                    onChange={(e) => setPrintSettings({...printSettings, footer: e.target.value})}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"paper-size\">Paper Size</Label>\n                  <select\n                    id=\"paper-size\"\n                    className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                    value={printSettings.paperSize}\n                    onChange={(e) => setPrintSettings({...printSettings, paperSize: e.target.value as 'a4' | 'thermal'})}\n                  >\n                    <option value=\"thermal\">Thermal (80mm)</option>\n                    <option value=\"a4\">A4 Paper</option>\n                  </select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"font-size\">Font Size</Label>\n                  <Input\n                    id=\"font-size\"\n                    type=\"number\"\n                    min=\"8\"\n                    max=\"20\"\n                    value={printSettings.fontSize}\n                    onChange={(e) => setPrintSettings({...printSettings, fontSize: parseInt(e.target.value)})}\n                  />\n                </div>\n              </div>\n              \n              <Separator />\n              \n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Display Options</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-logo\">Show Company Logo</Label>\n                    <Switch\n                      id=\"show-logo\"\n                      checked={printSettings.showLogo}\n                      onCheckedChange={(checked) => setPrintSettings({...printSettings, showLogo: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-tax\">Show Tax Breakdown</Label>\n                    <Switch\n                      id=\"show-tax\"\n                      checked={printSettings.showTaxBreakdown}\n                      onCheckedChange={(checked) => setPrintSettings({...printSettings, showTaxBreakdown: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-customer\">Show Customer Info</Label>\n                    <Switch\n                      id=\"show-customer\"\n                      checked={printSettings.showCustomerInfo}\n                      onCheckedChange={(checked) => setPrintSettings({...printSettings, showCustomerInfo: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"include-barcode\">Include Barcode</Label>\n                    <Switch\n                      id=\"include-barcode\"\n                      checked={printSettings.includeBarcode}\n                      onCheckedChange={(checked) => setPrintSettings({...printSettings, includeBarcode: checked})}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <Button onClick={savePrintSettings}>\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Save Print Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"invoice\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Invoice Template Settings\n              </CardTitle>\n              <CardDescription>\n                Customize your invoice templates and default settings\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Default Template Selection */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Default Template</h4>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((templateNum) => (\n                    <div\n                      key={templateNum}\n                      className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\n                        invoiceSettings.defaultTemplate === templateNum\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => setInvoiceSettings({...invoiceSettings, defaultTemplate: templateNum})}\n                    >\n                      <div className=\"text-center\">\n                        <div className=\"w-full h-20 bg-gray-100 rounded mb-2 flex items-center justify-center\">\n                          <span className=\"text-sm font-medium\">Template {templateNum}</span>\n                        </div>\n                        <span className=\"text-sm\">Template {templateNum}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Default Settings */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Default Settings</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"default-currency\">Default Currency</Label>\n                    <select\n                      id=\"default-currency\"\n                      className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                      value={invoiceSettings.defaultCurrency}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, defaultCurrency: e.target.value})}\n                    >\n                      <option value=\"INR\">INR (₹)</option>\n                      <option value=\"USD\">USD ($)</option>\n                      <option value=\"EUR\">EUR (€)</option>\n                      <option value=\"GBP\">GBP (£)</option>\n                    </select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"default-tax-rate\">Default Tax Rate (%)</Label>\n                    <Input\n                      id=\"default-tax-rate\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.01\"\n                      value={invoiceSettings.defaultTaxRate}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, defaultTaxRate: parseFloat(e.target.value) || 0})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"invoice-prefix\">Invoice Number Prefix</Label>\n                    <Input\n                      id=\"invoice-prefix\"\n                      value={invoiceSettings.invoiceNumberPrefix}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, invoiceNumberPrefix: e.target.value})}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"default-notes\">Default Notes</Label>\n                    <Textarea\n                      id=\"default-notes\"\n                      value={invoiceSettings.defaultNotes}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, defaultNotes: e.target.value})}\n                      rows={2}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Display Options */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Display Options</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-logo-invoice\">Show Company Logo</Label>\n                    <Switch\n                      id=\"show-logo-invoice\"\n                      checked={invoiceSettings.showLogo}\n                      onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, showLogo: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-tax-breakdown\">Show Tax Breakdown</Label>\n                    <Switch\n                      id=\"show-tax-breakdown\"\n                      checked={invoiceSettings.showTaxBreakdown}\n                      onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, showTaxBreakdown: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-customer-info\">Show Customer Info</Label>\n                    <Switch\n                      id=\"show-customer-info\"\n                      checked={invoiceSettings.showCustomerInfo}\n                      onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, showCustomerInfo: checked})}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"auto-generate-number\">Auto Generate Invoice Number</Label>\n                    <Switch\n                      id=\"auto-generate-number\"\n                      checked={invoiceSettings.autoGenerateInvoiceNumber}\n                      onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, autoGenerateInvoiceNumber: checked})}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Terms and Conditions */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"include-terms\">Include Terms & Conditions</Label>\n                    <p className=\"text-sm text-muted-foreground\">Add terms and conditions to your invoices</p>\n                  </div>\n                  <Switch\n                    id=\"include-terms\"\n                    checked={invoiceSettings.includeTerms}\n                    onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, includeTerms: checked})}\n                  />\n                </div>\n                {invoiceSettings.includeTerms && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"terms-text\">Terms & Conditions Text</Label>\n                    <Textarea\n                      id=\"terms-text\"\n                      value={invoiceSettings.termsText}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, termsText: e.target.value})}\n                      rows={3}\n                      placeholder=\"Enter your terms and conditions...\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <Separator />\n\n              {/* Payment Instructions */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"include-payment\">Include Payment Instructions</Label>\n                    <p className=\"text-sm text-muted-foreground\">Add payment instructions to your invoices</p>\n                  </div>\n                  <Switch\n                    id=\"include-payment\"\n                    checked={invoiceSettings.includePaymentInstructions}\n                    onCheckedChange={(checked) => setInvoiceSettings({...invoiceSettings, includePaymentInstructions: checked})}\n                  />\n                </div>\n                {invoiceSettings.includePaymentInstructions && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"payment-instructions\">Payment Instructions</Label>\n                    <Textarea\n                      id=\"payment-instructions\"\n                      value={invoiceSettings.paymentInstructions}\n                      onChange={(e) => setInvoiceSettings({...invoiceSettings, paymentInstructions: e.target.value})}\n                      rows={3}\n                      placeholder=\"Enter payment instructions...\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              <Button onClick={saveInvoiceSettings} className=\"w-full\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Save Invoice Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notification Preferences\n              </CardTitle>\n              <CardDescription>\n                Configure when and how you receive notifications\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"low-stock\">Low Stock Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">Get notified when products are running low</p>\n                  </div>\n                  <Switch\n                    id=\"low-stock\"\n                    checked={notificationSettings.lowStockAlerts}\n                    onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, lowStockAlerts: checked})}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"daily-reports\">Daily Reports</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receive daily sales summary reports</p>\n                  </div>\n                  <Switch\n                    id=\"daily-reports\"\n                    checked={notificationSettings.dailyReports}\n                    onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, dailyReports: checked})}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"transaction-alerts\">Transaction Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">Get alerts for large transactions</p>\n                  </div>\n                  <Switch\n                    id=\"transaction-alerts\"\n                    checked={notificationSettings.transactionAlerts}\n                    onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, transactionAlerts: checked})}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"email-notifications\">Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Send notifications to your email</p>\n                  </div>\n                  <Switch\n                    id=\"email-notifications\"\n                    checked={notificationSettings.emailNotifications}\n                    onCheckedChange={(checked) => setNotificationSettings({...notificationSettings, emailNotifications: checked})}\n                  />\n                </div>\n              </div>\n              \n              <Button onClick={saveNotificationSettings}>Save Notification Settings</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>General Settings</CardTitle>\n              <CardDescription>\n                Configure general application preferences\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">Currency</Label>\n                  <select\n                    id=\"currency\"\n                    className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                    value={generalSettings.currency}\n                    onChange={(e) => setGeneralSettings({...generalSettings, currency: e.target.value})}\n                  >\n                    <option value=\"INR\">INR (₹)</option>\n                    <option value=\"USD\">USD ($)</option>\n                    <option value=\"EUR\">EUR (€)</option>\n                    <option value=\"GBP\">GBP (£)</option>\n                  </select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timezone\">Timezone</Label>\n                  <select\n                    id=\"timezone\"\n                    className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                    value={generalSettings.timezone}\n                    onChange={(e) => setGeneralSettings({...generalSettings, timezone: e.target.value})}\n                  >\n                    <option value=\"Asia/Kolkata\">Asia/Kolkata</option>\n                    <option value=\"America/New_York\">America/New_York</option>\n                    <option value=\"Europe/London\">Europe/London</option>\n                    <option value=\"Asia/Tokyo\">Asia/Tokyo</option>\n                  </select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date-format\">Date Format</Label>\n                  <select\n                    id=\"date-format\"\n                    className=\"w-full p-2 border rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:focus:ring-blue-400 dark:focus:border-blue-400\"\n                    value={generalSettings.dateFormat}\n                    onChange={(e) => setGeneralSettings({...generalSettings, dateFormat: e.target.value})}\n                  >\n                    <option value=\"DD/MM/YYYY\">DD/MM/YYYY</option>\n                    <option value=\"MM/DD/YYYY\">MM/DD/YYYY</option>\n                    <option value=\"YYYY-MM-DD\">YYYY-MM-DD</option>\n                  </select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n                  <Input\n                    id=\"session-timeout\"\n                    type=\"number\"\n                    min=\"15\"\n                    max=\"480\"\n                    value={generalSettings.sessionTimeout}\n                    onChange={(e) => setGeneralSettings({...generalSettings, sessionTimeout: parseInt(e.target.value)})}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label htmlFor=\"auto-backup\">Auto Backup</Label>\n                  <p className=\"text-sm text-muted-foreground\">Automatically backup data daily</p>\n                </div>\n                <Switch\n                  id=\"auto-backup\"\n                  checked={generalSettings.autoBackup}\n                  onCheckedChange={(checked) => setGeneralSettings({...generalSettings, autoBackup: checked})}\n                />\n              </div>\n              \n              <Button onClick={saveGeneralSettings}>Save General Settings</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Settings;","size_bytes":44505},"client/src/pages/SubscriptionAdminDashboard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { SubscriptionPlan, CompanySubscription, SupportTicket } from '@/lib/subscription-types';\nimport { Company } from '@/lib/types';\nimport { \n  getSubscriptionPlans, \n  saveSubscriptionPlan, \n  getSubscribedCompanies, \n  saveSubscribedCompany,\n  assignSubscriptionToCompany,\n  getSupportTickets,\n  updateSupportTicketStatus,\n  getSubscriptionByCompany\n} from '@/lib/subscription-storage';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { PlusCircle, Edit } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function SubscriptionAdminDashboard() {\n  const [plans, setPlans] = useState<SubscriptionPlan[]>([]);\n  const [companies, setCompanies] = useState<Company[]>([]);\n  const [tickets, setTickets] = useState<SupportTicket[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [isPlanDialogOpen, setIsPlanDialogOpen] = useState(false);\n  const [isCompanyDialogOpen, setIsCompanyDialogOpen] = useState(false);\n  \n  const [currentPlan, setCurrentPlan] = useState<Partial<SubscriptionPlan>>({});\n  const [currentCompany, setCurrentCompany] = useState<Partial<Company>>({});\n  const [subscriptions, setSubscriptions] = useState<CompanySubscription[]>([]);\n  \n  useEffect(() => {\n    reloadData();\n  }, []);\n\n  const reloadData = async () => {\n    setIsLoading(true);\n    try {\n      const [plansData, companiesData, ticketsData, subscriptionsData] = await Promise.all([\n        getSubscriptionPlans(),\n        getSubscribedCompanies(),\n        getSupportTickets(),\n        getCompanySubscriptions()\n      ]);\n      setPlans(plansData);\n      setCompanies(companiesData);\n      setTickets(ticketsData);\n      setSubscriptions(subscriptionsData);\n    } catch (error) {\n      toast.error(\"Failed to load dashboard data.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSavePlan = async () => {\n    if (!currentPlan.name || !currentPlan.price || !currentPlan.durationDays) {\n      toast.error('Please fill in all plan details.');\n      return;\n    }\n    const planToSave: SubscriptionPlan = {\n      id: currentPlan.id || `plan_${Date.now()}`,\n      name: currentPlan.name,\n      price: Number(currentPlan.price),\n      durationDays: Number(currentPlan.durationDays),\n      features: (typeof currentPlan.features === 'string' ? currentPlan.features.split(',') : currentPlan.features) || [],\n      tokenLimit: Number(currentPlan.tokenLimit) || 0,\n    };\n    await saveSubscriptionPlan(planToSave);\n    toast.success('Subscription plan saved!');\n    setIsPlanDialogOpen(false);\n    await reloadData();\n  };\n\n  const handleSaveCompany = async () => {\n    if (!currentCompany.name || !currentCompany.email) {\n      toast.error('Please enter company name and email.');\n      return;\n    }\n    const companyToSave: Company = {\n        id: currentCompany.id || `comp_${Date.now()}`,\n        name: currentCompany.name,\n        email: currentCompany.email,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        companyId: currentCompany.id || `comp_${Date.now()}`,\n        phone: '',\n        address: '',\n        city: '',\n        state: '',\n        zipCode: '',\n        country: '',\n        taxId: '',\n        logoUrl: '',\n    };\n    await saveSubscribedCompany(companyToSave);\n    toast.success('Company saved!');\n    setIsCompanyDialogOpen(false);\n    await reloadData();\n  };\n\n  const handleAssignSubscription = async (companyId: string, planId: string) => {\n    if (!planId) {\n      toast.error('Please select a plan.');\n      return;\n    }\n    await assignSubscriptionToCompany(companyId, planId);\n    toast.success('Subscription assigned successfully!');\n    await reloadData();\n  };\n\n  const handleTicketStatusChange = async (ticketId: string, status: 'open' | 'in_progress' | 'closed') => {\n    await updateSupportTicketStatus(ticketId, status);\n    toast.success('Ticket status updated.');\n    await reloadData();\n  };\n  \n  const getCompanyPlanInfo = (companyId: string) => {\n    const subscription = subscriptions.find(s => s.companyId === companyId);\n    if (!subscription) return { name: 'No Plan', status: 'inactive' };\n    const plan = plans.find(p => p.id === subscription.planId);\n    return { name: plan?.name || 'Unknown Plan', status: subscription.status };\n  };\n\n  if (isLoading) {\n    return <div className=\"container mx-auto p-4\">Loading dashboard...</div>;\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-8\">\n      <h1 className=\"text-3xl font-bold\">Admin - Subscription Ecosystem</h1>\n\n      {/* Subscription Plans */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Subscription Plans</CardTitle>\n          <Dialog open={isPlanDialogOpen} onOpenChange={setIsPlanDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setCurrentPlan({})}>\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Add New Plan\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader><DialogTitle>Create/Edit Subscription Plan</DialogTitle></DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div><Label>Plan Name</Label><Input value={currentPlan.name || ''} onChange={e => setCurrentPlan({...currentPlan, name: e.target.value})} /></div>\n                <div><Label>Price</Label><Input type=\"number\" value={currentPlan.price || ''} onChange={e => setCurrentPlan({...currentPlan, price: Number(e.target.value)})} /></div>\n                <div><Label>Duration (Days)</Label><Input type=\"number\" value={currentPlan.durationDays || ''} onChange={e => setCurrentPlan({...currentPlan, durationDays: Number(e.target.value)})} /></div>\n                <div><Label>Features (comma-separated)</Label><Input value={Array.isArray(currentPlan.features) ? currentPlan.features.join(',') : ''} onChange={e => setCurrentPlan({...currentPlan, features: e.target.value.split(',')})} /></div>\n                <div><Label>Token Limit</Label><Input type=\"number\" value={currentPlan.tokenLimit || ''} onChange={e => setCurrentPlan({...currentPlan, tokenLimit: Number(e.target.value)})} /></div>\n                <Button onClick={handleSavePlan} className=\"w-full\">Save Plan</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader><TableRow><TableHead>Name</TableHead><TableHead>Price</TableHead><TableHead>Duration</TableHead><TableHead>Tokens</TableHead></TableRow></TableHeader>\n            <TableBody>\n              {plans.map(plan => (\n                <TableRow key={plan.id}>\n                  <TableCell>{plan.name}</TableCell>\n                  <TableCell>${plan.price.toFixed(2)}</TableCell>\n                  <TableCell>{plan.durationDays} days</TableCell>\n                  <TableCell>{plan.tokenLimit}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Companies */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle>Companies</CardTitle>\n          <Dialog open={isCompanyDialogOpen} onOpenChange={setIsCompanyDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => setCurrentCompany({})}>\n                <PlusCircle className=\"mr-2 h-4 w-4\" /> Add New Company\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader><DialogTitle>Create Company</DialogTitle></DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div><Label>Company Name</Label><Input value={currentCompany.name || ''} onChange={e => setCurrentCompany({...currentCompany, name: e.target.value})} /></div>\n                <div><Label>Company Email</Label><Input type=\"email\" value={currentCompany.email || ''} onChange={e => setCurrentCompany({...currentCompany, email: e.target.value})} /></div>\n                <Button onClick={handleSaveCompany} className=\"w-full\">Save Company</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader><TableRow><TableHead>Name</TableHead><TableHead>Email</TableHead><TableHead>Subscription</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\n            <TableBody>\n              {companies.map(company => {\n                const planInfo = getCompanyPlanInfo(company.id);\n                return (\n                  <TableRow key={company.id}>\n                    <TableCell>{company.name}</TableCell>\n                    <TableCell>{company.email}</TableCell>\n                    <TableCell><Badge variant={planInfo.status === 'active' ? 'default' : 'destructive'}>{planInfo.name}</Badge></TableCell>\n                    <TableCell>\n                      <select onChange={e => handleAssignSubscription(company.id, e.target.value)} className=\"p-1 border rounded text-sm\">\n                        <option value=\"\">Assign Plan</option>\n                        {plans.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}\n                      </select>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Support Tickets */}\n      <Card>\n        <CardHeader><CardTitle>Support Tickets</CardTitle></CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader><TableRow><TableHead>Company</TableHead><TableHead>Subject</TableHead><TableHead>Status</TableHead><TableHead>Actions</TableHead></TableRow></TableHeader>\n            <TableBody>\n              {tickets.map(ticket => (\n                <TableRow key={ticket.id}>\n                  <TableCell>{companies.find(c => c.id === ticket.companyId)?.name || 'N/A'}</TableCell>\n                  <TableCell>{ticket.subject}</TableCell>\n                  <TableCell><Badge variant={ticket.status === 'closed' ? 'secondary' : 'default'}>{ticket.status}</Badge></TableCell>\n                  <TableCell>\n                    <select value={ticket.status} onChange={e => handleTicketStatusChange(ticket.id, e.target.value as 'open' | 'in_progress' | 'closed')} className=\"p-1 border rounded text-sm\">\n                      <option value=\"open\">Open</option>\n                      <option value=\"in_progress\">In Progress</option>\n                      <option value=\"closed\">Closed</option>\n                    </select>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11277},"client/src/pages/SupportCenter.tsx":{"content":"import { useEffect, useMemo, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { getSupportTickets, createSupportTicket, sendSupportMessage, getConversationMessages } from '@/lib/storage';\nimport { toast } from '@/hooks/use-toast';\n\ninterface TicketLite {\n  id: string;\n  companyId?: string;\n  subject: string;\n  message: string;\n  status: 'open' | 'in_progress' | 'closed';\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport default function SupportCenter() {\n  const [tickets, setTickets] = useState<TicketLite[]>([]);\n  const [search, setSearch] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | TicketLite['status']>('all');\n  const [isNewTicketOpen, setIsNewTicketOpen] = useState(false);\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n\n  // Messaging\n  const [activeConversationId, setActiveConversationId] = useState<string | null>(null);\n  const [conversationMessages, setConversationMessages] = useState<any[]>([]);\n  const [newChatMessage, setNewChatMessage] = useState('');\n\n  useEffect(() => {\n    loadTickets();\n  }, []);\n\n  useEffect(() => {\n    if (activeConversationId) {\n      loadConversation(activeConversationId);\n    }\n  }, [activeConversationId]);\n\n  const loadTickets = async () => {\n    const list = await getSupportTickets();\n    setTickets(list as any);\n  };\n\n  const filtered = useMemo(() => {\n    return tickets.filter(t =>\n      (statusFilter === 'all' || t.status === statusFilter) &&\n      (search === '' || t.subject.toLowerCase().includes(search.toLowerCase()))\n    );\n  }, [tickets, search, statusFilter]);\n\n  const handleCreateTicket = async () => {\n    if (!subject || !message) return;\n    await createSupportTicket({ companyId: 'admin_company', subject, message, status: 'open' });\n    toast.success('Ticket created');\n    setIsNewTicketOpen(false);\n    setSubject('');\n    setMessage('');\n    await loadTickets();\n  };\n\n  const loadConversation = async (ticketId: string) => {\n    const msgs = await getConversationMessages(ticketId);\n    setConversationMessages(msgs);\n  };\n\n  const sendMessageToConversation = async () => {\n    if (!activeConversationId || !newChatMessage) return;\n    await sendSupportMessage({ conversationId: activeConversationId, sender: 'support', body: newChatMessage });\n    setNewChatMessage('');\n    await loadConversation(activeConversationId);\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold\">Support Center</h1>\n        <p className=\"text-sm text-muted-foreground\">Track tickets and chat with companies</p>\n      </div>\n\n      <Tabs defaultValue=\"tickets\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"tickets\">Tickets</TabsTrigger>\n          <TabsTrigger value=\"messages\">Messaging</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"tickets\" className=\"space-y-4\">\n          <div className=\"flex items-center gap-2\">\n            <Input placeholder=\"Search subject...\" value={search} onChange={e => setSearch(e.target.value)} className=\"max-w-sm\" />\n            <select className=\"border rounded p-2 text-sm\" value={statusFilter} onChange={e => setStatusFilter(e.target.value as any)}>\n              <option value=\"all\">All</option>\n              <option value=\"open\">Open</option>\n              <option value=\"in_progress\">In Progress</option>\n              <option value=\"closed\">Closed</option>\n            </select>\n            <Dialog open={isNewTicketOpen} onOpenChange={setIsNewTicketOpen}>\n              <DialogTrigger asChild>\n                <Button size=\"sm\">New Ticket</Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader><DialogTitle>Create Ticket</DialogTitle></DialogHeader>\n                <div className=\"space-y-3\">\n                  <Input placeholder=\"Subject\" value={subject} onChange={e => setSubject(e.target.value)} />\n                  <Textarea placeholder=\"Describe the issue\" rows={6} value={message} onChange={e => setMessage(e.target.value)} />\n                  <div className=\"flex justify-end\"><Button onClick={handleCreateTicket}>Create</Button></div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>ID</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Action</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filtered.map(t => (\n                    <TableRow key={t.id}>\n                      <TableCell>{t.id}</TableCell>\n                      <TableCell>{t.subject}</TableCell>\n                      <TableCell className=\"capitalize\">{t.status.replace('_', ' ')}</TableCell>\n                      <TableCell>{new Date(t.createdAt).toLocaleString()}</TableCell>\n                      <TableCell>\n                        <Button size=\"sm\" variant=\"outline\" onClick={() => setActiveConversationId(t.id)}>Open Chat</Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"messages\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card className=\"md:col-span-1\">\n              <CardHeader><CardTitle>Conversations</CardTitle></CardHeader>\n              <CardContent className=\"space-y-2\">\n                {tickets.map(t => (\n                  <Button key={t.id} variant={activeConversationId === t.id ? 'default' : 'outline'} className=\"w-full justify-start\" onClick={() => setActiveConversationId(t.id)}>\n                    {t.subject}\n                  </Button>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"md:col-span-2\">\n              <CardHeader><CardTitle>Chat</CardTitle></CardHeader>\n              <CardContent>\n                {activeConversationId ? (\n                  <div className=\"flex flex-col h-[420px]\">\n                    <div className=\"flex-1 overflow-auto space-y-2 border rounded p-2 mb-2 bg-background\">\n                      {conversationMessages.map((m, idx) => (\n                        <div key={idx} className={`max-w-[70%] p-2 rounded ${m.sender === 'support' ? 'bg-blue-100 ml-auto' : 'bg-gray-100'}`}>\n                          <div className=\"text-xs text-muted-foreground\">{m.sender}</div>\n                          <div className=\"text-sm\">{m.body}</div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Input placeholder=\"Type a message\" value={newChatMessage} onChange={e => setNewChatMessage(e.target.value)} />\n                      <Button onClick={sendMessageToConversation}>Send</Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-sm text-muted-foreground\">Select a conversation to start chatting.</div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n\n","size_bytes":7991},"client/src/pages/Transactions.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { Transaction } from '@/lib/types';\nimport { getTransactions, saveTransaction, updateTransaction } from '@/lib/storage';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useSettings } from '@/hooks/useSettings';\nimport { thermalPrinter, ReceiptData } from '@/lib/thermalPrinter';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Calendar, Search, Filter, Receipt, Printer, Eye, Edit, Save, X, Download, SlidersHorizontal } from 'lucide-react';\nimport * as XLSX from 'xlsx';\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth, isWithinInterval, parseISO } from 'date-fns';\nimport { toast } from '@/hooks/use-toast';\n\nexport default function Transactions() {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  const [paymentFilter, setPaymentFilter] = useState<'all' | 'cash' | 'card'>('all');\n  const [loading, setLoading] = useState(true);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);\n  const [reprintCount, setReprintCount] = useState(0);\n  const [isReprintDialogOpen, setIsReprintDialogOpen] = useState(false);\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n  const [exportUseCurrentView, setExportUseCurrentView] = useState(true);\n  const [exportFromDate, setExportFromDate] = useState<string>('');\n  const [exportToDate, setExportToDate] = useState<string>('');\n  const [savedViews, setSavedViews] = useState<Array<{ name: string; dateFilter: typeof dateFilter; paymentFilter: typeof paymentFilter; searchQuery: string; columns: Record<string, boolean>; }>>([]);\n\n  const [visibleColumns, setVisibleColumns] = useState<Record<string, boolean>>({\n    id: true,\n    dateTime: true,\n    customer: true,\n    items: true,\n    paymentMethod: true,\n    paymentDetails: true,\n    employee: true,\n    total: true,\n    status: true,\n    actions: true,\n  });\n  \n  const { company, employee } = useAuth();\n  const { companySettings, printSettings } = useSettings();\n\n  // Test function to create a sample transaction\n  const createTestTransaction = async () => {\n    if (!company?.id) {\n      toast({\n        title: \"Error\",\n        description: \"No company ID available\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const testTransaction: Transaction = {\n        id: `TEST-${Date.now()}`,\n        companyId: company.id,\n        employeeId: employee?.id || 'test-employee',\n        employeeName: employee?.name || 'Test Employee',\n        customerName: 'Test Customer',\n        customerPhone: '1234567890',\n        items: [\n          {\n            productId: 'test-product-1',\n            name: 'Test Product 1',\n            price: 100.00,\n            quantity: 2,\n            total: 200.00\n          },\n          {\n            productId: 'test-product-2',\n            name: 'Test Product 2',\n            price: 50.00,\n            quantity: 1,\n            total: 50.00\n          }\n        ],\n        subtotal: 250.00,\n        tax: 45.00,\n        discount: 0,\n        total: 295.00,\n        paymentMethod: 'cash',\n        paymentDetails: {\n          cashAmount: 300.00,\n          change: 5.00\n        },\n        timestamp: new Date(),\n        status: 'completed'\n      };\n\n      console.log('Creating test transaction:', testTransaction);\n      const savedTransaction = await saveTransaction(testTransaction);\n      console.log('Test transaction saved:', savedTransaction);\n      \n      toast({\n        title: \"Success\",\n        description: \"Test transaction created successfully\",\n      });\n\n      // Dispatch event to notify other components\n      window.dispatchEvent(new CustomEvent('transactionUpdated'));\n      \n      // Reload transactions\n      const data = await getTransactions(company.id);\n      setTransactions(Array.isArray(data) ? data : []);\n    } catch (error) {\n      console.error('Error creating test transaction:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create test transaction\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    const loadTransactions = async () => {\n      if (!company) return;\n      \n      try {\n        setLoading(true);\n        const data = await getTransactions(company?.id);\n        console.log('Loading transactions for company:', company?.id);\n        console.log('Loaded transactions:', data, 'Type:', typeof data, 'IsArray:', Array.isArray(data));\n        console.log('Transaction count:', Array.isArray(data) ? data.length : 0);\n        \n        // Ensure we always have an array\n        const transactionArray = Array.isArray(data) ? data : [];\n        setTransactions(transactionArray);\n      } catch (error) {\n        console.error('Error loading transactions:', error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to load transactions\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadTransactions();\n  }, [company]);\n\n  // Load saved views and column visibility preferences\n  useEffect(() => {\n    try {\n      const storedViews = localStorage.getItem('transactionsSavedViews');\n      if (storedViews) setSavedViews(JSON.parse(storedViews));\n      const storedCols = localStorage.getItem('transactionsVisibleColumns');\n      if (storedCols) setVisibleColumns(JSON.parse(storedCols));\n    } catch {}\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('transactionsVisibleColumns', JSON.stringify(visibleColumns));\n  }, [visibleColumns]);\n\n  // Add refresh function that can be called from other components\n  const refreshTransactions = async () => {\n    if (!company) return;\n    \n    try {\n      setLoading(true);\n      const data = await getTransactions(company?.id);\n      const transactionArray = Array.isArray(data) ? data : [];\n      setTransactions(transactionArray);\n    } catch (error) {\n      console.error('Error refreshing transactions:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to refresh transactions\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Listen for transaction updates from other components\n  useEffect(() => {\n    const handleTransactionUpdate = () => {\n      refreshTransactions();\n    };\n\n    window.addEventListener('transactionUpdated', handleTransactionUpdate);\n    return () => {\n      window.removeEventListener('transactionUpdated', handleTransactionUpdate);\n    };\n  }, [company]);\n\n  // Reprint function with proper labeling\n  const handleReprint = async (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n    setIsReprintDialogOpen(true);\n  };\n\n  // Confirm reprint\n  const confirmReprint = async () => {\n    if (!selectedTransaction) return;\n    \n    const newReprintCount = reprintCount + 1;\n    setReprintCount(newReprintCount);\n    setIsReprintDialogOpen(false);\n    \n    const transaction = selectedTransaction;\n    \n    // Prepare receipt data for thermal printer\n    const receiptData: ReceiptData = {\n      companyName: companySettings?.name || 'ACE Business',\n      companyAddress: companySettings?.address || '',\n      companyPhone: companySettings?.phone || '',\n      companyTaxId: companySettings?.taxId || '',\n      receiptNumber: transaction.id,\n      date: new Date(transaction.timestamp).toLocaleString(),\n      cashierName: transaction.employeeName || 'Unknown',\n      customerName: transaction.customerName || 'Walk-in Customer',\n      items: transaction.items.map(item => ({\n        name: item.name,\n        quantity: item.quantity,\n        price: item.price,\n        total: item.total\n      })),\n      subtotal: transaction.subtotal,\n      tax: transaction.tax,\n      total: transaction.total,\n      paymentMethod: transaction.paymentMethod,\n      paymentDetails: transaction.paymentDetails,\n      isReprint: true,\n      reprintCount: newReprintCount\n    };\n\n    // Print receipt using thermal printer service\n    const printSuccess = await thermalPrinter.printReceipt(receiptData);\n    \n    if (printSuccess) {\n      toast({\n        title: \"Success\",\n        description: `Receipt reprinted successfully! (Reprint #${newReprintCount})`,\n      });\n    } else {\n      toast({\n        title: \"Warning\",\n        description: \"Reprint failed - check printer connection\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewTransaction = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditTransaction = (transaction: Transaction) => {\n    setEditingTransaction({ ...transaction });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveTransaction = async () => {\n    if (!editingTransaction) return;\n\n    try {\n      // Save transaction with cloud backup\n              await updateTransaction(editingTransaction.id, editingTransaction);\n      \n      // Update local state\n      setTransactions(prev => prev.map(t => \n        t.id === editingTransaction.id ? editingTransaction : t\n      ));\n      \n      setIsEditDialogOpen(false);\n      setEditingTransaction(null);\n      \n      toast({\n        title: \"Transaction Updated\",\n        description: \"Transaction saved and backed up to cloud successfully!\",\n      });\n    } catch (error) {\n      console.error('Error updating transaction:', error);\n      toast({\n        title: \"Update Error\",\n        description: \"Transaction saved locally but cloud backup failed\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const filteredTransactions = useMemo(() => {\n    let filtered = transactions;\n\n    // Search filter\n    if (searchQuery) {\n      filtered = filtered.filter(transaction =>\n        transaction.id.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.customerName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        transaction.employeeName?.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n\n    // Date filter\n    if (dateFilter !== 'all') {\n      const now = new Date();\n      let startDate: Date;\n      let endDate: Date;\n\n      switch (dateFilter) {\n        case 'today':\n          startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n          endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);\n          break;\n        case 'week':\n          startDate = startOfWeek(now);\n          endDate = endOfWeek(now);\n          break;\n        case 'month':\n          startDate = startOfMonth(now);\n          endDate = endOfMonth(now);\n          break;\n        default:\n          startDate = new Date(0);\n          endDate = now;\n      }\n\n      filtered = filtered.filter(transaction => {\n        const transactionDate = new Date(transaction.timestamp);\n        return isWithinInterval(transactionDate, { start: startDate, end: endDate });\n      });\n    }\n\n    // Payment method filter\n    if (paymentFilter !== 'all') {\n      filtered = filtered.filter(transaction => transaction.paymentMethod === paymentFilter);\n    }\n\n    return filtered.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n  }, [transactions, searchQuery, dateFilter, paymentFilter]);\n\n  const totalAmount = filteredTransactions.reduce((sum, transaction) => sum + transaction.total, 0);\n  const totalSubtotal = filteredTransactions.reduce((sum, t) => sum + (t.subtotal || 0), 0);\n  const totalTax = filteredTransactions.reduce((sum, t) => sum + (t.tax || 0), 0);\n\n  const runExport = (rows: any[], sheetName: string, fileName: string) => {\n    const worksheet = XLSX.utils.json_to_sheet(rows);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n    XLSX.writeFile(workbook, fileName);\n  };\n\n  const exportTransactionsToExcel = () => {\n    try {\n      const rows = filteredTransactions.map(t => ({\n        ID: t.id,\n        Date: new Date(t.timestamp).toLocaleString(),\n        Customer: t.customerName || 'Walk-in Customer',\n        Employee: t.employeeName || 'System',\n        Items: t.items?.length || 0,\n        Subtotal: t.subtotal,\n        Tax: t.tax,\n        Discount: t.discount || 0,\n        Total: t.total,\n        PaymentMethod: t.paymentMethod,\n        Status: t.status\n      }));\n      runExport(rows, 'Transactions', 'transactions.xlsx');\n    } catch (error) {\n      console.error('Export transactions failed:', error);\n      toast({ title: 'Export Failed', description: 'Could not export transactions', variant: 'destructive' });\n    }\n  };\n\n  const exportWithWizard = () => {\n    try {\n      const source = exportUseCurrentView ? filteredTransactions : transactions;\n      let ranged = source;\n      if (exportFromDate && exportToDate) {\n        const start = new Date(exportFromDate);\n        const end = new Date(exportToDate);\n        ranged = source.filter(t => {\n          const d = new Date(t.timestamp);\n          return d >= start && d <= end;\n        });\n      }\n      const rows = ranged.map(t => {\n        const base: Record<string, any> = {};\n        if (visibleColumns.id) base.ID = t.id;\n        if (visibleColumns.dateTime) base.Date = new Date(t.timestamp).toLocaleString();\n        if (visibleColumns.customer) base.Customer = t.customerName || 'Walk-in Customer';\n        if (visibleColumns.employee) base.Employee = t.employeeName || 'System';\n        if (visibleColumns.items) base.Items = t.items?.length || 0;\n        if (visibleColumns.paymentMethod) base.PaymentMethod = t.paymentMethod;\n        if (visibleColumns.paymentDetails) base.Paid = t.total;\n        if (visibleColumns.total) base.Total = t.total;\n        if (visibleColumns.status) base.Status = t.status;\n        base.Subtotal = t.subtotal;\n        base.Tax = t.tax;\n        base.Discount = t.discount || 0;\n        return base;\n      });\n      runExport(rows, 'Transactions', 'transactions-export.xlsx');\n      setIsExportDialogOpen(false);\n    } catch (error) {\n      console.error('Export wizard failed:', error);\n      toast({ title: 'Export Failed', description: 'Could not export with selected options', variant: 'destructive' });\n    }\n  };\n\n  const saveCurrentView = (name: string) => {\n    const newView = { name, dateFilter, paymentFilter, searchQuery, columns: visibleColumns };\n    const updated = [...savedViews.filter(v => v.name !== name), newView];\n    setSavedViews(updated);\n    try { localStorage.setItem('transactionsSavedViews', JSON.stringify(updated)); } catch {}\n    toast({ title: 'View Saved', description: `Saved view \"${name}\"` });\n  };\n\n  const applySavedView = (name: string) => {\n    const v = savedViews.find(x => x.name === name);\n    if (!v) return;\n    setSearchQuery(v.searchQuery);\n    setDateFilter(v.dateFilter);\n    setPaymentFilter(v.paymentFilter);\n    setVisibleColumns(v.columns);\n    toast({ title: 'View Applied', description: `Applied view \"${name}\"` });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n            <span>Loading transactions...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6 bg-gradient-to-br from-blue-50 to-indigo-50 min-h-screen\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            Transactions\n          </h1>\n          <p className=\"text-gray-600 mt-2 text-lg\">View and manage all sales transactions</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\" className=\"hidden sm:flex items-center gap-2\">\n                <SlidersHorizontal className=\"w-4 h-4\" />\n                Columns\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-48\">\n              {Object.keys(visibleColumns).map((key) => (\n                <DropdownMenuCheckboxItem\n                  key={key}\n                  checked={visibleColumns[key]}\n                  onCheckedChange={(val) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(val) }))}\n                >\n                  {key.charAt(0).toUpperCase() + key.slice(1)}\n                </DropdownMenuCheckboxItem>\n              ))}\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"outline\" size=\"sm\">Views</Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              {savedViews.length === 0 && (\n                <div className=\"px-3 py-2 text-sm text-muted-foreground\">No saved views</div>\n              )}\n              {savedViews.map(v => (\n                <DropdownMenuCheckboxItem\n                  key={v.name}\n                  checked={false}\n                  onSelect={(e) => { e.preventDefault(); applySavedView(v.name); }}\n                >\n                  {v.name}\n                </DropdownMenuCheckboxItem>\n              ))}\n              <div className=\"px-3 py-2\">\n                <div className=\"flex gap-2\">\n                  <Input placeholder=\"View name\" className=\"h-8\" onKeyDown={(e) => {\n                    if (e.key === 'Enter') {\n                      const name = (e.target as HTMLInputElement).value.trim();\n                      if (name) { saveCurrentView(name); (e.target as HTMLInputElement).value = ''; }\n                    }\n                  }} />\n                  <Button size=\"sm\" onClick={() => {\n                    const el = document.querySelector<HTMLInputElement>('input[placeholder=\\\"View name\\\"]');\n                    const name = el?.value.trim() || '';\n                    if (name) { saveCurrentView(name); if (el) el.value = ''; }\n                  }}>Save</Button>\n                </div>\n              </div>\n            </DropdownMenuContent>\n          </DropdownMenu>\n\n          <Button \n            onClick={() => setIsExportDialogOpen(true)}\n            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export\n          </Button>\n          <div className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-3 rounded-lg shadow-lg\">\n            <div className=\"text-sm font-medium\">Total Revenue</div>\n            <div className=\"text-2xl font-bold\">₹{totalAmount.toFixed(2)}</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-xl\">\n        <CardHeader className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Filter className=\"w-5 h-5\" />\n            Filters\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-wrap gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search transactions...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200\"\n                />\n              </div>\n            </div>\n            \n            <Select value={dateFilter} onValueChange={(value) => setDateFilter(value as 'all' | 'today' | 'week' | 'month')}>\n              <SelectTrigger className=\"w-48 border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200\">\n                <SelectValue placeholder=\"Filter by date\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Time</SelectItem>\n                <SelectItem value=\"today\">Today</SelectItem>\n                <SelectItem value=\"week\">This Week</SelectItem>\n                <SelectItem value=\"month\">This Month</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={paymentFilter} onValueChange={(value) => setPaymentFilter(value as 'all' | 'cash' | 'card')}>\n              <SelectTrigger className=\"w-48 border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200\">\n                <SelectValue placeholder=\"Payment method\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Methods</SelectItem>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"card\">Card</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transactions Table */}\n      <Card className=\"bg-white/80 backdrop-blur-sm border-0 shadow-xl\">\n        <CardHeader className=\"bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-t-lg\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Receipt className=\"w-5 h-5\" />\n            Transaction History\n          </CardTitle>\n          <CardDescription className=\"text-green-100\">\n            Showing {filteredTransactions.length} transactions\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          {filteredTransactions.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"bg-gradient-to-br from-gray-100 to-gray-200 rounded-full w-24 h-24 mx-auto mb-6 flex items-center justify-center\">\n                <Receipt className=\"w-12 h-12 text-gray-400\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No transactions found</h3>\n              <p className=\"text-gray-500\">Try adjusting your filters or search terms</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table className=\"border-collapse\">\n                <TableHeader>\n                  <TableRow className=\"bg-gradient-to-r from-gray-50 to-gray-100 border-b-2 border-gray-200\">\n                    {visibleColumns.id && <TableHead className=\"font-bold text-gray-700 py-4\">Transaction ID</TableHead>}\n                    {visibleColumns.dateTime && <TableHead className=\"font-bold text-gray-700 py-4\">Date & Time</TableHead>}\n                    {visibleColumns.customer && <TableHead className=\"font-bold text-gray-700 py-4\">Customer</TableHead>}\n                    {visibleColumns.items && <TableHead className=\"font-bold text-gray-700 py-4\">Items</TableHead>}\n                    {visibleColumns.paymentMethod && <TableHead className=\"font-bold text-gray-700 py-4\">Payment Method</TableHead>}\n                    {visibleColumns.paymentDetails && <TableHead className=\"font-bold text-gray-700 py-4\">Payment Details</TableHead>}\n                    {visibleColumns.employee && <TableHead className=\"font-bold text-gray-700 py-4\">Employee</TableHead>}\n                    {visibleColumns.total && <TableHead className=\"font-bold text-gray-700 py-4 text-right\">Total</TableHead>}\n                    {visibleColumns.status && <TableHead className=\"font-bold text-gray-700 py-4\">Status</TableHead>}\n                    {visibleColumns.actions && <TableHead className=\"font-bold text-gray-700 py-4 text-center\">Actions</TableHead>}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTransactions.map((transaction) => (\n                    <TableRow key={transaction.id}>\n                      {visibleColumns.id && (\n                        <TableCell className=\"font-mono text-sm\">\n                          {transaction.id.slice(-8)}\n                        </TableCell>\n                      )}\n                      {visibleColumns.dateTime && (\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div>{format(new Date(transaction.timestamp), 'MMM dd, yyyy')}</div>\n                            <div className=\"text-muted-foreground\">\n                              {format(new Date(transaction.timestamp), 'hh:mm a')}\n                            </div>\n                          </div>\n                        </TableCell>\n                      )}\n                      {visibleColumns.customer && (\n                        <TableCell>\n                          {transaction.customerName || 'Walk-in Customer'}\n                        </TableCell>\n                      )}\n                      {visibleColumns.items && (\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {transaction.items.length} item{transaction.items.length !== 1 ? 's' : ''}\n                          </div>\n                        </TableCell>\n                      )}\n                      {visibleColumns.paymentMethod && (\n                        <TableCell>\n                          <Badge variant={transaction.paymentMethod === 'cash' ? 'default' : 'secondary'}>\n                            {transaction.paymentMethod?.toUpperCase() || 'UNKNOWN'}\n                          </Badge>\n                        </TableCell>\n                      )}\n                      {visibleColumns.paymentDetails && (\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            <div>Paid: ₹{transaction.total.toFixed(2)}</div>\n                            {transaction.paymentMethod === 'cash' && transaction.paymentDetails?.cashAmount && (\n                              <div className=\"text-muted-foreground\">\n                                Cash: ₹{transaction.paymentDetails.cashAmount.toFixed(2)}\n                              </div>\n                            )}\n                            {transaction.paymentMethod === 'card' && transaction.paymentDetails?.cardAmount && (\n                              <div className=\"text-muted-foreground\">\n                                Card: ₹{transaction.paymentDetails.cardAmount.toFixed(2)}\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                      )}\n                      {visibleColumns.employee && (\n                        <TableCell>\n                          {transaction.employeeName || 'System'}\n                        </TableCell>\n                      )}\n                      {visibleColumns.total && (\n                        <TableCell className=\"text-right font-semibold\">\n                          ₹{transaction.total.toFixed(2)}\n                        </TableCell>\n                      )}\n                      {visibleColumns.status && (\n                        <TableCell>\n                          <Badge variant={\n                            transaction.status === 'completed' ? 'default' :\n                            transaction.status === 'refunded' ? 'destructive' : 'secondary'\n                          }>\n                            {transaction.status}\n                          </Badge>\n                        </TableCell>\n                      )}\n                      {visibleColumns.actions && (\n                        <TableCell className=\"text-center py-4\">\n                          <div className=\"flex items-center justify-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleViewTransaction(transaction)}\n                              className=\"h-9 w-9 p-0 hover:bg-blue-50 hover:text-blue-600 transition-colors\"\n                              title=\"View Details\"\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleReprint(transaction)}\n                              className=\"h-9 w-9 p-0 hover:bg-green-50 hover:text-green-600 transition-colors\"\n                              title=\"Reprint Receipt\"\n                            >\n                              <Printer className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditTransaction(transaction)}\n                              className=\"h-9 w-9 p-0 hover:bg-orange-50 hover:text-orange-600 transition-colors\"\n                              title=\"Edit Transaction\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      )}\n                    </TableRow>\n                  ))}\n                  {/* Totals footer row */}\n                  <TableRow className=\"bg-gray-50\">\n                    {visibleColumns.id && <TableCell className=\"font-semibold\">Totals</TableCell>}\n                    {visibleColumns.dateTime && <TableCell />}\n                    {visibleColumns.customer && <TableCell />}\n                    {visibleColumns.items && (\n                      <TableCell className=\"font-semibold\">{filteredTransactions.reduce((s, t) => s + (t.items?.length || 0), 0)} items</TableCell>\n                    )}\n                    {visibleColumns.paymentMethod && <TableCell />}\n                    {visibleColumns.paymentDetails && (\n                      <TableCell className=\"font-semibold\">Subtotal ₹{totalSubtotal.toFixed(2)} | Tax ₹{totalTax.toFixed(2)}</TableCell>\n                    )}\n                    {visibleColumns.employee && <TableCell />}\n                    {visibleColumns.total && (\n                      <TableCell className=\"text-right font-bold\">₹{totalAmount.toFixed(2)}</TableCell>\n                    )}\n                    {visibleColumns.status && <TableCell />}\n                    {visibleColumns.actions && <TableCell />}\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* View Transaction Dialog */}\n      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Transaction Details</DialogTitle>\n          </DialogHeader>\n          {selectedTransaction && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"font-semibold\">Transaction ID</Label>\n                  <p className=\"text-sm text-muted-foreground\">{selectedTransaction.id}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Date & Time</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {format(new Date(selectedTransaction.timestamp), 'MMM dd, yyyy hh:mm a')}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Customer</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedTransaction.customerName || 'Walk-in Customer'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Employee</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedTransaction.employeeName || 'System'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Payment Method</Label>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {selectedTransaction.paymentMethod?.toUpperCase()}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Status</Label>\n                  <Badge variant={\n                    selectedTransaction.status === 'completed' ? 'default' :\n                    selectedTransaction.status === 'refunded' ? 'destructive' : 'secondary'\n                  }>\n                    {selectedTransaction.status}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <Label className=\"font-semibold\">Items</Label>\n                <div className=\"mt-2 border rounded-lg\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Item</TableHead>\n                        <TableHead>Quantity</TableHead>\n                        <TableHead>Price</TableHead>\n                        <TableHead className=\"text-right\">Total</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {selectedTransaction.items.map((item, idx) => (\n                        <TableRow key={idx}>\n                          <TableCell>{item.name}</TableCell>\n                          <TableCell>{item.quantity}</TableCell>\n                          <TableCell>₹{item.price.toFixed(2)}</TableCell>\n                          <TableCell className=\"text-right\">₹{(item.price * item.quantity).toFixed(2)}</TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n                <div>\n                  <Label className=\"font-semibold\">Subtotal</Label>\n                  <p className=\"text-lg font-bold\">₹{selectedTransaction.subtotal.toFixed(2)}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Tax</Label>\n                  <p className=\"text-lg font-bold\">₹{selectedTransaction.tax.toFixed(2)}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Total</Label>\n                  <p className=\"text-lg font-bold\">₹{selectedTransaction.total.toFixed(2)}</p>\n                </div>\n              </div>\n              \n              {selectedTransaction.notes && (\n                <div>\n                  <Label className=\"font-semibold\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">{selectedTransaction.notes}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Transaction Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Transaction</DialogTitle>\n          </DialogHeader>\n          {editingTransaction && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"customerName\">Customer Name</Label>\n                  <Input\n                    id=\"customerName\"\n                    value={editingTransaction.customerName || ''}\n                    onChange={(e) => setEditingTransaction({\n                      ...editingTransaction,\n                      customerName: e.target.value\n                    })}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"paymentMethod\">Payment Method</Label>\n                  <Select\n                    value={editingTransaction.paymentMethod || 'cash'}\n                    onValueChange={(value) => setEditingTransaction({\n                      ...editingTransaction,\n                      paymentMethod: value\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"card\">Card</SelectItem>\n                      <SelectItem value=\"wallet\">Wallet</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={editingTransaction.status || 'completed'}\n                    onValueChange={(value) => setEditingTransaction({\n                      ...editingTransaction,\n                      status: value\n                    })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"refunded\">Refunded</SelectItem>\n                      <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"total\">Total Amount</Label>\n                  <Input\n                    id=\"total\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingTransaction.total}\n                    onChange={(e) => setEditingTransaction({\n                      ...editingTransaction,\n                      total: parseFloat(e.target.value) || 0\n                    })}\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={editingTransaction.notes || ''}\n                  onChange={(e) => setEditingTransaction({\n                    ...editingTransaction,\n                    notes: e.target.value\n                  })}\n                  placeholder=\"Add any additional notes...\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setEditingTransaction(null);\n                  }}\n                >\n                  Cancel\n                </Button>\n                <Button onClick={handleSaveTransaction}>\n                  <Save className=\"h-4 w-4 mr-2\" />\n                  Save Changes\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Reprint Confirmation Dialog */}\n      <Dialog open={isReprintDialogOpen} onOpenChange={setIsReprintDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n              <Printer className=\"h-5 w-5\" />\n              Reprint Receipt\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 p-4 rounded-lg border border-green-200\">\n              <p className=\"text-gray-700 mb-2\">\n                Are you sure you want to reprint the receipt for transaction:\n              </p>\n              <div className=\"font-mono text-sm bg-white p-2 rounded border\">\n                {selectedTransaction?.id.slice(-8)}\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                Customer: <span className=\"font-medium\">{selectedTransaction?.customerName || 'Walk-in Customer'}</span>\n              </p>\n              <p className=\"text-sm text-gray-600\">\n                Amount: <span className=\"font-bold text-green-600\">₹{selectedTransaction?.total.toFixed(2)}</span>\n              </p>\n            </div>\n            \n            <div className=\"flex justify-end gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsReprintDialogOpen(false)}\n                className=\"border-gray-300 hover:bg-gray-50\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={confirmReprint}\n                className=\"bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Reprint\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Export Wizard */}\n      <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Export Transactions</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <Checkbox id=\"currentView\" checked={exportUseCurrentView} onCheckedChange={(v) => setExportUseCurrentView(Boolean(v))} />\n              <label htmlFor=\"currentView\" className=\"text-sm\">Export current view (respects filters)</label>\n            </div>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div>\n                <Label>Date from</Label>\n                <Input type=\"date\" value={exportFromDate} onChange={(e) => setExportFromDate(e.target.value)} />\n              </div>\n              <div>\n                <Label>Date to</Label>\n                <Input type=\"date\" value={exportToDate} onChange={(e) => setExportToDate(e.target.value)} />\n              </div>\n            </div>\n            <div>\n              <div className=\"font-medium mb-2\">Columns</div>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Object.keys(visibleColumns).filter(k => k !== 'actions').map((key) => (\n                  <label key={key} className=\"flex items-center gap-2 text-sm\">\n                    <Checkbox checked={visibleColumns[key]} onCheckedChange={(v) => setVisibleColumns(prev => ({ ...prev, [key]: Boolean(v) }))} />\n                    {key.charAt(0).toUpperCase() + key.slice(1)}\n                  </label>\n                ))}\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsExportDialogOpen(false)}>Cancel</Button>\n              <Button onClick={exportWithWizard}>\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":44506},"client/src/pages/Unauthorized.tsx":{"content":"import React from 'react';\nimport { Link } from 'wouter';\nimport { Shield, ArrowLeft, Home } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function Unauthorized() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-red-100 dark:bg-red-900 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"w-8 h-8 text-red-600 dark:text-red-400\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Access Denied\n          </CardTitle>\n          <CardDescription className=\"text-gray-600 dark:text-gray-400\">\n            You don't have permission to access this page\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-center text-gray-600 dark:text-gray-400\">\n            The page you're trying to access requires specific permissions that your account doesn't have.\n          </p>\n          \n          <div className=\"flex flex-col gap-2\">\n            <Button asChild className=\"w-full\">\n              <Link to=\"/\">\n                <Home className=\"w-4 h-4 mr-2\" />\n                Go to Dashboard\n              </Link>\n            </Button>\n            \n            <Button variant=\"outline\" asChild className=\"w-full\">\n              <Link to=\"/login\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Login\n              </Link>\n            </Button>\n          </div>\n          \n          <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\n            <p>If you believe this is an error, please contact your administrator.</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2036},"client/src/components/import/ExcelImport.tsx":{"content":"import { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Upload, FileSpreadsheet, CheckCircle, XCircle } from 'lucide-react';\nimport { toast } from '@/hooks/use-toast';\nimport { Product, Customer } from '@/lib/types';\nimport { saveProduct, saveCustomer } from '@/lib/storage';\n\ninterface ExcelImportProps {\n  type: 'products' | 'customers';\n  onImportComplete?: () => void;\n}\n\nexport const ExcelImport = ({ type, onImportComplete }: ExcelImportProps) => {\n  const [uploading, setUploading] = useState(false);\n  const [results, setResults] = useState<{ success: number; errors: string[] } | null>(null);\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setUploading(true);\n    setResults(null);\n\n    try {\n      const data = await file.arrayBuffer();\n      const workbook = XLSX.read(data);\n      const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n      const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n      let success = 0;\n      const errors: string[] = [];\n\n      const UOM_OPTIONS = [\n        'UNT', 'TON', 'TBS', 'SQY', 'SQM', 'SQF', 'SET', 'ROL', 'QTL', 'PCS', 'PAC', 'NOS', 'MTR', 'MLT', 'KLR', 'KGS', 'GMS', 'DOZ', 'CTN', 'CMS', 'CCM', 'CBM', 'CAN', 'BUN', 'BTL', 'BOX', 'BKL', 'BDL', 'BAL', 'BAG'\n      ];\n      const YN_OPTIONS = ['Y', 'N'];\n      const TYPE_OPTIONS = ['Product', 'Service'];\n\n      if (type === 'products') {\n        for (const [rowNum, row] of jsonData.entries()) {\n          // Trim all string fields\n          Object.keys(row).forEach(key => {\n            if (typeof row[key] === 'string') row[key] = row[key].trim();\n          });\n          // Enforce required fields\n          const requiredFields = [\n            'Type* (Product / Service)', 'Group* (Max. 50 Chars)', 'Brand* (Max. 50 Chars)',\n            'Product Name* (Max. 50 Chars)', 'Sale Price* (Max. 10 Chars) (Numeric)', 'Unit (Max. 10 Chars)'\n          ];\n          const missing = requiredFields.filter(f => !row[f] || row[f] === '');\n          if (missing.length) {\n            errors.push(`Row ${rowNum + 2}: Missing required fields: ${missing.join(', ')}`);\n            continue;\n          }\n          // Validate Type\n          if (!TYPE_OPTIONS.includes(row['Type* (Product / Service)'])) {\n            errors.push(`Row ${rowNum + 2}: Invalid Type (must be Product or Service)`);\n            continue;\n          }\n          // Validate Unit\n          if (!UOM_OPTIONS.includes(row['Unit (Max. 10 Chars)'])) {\n            errors.push(`Row ${rowNum + 2}: Invalid Unit (must be one of ${UOM_OPTIONS.join(', ')})`);\n            continue;\n          }\n          // Validate all Y/N columns, default to 'N' if missing\n          for (const col of [\n            'Print Description (Y/N)', 'One Click Sale (Y/N)', 'Enable Tracking (Y/N)', 'Print Serial (Y/N)', 'Not For Sale (Y/N)'\n          ]) {\n            if (!row[col]) row[col] = 'N';\n            if (!YN_OPTIONS.includes(row[col])) {\n              errors.push(`Row ${rowNum + 2}: Invalid value for ${col} (must be Y or N)`);\n              continue;\n            }\n          }\n            const product: Product = {\n              id: Date.now().toString() + Math.random().toString(36),\n            type: row['Type* (Product / Service)'] || '',\n            group: row['Group* (Max. 50 Chars)'] || '',\n            brand: row['Brand* (Max. 50 Chars)'] || '',\n            itemCode: row['Item Code (Max. 50 Chars)'] || '',\n            name: row['Product Name* (Max. 50 Chars)'] || '',\n            printName: row['Print Name (Max. 50 Chars)'] || '',\n            unit: row['Unit (Max. 10 Chars)'] || '',\n            stock: parseInt(row['Opening Stock (Max. 5 Chars) (Numeric)'] || '0'),\n            openingStockValue: parseFloat(row['Opening Stock Value (Max. 10 Chars) (Numeric)'] || '0'),\n            cost: parseFloat(row['Purchase Price* (Max. 10 Chars) (Numeric)'] || '0'),\n            price: parseFloat(row['Sale Price* (Max. 10 Chars) (Numeric)'] || '0'),\n            minSalePrice: parseFloat(row['Min. Sale Price (Max. 10 Chars) (Numeric)'] || '0'),\n            mrp: parseFloat(row['M.R.P. (Max. 10 Chars) (Numeric)'] || '0'),\n            hsn: row['HSN/SAC (Max. 8 Chars) (Numeric)'] || '',\n            taxRate: parseFloat(row['GST Rate (%)* (Max. 5 Chars) (Numeric)'] || '0'),\n            saleDiscount: parseFloat(row['Sale Discount (%) (Max. 5 Chars) (Numeric)'] || '0'),\n            minStock: parseInt(row['Reorder Level (Max. 5 Chars) (Numeric)'] || '0'),\n            description: row['Description (Max. 250 Chars)'] || '',\n            printDescription: row['Print Description (Y/N)'] || '',\n            oneClickSale: row['One Click Sale (Y/N)'] || '',\n            enableTracking: row['Enable Tracking (Y/N)'] || '',\n            printSerial: row['Print Serial (Y/N)'] || '',\n            notForSale: row['Not For Sale (Y/N)'] || '',\n            productType: row['Product Type (General/Apparel/Footwear)'] || '',\n            category: row['Category'] || '',\n              isActive: true,\n              createdAt: new Date(),\n            updatedAt: new Date(),\n            };\n            if (product.name && product.price > 0) {\n              saveProduct(product);\n              success++;\n            } else {\n            errors.push(`Row ${rowNum + 2}: Missing name or invalid price`);\n          }\n        }\n      } else if (type === 'customers') {\n        // Load all existing customers to check for duplicates\n        const existingCustomers = JSON.parse(localStorage.getItem('customers') || '[]');\n        for (const row of jsonData) {\n          try {\n            // Trim all string fields\n            Object.keys(row).forEach(key => {\n              if (typeof (row as Record<string, unknown>)[key] === 'string') (row as Record<string, unknown>)[key] = ((row as Record<string, unknown>)[key] as string).trim();\n            });\n            const phone = (row as Record<string, unknown>).phone || (row as Record<string, unknown>).Phone || '';\n            const email = (row as Record<string, unknown>).email || (row as Record<string, unknown>).Email || '';\n            // Check for duplicate phone or email\n            if (existingCustomers.some((c: Customer) => c.phone === phone && phone !== '' || c.email === email && email !== '')) {\n              errors.push(`Duplicate customer with phone/email: ${phone || email}`);\n              continue;\n            }\n            const customer: Customer = {\n              id: Date.now().toString() + Math.random().toString(36),\n              name: (row as Record<string, unknown>).name as string || (row as Record<string, unknown>).Name as string || '',\n              email: email as string,\n              phone: phone as string,\n              address: {\n                street: (row as Record<string, unknown>).street as string || (row as Record<string, unknown>).Street as string || '',\n                city: (row as Record<string, unknown>).city as string || (row as Record<string, unknown>).City as string || '',\n                state: (row as Record<string, unknown>).state as string || (row as Record<string, unknown>).State as string || '',\n                zipCode: (row as Record<string, unknown>).zipCode as string || (row as Record<string, unknown>).ZipCode as string || ''\n              },\n              loyaltyPoints: parseInt((row as Record<string, unknown>).loyaltyPoints as string || (row as Record<string, unknown>).LoyaltyPoints as string || '0'),\n              totalSpent: parseFloat((row as Record<string, unknown>).totalSpent as string || (row as Record<string, unknown>).TotalSpent as string || '0'),\n              visits: parseInt((row as Record<string, unknown>).visits as string || (row as Record<string, unknown>).Visits as string || '0'),\n              notes: (row as Record<string, unknown>).notes as string || (row as Record<string, unknown>).Notes as string || '',\n              isActive: true,\n              createdAt: new Date(),\n              updatedAt: new Date()\n            };\n            if (customer.name && (customer.phone || customer.email)) {\n              saveCustomer(customer);\n              success++;\n            } else {\n              errors.push(`Row ${success + errors.length + 1}: Missing name or contact info`);\n            }\n          } catch (error) {\n            errors.push(`Row ${success + errors.length + 1}: ${error}`);\n          }\n        }\n      }\n\n      setResults({ success, errors });\n      toast.success(`Successfully imported ${success} ${type}`);\n      onImportComplete?.();\n    } catch (error) {\n      toast.error('Failed to process Excel file');\n      setResults({ success: 0, errors: ['Failed to read Excel file'] });\n    } finally {\n      setUploading(false);\n      event.target.value = '';\n    }\n  };\n\n  const downloadTemplate = () => {\n    let templateData: Record<string, unknown>[] = [];\n    \n    // UOM dropdown list\n    const UOM_OPTIONS = [\n      'UNT', 'TON', 'TBS', 'SQY', 'SQM', 'SQF', 'SET', 'ROL', 'QTL', 'PCS', 'PAC', 'NOS', 'MTR', 'MLT', 'KLR', 'KGS', 'GMS', 'DOZ', 'CTN', 'CMS', 'CCM', 'CBM', 'CAN', 'BUN', 'BTL', 'BOX', 'BKL', 'BDL', 'BAL', 'BAG'\n    ];\n\n    // Product template: all required and validated columns, correct order and names\n    const productTemplate = [{\n      'Type* (Product / Service)': 'Product',\n      'Group* (Max. 50 Chars)': 'General',\n      'Brand* (Max. 50 Chars)': 'BrandX',\n      'Item Code (Max. 50 Chars)': 'ITEM001',\n      'Product Name* (Max. 50 Chars)': 'Sample Product',\n      'Print Name (Max. 50 Chars)': 'Sample Product',\n      'Unit (Max. 10 Chars)': 'PCS',\n      'Opening Stock (Max. 5 Chars) (Numeric)': 100,\n      'Opening Stock Value (Max. 10 Chars) (Numeric)': 1000,\n      'Purchase Price* (Max. 10 Chars) (Numeric)': 50.00,\n      'Sale Price* (Max. 10 Chars) (Numeric)': 99.99,\n      'Min. Sale Price (Max. 10 Chars) (Numeric)': 80,\n      'M.R.P. (Max. 10 Chars) (Numeric)': 120,\n      'HSN/SAC (Max. 8 Chars) (Numeric)': '1234',\n      'GST Rate (%)* (Max. 5 Chars) (Numeric)': 18,\n      'Sale Discount (%) (Max. 5 Chars) (Numeric)': 5,\n      'Reorder Level (Max. 5 Chars) (Numeric)': 10,\n      'Description (Max. 250 Chars)': 'Sample product description',\n      'Print Description (Y/N)': 'Y',\n      'One Click Sale (Y/N)': 'N',\n      'Enable Tracking (Y/N)': 'Y',\n      'Print Serial (Y/N)': 'N',\n      'Not For Sale (Y/N)': 'N',\n      'Product Type (General/Apparel/Footwear)': 'General',\n      'Category': 'Beverages'\n    }];\n\n    // Customer template: all fields used in import logic, correct names\n    const customerTemplate = [{\n        Name: 'John Doe',\n      Email: 'john@example.com',\n        Phone: '9876543210',\n        Street: '123 Main St',\n        City: 'Mumbai',\n        State: 'Maharashtra',\n      ZipCode: '400001',\n      LoyaltyPoints: 0,\n      TotalSpent: 0,\n      Visits: 0,\n      Notes: 'VIP customer'\n    }];\n\n    if (type === 'products') {\n      templateData = productTemplate;\n    } else {\n      templateData = customerTemplate;\n    }\n\n    const ws = XLSX.utils.json_to_sheet(templateData);\n\n    // Add data validation (dropdown) for UoM column in product template\n    if (type === 'products') {\n      // Find the column letter for 'Unit (Max. 10 Chars)'\n      const headers = Object.keys(productTemplate[0]);\n      const uomColIdx = headers.indexOf('Unit (Max. 10 Chars)');\n      if (uomColIdx !== -1) {\n        // Excel columns are A, B, C, ...\n        const colLetter = String.fromCharCode(65 + uomColIdx);\n        // Data validation for rows 2-100 (enough for most imports)\n        for (let i = 2; i <= 100; i++) {\n          ws[`${colLetter}${i}`] = ws[`${colLetter}${i}`] || {};\n          ws['!dataValidation'] = ws['!dataValidation'] || [];\n          ws['!dataValidation'].push({\n            sqref: `${colLetter}${i}`,\n            type: 'list',\n            allowBlank: false,\n            formula1: '\"' + UOM_OPTIONS.join(',') + '\"'\n          });\n        }\n      }\n    }\n\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, type);\n    XLSX.writeFile(wb, `${type}_template.xlsx`);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <FileSpreadsheet className=\"w-5 h-5\" />\n          Import {type === 'products' ? 'Products' : 'Customers'} from Excel\n        </CardTitle>\n        <CardDescription>\n          Upload an Excel file to bulk import {type}. Download the template below for the correct format.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={downloadTemplate}>\n            Download Template\n          </Button>\n        </div>\n\n        <div>\n          <Label htmlFor=\"excel-file\">Choose Excel File</Label>\n          <Input\n            id=\"excel-file\"\n            type=\"file\"\n            accept=\".xlsx,.xls\"\n            onChange={handleFileUpload}\n            disabled={uploading}\n            className=\"mt-1\"\n          />\n        </div>\n\n        {uploading && (\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <Upload className=\"w-4 h-4 animate-spin\" />\n            Processing file...\n          </div>\n        )}\n\n        {results && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 text-green-600\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Successfully imported: {results.success} items\n            </div>\n            \n            {results.errors.length > 0 && (\n              <div className=\"space-y-1\">\n                <div className=\"flex items-center gap-2 text-red-600\">\n                  <XCircle className=\"w-4 h-4\" />\n                  Errors: {results.errors.length}\n                </div>\n                <div className=\"max-h-32 overflow-y-auto text-sm text-muted-foreground\">\n                  {results.errors.map((error, index) => (\n                    <div key={index}>• {error}</div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};","size_bytes":14400},"client/src/components/invoice/InvoiceTemplate.tsx":{"content":"import React from 'react';\nimport { Invoice, CompanyInfo, getCurrencySymbol } from '@/lib/invoice-utils';\n\ninterface InvoiceTemplateProps {\n  invoice: Invoice;\n  companyInfo: CompanyInfo;\n  settings?: Record<string, unknown>;\n}\n\nconst InvoiceTemplate: React.FC<InvoiceTemplateProps> = ({ \n  invoice, \n  companyInfo, \n  settings = {} \n}) => {\n  const currencySymbol = getCurrencySymbol(invoice.currency);\n  \n  return (\n    <div className=\"max-w-4xl mx-auto bg-white p-8 shadow-lg\" style={{ minHeight: '297mm' }}>\n      {/* Header */}\n      <div className=\"flex justify-between items-start mb-8\">\n        <div className=\"flex items-center space-x-4\">\n          {companyInfo.logo && settings.showLogo !== false && (\n            <img \n              src={companyInfo.logo} \n              alt=\"Company Logo\" \n              className=\"w-16 h-16 object-contain\"\n            />\n          )}\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-800\">{companyInfo.name}</h1>\n            <p className=\"text-gray-600\">{companyInfo.address}</p>\n            {companyInfo.city && companyInfo.state && (\n              <p className=\"text-gray-600\">{companyInfo.city}, {companyInfo.state} {companyInfo.pinCode}</p>\n            )}\n            <p className=\"text-gray-600\">{companyInfo.country}</p>\n            {companyInfo.phone && <p className=\"text-gray-600\">Phone: {companyInfo.phone}</p>}\n            {companyInfo.email && <p className=\"text-gray-600\">Email: {companyInfo.email}</p>}\n            {companyInfo.gstin && <p className=\"text-gray-600\">GSTIN: {companyInfo.gstin}</p>}\n            {companyInfo.taxId && <p className=\"text-gray-600\">PAN: {companyInfo.taxId}</p>}\n          </div>\n        </div>\n        \n        <div className=\"text-right\">\n          <h2 className=\"text-4xl font-bold text-blue-600 mb-2\">INVOICE</h2>\n          <div className=\"space-y-1 text-sm\">\n            <p><span className=\"font-semibold\">Invoice #:</span> {invoice.number}</p>\n            <p><span className=\"font-semibold\">Date:</span> {new Date(invoice.date).toLocaleDateString()}</p>\n            <p><span className=\"font-semibold\">Due Date:</span> {new Date(invoice.dueDate).toLocaleDateString()}</p>\n            <p><span className=\"font-semibold\">Status:</span> \n              <span className={`ml-2 px-2 py-1 rounded text-xs ${\n                invoice.status === 'paid' ? 'bg-green-100 text-green-800' :\n                invoice.status === 'sent' ? 'bg-blue-100 text-blue-800' :\n                invoice.status === 'overdue' ? 'bg-red-100 text-red-800' :\n                'bg-gray-100 text-gray-800'\n              }`}>\n                {invoice.status.toUpperCase()}\n              </span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Customer Information */}\n      {settings.showCustomerInfo !== false && (\n        <div className=\"grid grid-cols-2 gap-8 mb-8\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Bill To:</h3>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <p className=\"font-semibold\">{invoice.customer.name}</p>\n              {invoice.customer.address && <p className=\"text-gray-600\">{invoice.customer.address}</p>}\n              {invoice.customer.phone && <p className=\"text-gray-600\">Phone: {invoice.customer.phone}</p>}\n              {invoice.customer.email && <p className=\"text-gray-600\">Email: {invoice.customer.email}</p>}\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Ship To:</h3>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <p className=\"font-semibold\">{invoice.customer.name}</p>\n              {invoice.customer.address && <p className=\"text-gray-600\">{invoice.customer.address}</p>}\n              {invoice.customer.phone && <p className=\"text-gray-600\">Phone: {invoice.customer.phone}</p>}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Items Table */}\n      <div className=\"mb-8\">\n        <table className=\"w-full border-collapse\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"border border-gray-300 px-4 py-2 text-left\">Item</th>\n              <th className=\"border border-gray-300 px-4 py-2 text-left\">Description</th>\n              <th className=\"border border-gray-300 px-4 py-2 text-right\">Quantity</th>\n              <th className=\"border border-gray-300 px-4 py-2 text-right\">Unit Price</th>\n              <th className=\"border border-gray-300 px-4 py-2 text-right\">Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            {invoice.items.map((item, index) => (\n              <tr key={item.id} className={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>\n                <td className=\"border border-gray-300 px-4 py-2\">{item.name}</td>\n                <td className=\"border border-gray-300 px-4 py-2\">{item.description}</td>\n                <td className=\"border border-gray-300 px-4 py-2 text-right\">{item.quantity}</td>\n                <td className=\"border border-gray-300 px-4 py-2 text-right\">{currencySymbol}{item.unitPrice.toFixed(2)}</td>\n                <td className=\"border border-gray-300 px-4 py-2 text-right\">{currencySymbol}{item.total.toFixed(2)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Totals */}\n      <div className=\"flex justify-end mb-8\">\n        <div className=\"w-80\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-semibold\">Subtotal:</span>\n              <span>{currencySymbol}{invoice.subtotal.toFixed(2)}</span>\n            </div>\n            {settings.showTaxBreakdown !== false && (\n              <div className=\"flex justify-between\">\n                <span className=\"font-semibold\">Tax ({invoice.taxRate}%):</span>\n                <span>{currencySymbol}{invoice.taxAmount.toFixed(2)}</span>\n              </div>\n            )}\n            <div className=\"border-t pt-2 flex justify-between text-lg font-bold\">\n              <span>Total:</span>\n              <span>{currencySymbol}{invoice.total.toFixed(2)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Notes */}\n      {invoice.notes && (\n        <div className=\"mb-8\">\n          <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Notes:</h3>\n          <div className=\"bg-gray-50 p-4 rounded\">\n            <p className=\"text-gray-700\">{invoice.notes}</p>\n          </div>\n        </div>\n      )}\n\n      {/* Terms and Payment Instructions */}\n      <div className=\"grid grid-cols-2 gap-8\">\n        {settings.includeTerms && settings.termsText && (\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Terms & Conditions:</h3>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <p className=\"text-gray-700 text-sm\">{settings.termsText}</p>\n            </div>\n          </div>\n        )}\n        \n        {settings.includePaymentInstructions && settings.paymentInstructions && (\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Payment Instructions:</h3>\n            <div className=\"bg-gray-50 p-4 rounded\">\n              <p className=\"text-gray-700 text-sm\">{settings.paymentInstructions}</p>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"mt-12 pt-8 border-t text-center text-gray-600\">\n        <p>Thank you for your business!</p>\n        <p className=\"text-sm mt-2\">This is a computer generated invoice</p>\n      </div>\n    </div>\n  );\n};\n\nexport default InvoiceTemplate;","size_bytes":7672},"client/src/components/invoice/InvoiceViewer.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { Invoice, getCompanyInfo, getInvoiceSettings } from '@/lib/invoice-utils';\nimport InvoiceTemplate from './InvoiceTemplate';\nimport { Download, Printer, X, Eye } from 'lucide-react';\n\ninterface InvoiceViewerProps {\n  invoice: Invoice;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst InvoiceViewer: React.FC<InvoiceViewerProps> = ({ invoice, isOpen, onClose }) => {\n  const { toast } = useToast();\n  const [isPrinting, setIsPrinting] = useState(false);\n  const companyInfo = getCompanyInfo();\n  const settings = getInvoiceSettings();\n\n  const handlePrint = async () => {\n    setIsPrinting(true);\n    try {\n      // Create a new window for printing\n      const printWindow = window.open('', '_blank');\n      if (!printWindow) {\n        toast({\n          title: \"Error\",\n          description: \"Please allow popups to print invoices\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Get the invoice template HTML\n      const invoiceElement = document.getElementById('invoice-template');\n      if (!invoiceElement) {\n        toast({\n          title: \"Error\",\n          description: \"Invoice template not found\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Write the HTML to the new window\n      printWindow.document.write(`\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <title>Invoice ${invoice.number}</title>\n            <style>\n              @media print {\n                body { margin: 0; }\n                .no-print { display: none !important; }\n              }\n              body { font-family: Arial, sans-serif; }\n              * { box-sizing: border-box; }\n            </style>\n          </head>\n          <body>\n            ${invoiceElement.outerHTML}\n          </body>\n        </html>\n      `);\n      \n      printWindow.document.close();\n      \n      // Wait for content to load then print\n      printWindow.onload = () => {\n        printWindow.print();\n        printWindow.close();\n      };\n      \n      toast({\n        title: \"Success\",\n        description: \"Print dialog opened\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to print invoice\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsPrinting(false);\n    }\n  };\n\n  const handleDownload = async () => {\n    try {\n      // For now, we'll create a simple text version\n      // In a real implementation, you'd use a PDF library like jsPDF\n      const content = `\nINVOICE\n\nInvoice #: ${invoice.number}\nDate: ${new Date(invoice.date).toLocaleDateString()}\nDue Date: ${new Date(invoice.dueDate).toLocaleDateString()}\n\nFrom: ${companyInfo.name}\n${companyInfo.address}\n${companyInfo.city}, ${companyInfo.state} ${companyInfo.pinCode}\n\nTo: ${invoice.customer.name}\n${invoice.customer.address}\n${invoice.customer.phone}\n\nItems:\n${invoice.items.map(item => \n  `${item.name} - ${item.quantity} x ${item.unitPrice} = ${item.total}`\n).join('\\n')}\n\nSubtotal: ${invoice.subtotal}\nTax (${invoice.taxRate}%): ${invoice.taxAmount}\nTotal: ${invoice.total}\n\nNotes: ${invoice.notes}\n      `;\n\n      const blob = new Blob([content], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `invoice-${invoice.number}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      toast({\n        title: \"Success\",\n        description: \"Invoice downloaded\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download invoice\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>Invoice {invoice.number}</DialogTitle>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePrint}\n                disabled={isPrinting}\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                {isPrinting ? 'Printing...' : 'Print'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onClose}\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </DialogHeader>\n        \n        <div className=\"mt-4\">\n          <div id=\"invoice-template\">\n            <InvoiceTemplate \n              invoice={invoice} \n              companyInfo={companyInfo} \n              settings={settings}\n            />\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default InvoiceViewer;\n","size_bytes":5414},"client/src/components/layout/AppSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  BarChart3,\n  ShoppingCart,\n  Package,\n  Users,\n  UserCheck,\n  Receipt,\n  TrendingUp,\n  Store,\n  Settings,\n  Shield,\n  LogOut,\n  MessageSquare,\n  FileText\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarTrigger,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\n\n// Define navigation items with role-based access\nconst allNavigationItems = [\n  { title: \"Dashboard\", url: \"/\", icon: BarChart3, description: \"Overview & Analytics\", roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Sales\", url: \"/sales\", icon: ShoppingCart, description: \"Process Transactions\", roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Quick Sales\", url: \"/quickpos\", icon: ShoppingCart, description: \"Quick POS Billing\", roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Products\", url: \"/products\", icon: Package, description: \"Manage Inventory\", roles: ['company', 'admin', 'manager'] },\n  { title: \"Customers\", url: \"/customers\", icon: Users, description: \"Customer Management\", roles: ['company', 'admin', 'manager', 'cashier', 'sales', 'support'] },\n  { title: \"Employees\", url: \"/employees\", icon: UserCheck, description: \"Staff Management\", roles: ['company', 'admin'] },\n  { title: \"Invoices\", url: \"/invoices\", icon: FileText, description: \"Invoice Management\", roles: ['company', 'admin', 'manager'] },\n  { title: \"Transactions\", url: \"/transactions\", icon: Receipt, description: \"Transaction History\", roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Reports\", url: \"/reports\", icon: TrendingUp, description: \"Sales Analytics\", roles: ['company', 'admin', 'manager'] },\n  { title: \"Admin Company Dashboard\", url: \"/admin/company-dashboard\", icon: Users, description: \"Internal Team Workspace\", roles: ['sales', 'support', 'technical', 'marketing', 'finance', 'hr'] },\n  { title: \"Admin Panel\", url: \"/admin\", icon: Shield, description: \"System Administration\", roles: ['super_admin', 'admin'] },\n  { title: \"Admin CRM\", url: \"/admin/crm\", icon: Users, description: \"Customer Relationship Management\", roles: ['sales', 'support', 'admin', 'technical', 'marketing', 'finance', 'hr'] },\n  { title: \"Subscription Admin\", url: \"/admin/subscriptions\", icon: Shield, description: \"Manage Subscriptions\", roles: ['super_admin', 'admin'] },\n  { title: \"Company Dashboard\", url: \"/company/dashboard\", icon: Store, description: \"View Subscription & Support\", roles: ['company'] }\n  ,{ title: \"Support Center\", url: \"/admin/support\", icon: MessageSquare, description: \"Tickets & Messaging\", roles: ['support', 'sales', 'technical', 'marketing', 'finance', 'hr', 'admin', 'super_admin'] }\n];\n\nexport function AppSidebar() {\n  const { state } = useSidebar();\n  const [location] = useLocation();\n  const currentPath = location;\n  const { company, employee, adminAuth, logout, logoutEmployee, logoutAdmin } = useAuth();\n\n  // Determine user role\n  const getUserRole = () => {\n    if (adminAuth.isAuthenticated && adminAuth.adminUser) {\n      return adminAuth.adminUser.role;\n    }\n    if (employee) {\n      return employee.position?.toLowerCase() || 'cashier';\n    }\n    if (company) {\n      return 'company';\n    }\n    return null;\n  };\n\n  const userRole = getUserRole();\n\n  // Filter navigation items based on user role and context\n  // If not authenticated as software-company admin, hide all \"/admin\" routes\n  const isSoftwareAdminContext = !!(adminAuth.isAuthenticated && adminAuth.adminUser);\n  const navigationItems = allNavigationItems.filter(item => {\n    if (!userRole) return false;\n    if (!isSoftwareAdminContext && item.url.startsWith('/admin')) {\n      return false;\n    }\n    return item.roles.includes(userRole);\n  });\n\n  const isActive = (path: string) => currentPath === path;\n  const getNavCls = ({ isActive }: { isActive: boolean }) =>\n    isActive ? \"bg-sidebar-accent text-sidebar-accent-foreground font-medium\" : \"hover:bg-sidebar-accent/50\";\n\n  const handleLogout = () => {\n    if (adminAuth.isAuthenticated) {\n      logoutAdmin();\n    } else if (employee) {\n      logoutEmployee();\n    } else {\n      logout();\n    }\n  };\n\n  // Get user display info\n  const getUserInfo = () => {\n    if (adminAuth.isAuthenticated && adminAuth.adminUser) {\n      return {\n        name: adminAuth.adminUser.username,\n        role: adminAuth.adminUser.role,\n        type: 'Admin'\n      };\n    }\n    if (employee) {\n      return {\n        name: employee.name,\n        role: employee.position || 'Employee',\n        type: 'Employee'\n      };\n    }\n    if (company) {\n      return {\n        name: company.name,\n        role: 'Company Owner',\n        type: 'Company'\n      };\n    }\n    return null;\n  };\n\n  const userInfo = getUserInfo();\n\n  return (\n    <Sidebar\n      collapsible=\"icon\"\n    >\n      <SidebarContent>\n        {/* Header */}\n        <div className=\"p-4 border-b border-sidebar-border\">\n          <div className=\"flex items-center gap-2\">\n            <Store className=\"w-6 h-6 text-sidebar-primary\" />\n            {state !== \"collapsed\" && (\n              <div>\n                <h1 className=\"text-lg font-bold text-sidebar-foreground\">Ace-Bill</h1>\n                <p className=\"text-xs text-sidebar-foreground/70\">Professional Billing</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* User Info */}\n        {userInfo && state !== \"collapsed\" && (\n          <div className=\"p-4 border-b border-sidebar-border\">\n            <div className=\"text-sm\">\n              <div className=\"font-medium text-sidebar-foreground\">{userInfo.name}</div>\n              <div className=\"text-xs text-sidebar-foreground/70\">{userInfo.role} • {userInfo.type}</div>\n            </div>\n          </div>\n        )}\n\n        {/* Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Main Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild className={getNavCls({ isActive: isActive(item.url) })}>\n                    <Link to={item.url} className=\"flex items-center gap-3 p-3 rounded-lg transition-colors mobile-optimized touch-friendly\">\n                      <item.icon className=\"w-5 h-5\" />\n                      {state !== \"collapsed\" && (\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">{item.title}</span>\n                          <span className=\"text-xs text-sidebar-foreground/70\">{item.description}</span>\n                        </div>\n                      )}\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Settings & Logout */}\n        <SidebarGroup className=\"mt-auto\">\n          <SidebarGroupContent>\n            <SidebarMenu>\n                   {userRole && (userRole === 'company' || userRole === 'admin' || userRole === 'super_admin') && (\n                     <SidebarMenuItem>\n                       <SidebarMenuButton asChild>\n                         <NavLink to={userRole === 'company' ? \"/settings\" : \"/admin/settings\"} className={getNavCls}>\n                           <Settings className=\"w-5 h-5\" />\n                           {state !== \"collapsed\" && (\n                             <div className=\"flex flex-col\">\n                               <span className=\"font-medium\">Settings</span>\n                               <span className=\"text-xs text-sidebar-foreground/70\">{userRole === 'company' ? 'Company Settings' : 'Admin Settings'}</span>\n                             </div>\n                           )}\n                         </NavLink>\n                       </SidebarMenuButton>\n                     </SidebarMenuItem>\n                   )}\n              \n              <SidebarMenuItem>\n                <SidebarMenuButton onClick={handleLogout} className=\"hover:bg-destructive/10 hover:text-destructive\">\n                  <LogOut className=\"w-5 h-5\" />\n                  {state !== \"collapsed\" && (\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">Logout</span>\n                      <span className=\"text-xs text-sidebar-foreground/70\">Sign out</span>\n                    </div>\n                  )}\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":8858},"client/src/components/layout/MobileNav.tsx":{"content":"import { NavLink, useLocation } from \"react-router-dom\";\nimport {\n  BarChart3,\n  ShoppingCart,\n  Package,\n  Users,\n  UserCheck,\n  Receipt,\n  TrendingUp,\n  Store,\n  Settings,\n  Shield\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Define mobile navigation items with role-based access\nconst allMobileNavItems = [\n  { title: \"Dashboard\", url: \"/\", icon: BarChart3, roles: ['company', 'admin', 'manager', 'cashier', 'support', 'sales'] },\n  { title: \"Sales\", url: \"/sales\", icon: ShoppingCart, roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Quick POS\", url: \"/quickpos\", icon: Receipt, roles: ['company', 'admin', 'manager', 'cashier'] },\n  { title: \"Products\", url: \"/products\", icon: Package, roles: ['company', 'admin', 'manager'] },\n  { title: \"Customers\", url: \"/customers\", icon: Users, roles: ['company', 'admin', 'manager', 'cashier', 'sales', 'support'] },\n  { title: \"Reports\", url: \"/reports\", icon: TrendingUp, roles: ['company', 'admin', 'manager'] },\n  { title: \"Admin\", url: \"/admin\", icon: Shield, roles: ['super_admin', 'admin'] },\n  { title: \"CRM\", url: \"/admin/crm\", icon: Users, roles: ['sales', 'support', 'admin'] }\n];\n\nexport function MobileNav() {\n  const location = useLocation();\n  const currentPath = location.pathname;\n  const { company, employee, adminAuth } = useAuth();\n\n  // Determine user role\n  const getUserRole = () => {\n    if (adminAuth.isAuthenticated && adminAuth.adminUser) {\n      return adminAuth.adminUser.role;\n    }\n    if (employee) {\n      return employee.position?.toLowerCase() || 'cashier';\n    }\n    if (company) {\n      return 'company';\n    }\n    return null;\n  };\n\n  const userRole = getUserRole();\n\n  // Filter navigation items based on user role and context\n  const isSoftwareAdminContext = !!(adminAuth.isAuthenticated && adminAuth.adminUser);\n  const mobileNavItems = allMobileNavItems\n    .filter(item => {\n      if (!userRole) return false;\n      if (!isSoftwareAdminContext && item.url.startsWith('/admin')) {\n        return false;\n      }\n      return item.roles.includes(userRole);\n    })\n    .slice(0, 5); // Limit to 5 items for mobile\n\n  const isActive = (path: string) => currentPath === path;\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 z-50\">\n      <div className=\"flex justify-around items-center h-16\">\n        {mobileNavItems.map((item) => (\n          <NavLink\n            key={item.title}\n            to={item.url}\n            className={`flex flex-col items-center justify-center flex-1 h-full ${\n              isActive(item.url)\n                ? \"text-blue-600 bg-blue-50\"\n                : \"text-gray-600 hover:text-blue-600\"\n            }`}\n          >\n            <item.icon className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs font-medium\">{item.title}</span>\n          </NavLink>\n        ))}\n      </div>\n    </div>\n  );\n} ","size_bytes":2917},"client/src/components/pos/CartSidebar.tsx":{"content":"import { CartItem } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Minus, Plus, Trash2, ShoppingCart } from 'lucide-react';\n\ninterface CartSidebarProps {\n  items: CartItem[];\n  onUpdateQuantity: (productId: string, quantity: number) => void;\n  onRemoveItem: (productId: string) => void;\n  onCheckout: () => void;\n  onClearCart: () => void;\n  total: number;\n  itemCount: number;\n}\n\nexport const CartSidebar = ({\n  items,\n  onUpdateQuantity,\n  onRemoveItem,\n  onCheckout,\n  onClearCart,\n  total,\n  itemCount\n}: CartSidebarProps) => {\n  return (\n    <div className=\"w-96 bg-card border-l border-border h-full flex flex-col\">\n      <CardHeader className=\"border-b border-border\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <ShoppingCart className=\"w-5 h-5\" />\n          Cart\n          {itemCount > 0 && (\n            <Badge variant=\"secondary\">{itemCount}</Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"flex-1 overflow-y-auto p-4\">\n        {items.length === 0 ? (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <ShoppingCart className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n            <p>Your cart is empty</p>\n            <p className=\"text-sm\">Add products to get started</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {items.map((item) => (\n              <div key={item.product.id} className=\"border border-border rounded-lg p-3\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"font-medium\">{item.product.name}</h4>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onRemoveItem(item.product.id)}\n                    className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onUpdateQuantity(item.product.id, item.quantity - 1)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Minus className=\"w-3 h-3\" />\n                    </Button>\n                    \n                    <Input\n                      type=\"number\"\n                      value={item.quantity}\n                      onChange={(e) => {\n                        const value = parseInt(e.target.value) || 0;\n                        onUpdateQuantity(item.product.id, value);\n                      }}\n                      className=\"w-16 text-center h-8\"\n                      min=\"1\"\n                    />\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => onUpdateQuantity(item.product.id, item.quantity + 1)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Plus className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                  \n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">\n                        ₹{(item.product.price * item.quantity).toFixed(2)}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        ₹{item.product.price.toFixed(2)} each\n                      </p>\n                    </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n      \n      {items.length > 0 && (\n        <div className=\"border-t border-border p-4 space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-lg font-semibold\">Total:</span>\n            <span className=\"text-2xl font-bold text-primary\">\n              ₹{total.toFixed(2)}\n            </span>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"space-y-2\">\n            <Button onClick={onCheckout} className=\"w-full\" size=\"lg\">\n              Checkout\n            </Button>\n            <Button onClick={onClearCart} variant=\"outline\" className=\"w-full\">\n              Clear Cart\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","size_bytes":4819},"client/src/components/pos/CheckoutDialog.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { CartItem, Transaction, Customer } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport { Separator } from '@/components/ui/separator';\nimport { CreditCard, DollarSign, User, Phone, Printer } from 'lucide-react';\nimport { getCustomers, saveCustomer } from '@/lib/storage';\nimport { useSettings } from '@/hooks/useSettings';\nimport { format } from 'date-fns';\nimport { useLocation } from 'wouter';\nimport { printDriver } from '@/lib/printDrivers';\n\ninterface CheckoutDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  items: CartItem[];\n  total: number;\n  onComplete: (transaction: Transaction) => void;\n}\n\nexport const CheckoutDialog = ({\n  isOpen,\n  onClose,\n  items,\n  total,\n  onComplete\n}: CheckoutDialogProps) => {\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card'>('cash');\n  const [customerName, setCustomerName] = useState('');\n  const [customerPhone, setCustomerPhone] = useState('');\n  const [cashAmount, setCashAmount] = useState('');\n  const [cardTransactionId, setCardTransactionId] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [customer, setCustomer] = useState<Customer | null>(null);\n  const [lastTransaction, setLastTransaction] = useState<Transaction | null>(null);\n  const { companySettings, printSettings, refreshSettings } = useSettings();\n  const [, setLocation] = useLocation();\n\n  // Auto-fetch customer details when phone number is entered\n  useEffect(() => {\n    const fetchCustomer = async () => {\n      if (customerPhone.length >= 10 && /^\\d+$/.test(customerPhone)) {\n        const customers = await getCustomers();\n        const foundCustomer = customers.find(c => c.phone === customerPhone);\n        if (foundCustomer) {\n          setCustomer(foundCustomer);\n          setCustomerName(foundCustomer.name);\n        } else {\n          setCustomer(null);\n          setCustomerName('');\n        }\n      } else {\n        setCustomer(null);\n        setCustomerName('');\n      }\n    };\n    fetchCustomer();\n  }, [customerPhone]);\n\n  const printInvoice = async (transaction: Transaction) => {\n    await printDriver.print(transaction, printSettings);\n  };\n\n  const handleComplete = async () => {\n    // Validation\n    if (paymentMethod === 'cash' && (!cashAmount || parseFloat(cashAmount) < total)) {\n      return;\n    }\n    if (paymentMethod === 'card' && (!cardTransactionId || cardTransactionId.length < 4)) {\n      return;\n    }\n\n    setIsProcessing(true);\n    \n    // Create or update customer if phone number provided\n    let customerId = customer?.id;\n    if (customerPhone && customerName) {\n      if (!customer) {\n        const newCustomer: Customer = {\n          id: Date.now().toString(),\n          companyId: 'default', // TODO: Get actual company ID from auth context\n          name: customerName,\n          phone: customerPhone,\n          loyaltyPoints: 0,\n          totalSpent: total,\n          visitCount: 1,\n          lastVisit: new Date(),\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n        saveCustomer(newCustomer);\n        customerId = newCustomer.id;\n      } else {\n        // Update existing customer\n        const updatedCustomer = {\n          ...customer,\n          totalSpent: customer.totalSpent + total,\n          visitCount: (customer.visitCount || 0) + 1,\n          lastVisit: new Date(),\n          updatedAt: new Date()\n        };\n        await saveCustomer(updatedCustomer);\n      }\n    }\n    \n    // Simulate payment processing\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const cashAmountPaid = paymentMethod === 'cash' ? parseFloat(cashAmount) : 0;\n    const change = paymentMethod === 'cash' ? cashAmountPaid - total : 0;\n    \n    const transactionItems = items.map(item => ({\n      productId: item.product.id,\n      name: item.product.name,\n      quantity: item.quantity,\n      price: item.product.price,\n      total: item.product.price * item.quantity\n    }));\n\n    const transaction: Transaction = {\n      id: Date.now().toString(),\n      items: transactionItems,\n      subtotal: total,\n      tax: 0,\n      discount: 0,\n      total,\n      paymentMethod,\n      paymentDetails: {\n        ...(paymentMethod === 'cash' && {\n          cashAmount: cashAmountPaid,\n          change: change > 0 ? change : 0\n        }),\n        ...(paymentMethod === 'card' && {\n          cardAmount: total\n        })\n      },\n      timestamp: new Date(),\n      customerId,\n      customerName: customerName || undefined,\n      customerPhone: customerPhone || undefined,\n      receipt: paymentMethod === 'card' ? cardTransactionId : undefined,\n      status: 'completed'\n    };\n    \n    onComplete(transaction);\n    setLastTransaction(transaction);\n    \n    // Print invoice\n    await printInvoice(transaction);\n    \n    setIsProcessing(false);\n    \n    // Reset form\n    setCustomerName('');\n    setCustomerPhone('');\n    setCashAmount('');\n    setCardTransactionId('');\n    setPaymentMethod('cash');\n    setCustomer(null);\n    onClose();\n    \n    // Redirect to QuickPOS for next billing after a short delay\n    setTimeout(() => {\n      setLocation('/quickpos');\n    }, 1500); // 1.5 second delay to allow printing to complete\n  };\n\n  const cashAmountFloat = parseFloat(cashAmount) || 0;\n  const change = paymentMethod === 'cash' && cashAmountFloat > total ? cashAmountFloat - total : 0;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-screen h-screen max-w-none max-h-none flex items-center justify-center bg-white\">\n        <div className=\"w-full max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle>Checkout</DialogTitle>\n            <DialogDescription>\n              Complete the transaction\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Order Summary */}\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Order Summary</h4>\n              <div className=\"space-y-1\">\n                {items.map((item) => (\n                  <div key={item.product.id} className=\"flex justify-between text-sm\">\n                    <span>{item.product.name} x{item.quantity}</span>\n                    <span>₹{(item.product.price * item.quantity).toFixed(2)}</span>\n                  </div>\n                ))}\n              </div>\n              <Separator />\n              <div className=\"flex justify-between font-semibold\">\n                <span>Total:</span>\n                <span>₹{total.toFixed(2)}</span>\n              </div>\n            </div>\n\n            {/* Customer Info */}\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"customer-phone\" className=\"flex items-center gap-2\">\n                  <Phone className=\"w-4 h-4\" />\n                  Customer Phone Number\n                </Label>\n                <Input\n                  id=\"customer-phone\"\n                  value={customerPhone}\n                  onChange={(e) => setCustomerPhone(e.target.value)}\n                  placeholder=\"Enter 10-digit phone number\"\n                  maxLength={10}\n                />\n                {customer && (\n                  <div className=\"text-sm text-green-600 flex items-center gap-2\">\n                    <User className=\"w-4 h-4\" />\n                    Existing customer found: {customer.name}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"customer-name\">Customer Name</Label>\n                <Input\n                  id=\"customer-name\"\n                  value={customerName}\n                  onChange={(e) => setCustomerName(e.target.value)}\n                  placeholder=\"Enter customer name\"\n                  disabled={!!customer}\n                />\n              </div>\n            </div>\n\n            {/* Payment Method */}\n            <div className=\"space-y-3\">\n              <Label>Payment Method</Label>\n              <RadioGroup value={paymentMethod} onValueChange={(value) => setPaymentMethod(value as 'cash' | 'card')}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"cash\" id=\"cash\" />\n                  <Label htmlFor=\"cash\" className=\"flex items-center gap-2\">\n                    <DollarSign className=\"w-4 h-4\" />\n                    Cash\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"card\" id=\"card\" />\n                  <Label htmlFor=\"card\" className=\"flex items-center gap-2\">\n                    <CreditCard className=\"w-4 h-4\" />\n                    Card\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Payment Details */}\n            {paymentMethod === 'cash' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"cash-amount\">Cash Amount Received</Label>\n                <Input\n                  id=\"cash-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={cashAmount}\n                  onChange={(e) => setCashAmount(e.target.value)}\n                  placeholder=\"Enter amount received\"\n                />\n                {change > 0 && (\n                  <div className=\"text-sm text-green-600\">\n                    Change to return: ₹{change.toFixed(2)}\n                  </div>\n                )}\n                {cashAmountFloat > 0 && cashAmountFloat < total && (\n                  <div className=\"text-sm text-red-600\">\n                    Insufficient amount. Need ₹{(total - cashAmountFloat).toFixed(2)} more.\n                  </div>\n                )}\n              </div>\n            )}\n\n            {paymentMethod === 'card' && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"transaction-id\">Last 4 digits of Transaction ID</Label>\n                <Input\n                  id=\"transaction-id\"\n                  value={cardTransactionId}\n                  onChange={(e) => setCardTransactionId(e.target.value)}\n                  placeholder=\"Enter last 4 digits\"\n                  maxLength={4}\n                />\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button \n                onClick={handleComplete} \n                disabled={\n                  isProcessing || \n                  (paymentMethod === 'cash' && (!cashAmount || parseFloat(cashAmount) < total)) ||\n                  (paymentMethod === 'card' && (!cardTransactionId || cardTransactionId.length < 4))\n                } \n                className=\"flex-1\"\n              >\n                <Printer className=\"w-4 h-4 mr-2\" />\n                {isProcessing ? 'Processing...' : 'Complete & Print'}\n              </Button>\n              {lastTransaction && (\n                <Button\n                  variant=\"secondary\"\n                  onClick={async () => {\n                    await printDriver.print(lastTransaction, printSettings);\n                  }}\n                  className=\"flex-1\"\n                >\n                  Download PDF\n                </Button>\n              )}\n            </div>\n            \n            {/* Debug: Test Settings */}\n            <div className=\"mt-4 flex justify-end\">\n              <Button variant=\"outline\" onClick={() => setLocation('/create-invoice')}>\n                Generate Invoice\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};","size_bytes":12194},"client/src/components/pos/ProductGrid.tsx":{"content":"import { Product } from '@/lib/types';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus } from 'lucide-react';\nimport { useState } from 'react';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\n\ninterface ProductGridProps {\n  products: Product[];\n  onProductSelect: (product: Product, qty: number) => void;\n  searchQuery?: string;\n}\n\n// Add a function to determine if a unit is decimal-based\nconst DECIMAL_UNITS = ['KGS', 'GMS', 'LTR', 'MLT', 'TON', 'SQM', 'SQF', 'MTR', 'CMS', 'CCM', 'CBM'];\nconst isDecimalUnit = (unit: string) => DECIMAL_UNITS.includes((unit || '').toUpperCase());\n\nexport const ProductGrid = ({ products, onProductSelect, searchQuery = '' }: ProductGridProps) => {\n  const [weights, setWeights] = useState<{ [productId: string]: number }>({});\n\n  const filteredProducts = Array.isArray(products) ? products.filter(product =>\n    product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.category.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    product.sku?.toLowerCase().includes(searchQuery.toLowerCase())\n  ) : [];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n      {filteredProducts.map((product) => {\n        const unit = product.unit || 'PCS';\n        const isDecimal = isDecimalUnit(unit);\n        const qty = weights[product.id] || 1;\n        const priceForQty = product.price * qty;\n        return (\n          <Card key={product.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex justify-between items-start\">\n                <CardTitle className=\"text-lg\">{product.name}</CardTitle>\n                <Badge variant=\"secondary\">{product.category}</Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-2xl font-bold text-primary\">\n                  ₹{priceForQty.toFixed(2)}\n                </span>\n                <span className=\"text-sm text-muted-foreground\">\n                  Stock: {product.stock}\n                </span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Label htmlFor={`qty-${product.id}`}>Quantity ({unit}):</Label>\n                <Input\n                  id={`qty-${product.id}`}\n                  type=\"number\"\n                  min={isDecimal ? '0.01' : '1'}\n                  step={isDecimal ? '0.01' : '1'}\n                  value={qty}\n                  onChange={e => {\n                    const val = isDecimal ? parseFloat(e.target.value) : parseInt(e.target.value);\n                    setWeights(w => ({ ...w, [product.id]: isNaN(val) ? 0 : val }));\n                  }}\n                  className=\"w-24\"\n                />\n              </div>\n              {product.description && (\n                <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                  {product.description}\n                </p>\n              )}\n              <Button\n                onClick={() => onProductSelect(product, qty)}\n                className=\"w-full\"\n                disabled={product.stock <= 0 || qty <= 0}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add to Cart\n              </Button>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};","size_bytes":3621},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" {...props}>\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4791},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"// This component is deprecated - use @/hooks/use-toast instead\n// Keeping this file for backward compatibility but redirecting to shadcn toast\n\nexport { toast } from \"@/hooks/use-toast\"\nexport { Toaster } from \"@/components/ui/toaster\"\n","size_bytes":237},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":756},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82}}}